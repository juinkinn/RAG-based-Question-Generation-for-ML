Title,Article Body,vector
Linear Regression,"Linear Regression ¶ Introduction Simple regression Making predictions Cost function Gradient descent Training Model evaluation Summary Multivariable regression Growing complexity Normalization Making predictions Initialize weights Cost function Gradient descent Simplifying with matrices Bias term Model evaluation Introduction ¶ Linear Regression is a supervised machine learning algorithm where the predicted output is continuous and has a constant slope. It’s used to predict values within a continuous range, (e.g. sales, price) rather than trying to classify them into categories (e.g. cat, dog). There are two main types: Simple regression Simple linear regression uses traditional slope-intercept form, where \(m\) and \(b\) are the variables our algorithm will try to “learn” to produce the most accurate predictions. \(x\) represents our input data and \(y\) represents our prediction. \[y = mx + b\] Multivariable regression A more complex, multi-variable linear equation might look like this, where \(w\) represents the coefficients, or weights, our model will try to learn. \[f(x,y,z) = w_1 x + w_2 y + w_3 z\] The variables \(x, y, z\) represent the attributes, or distinct pieces of information, we have about each observation. For sales predictions, these attributes might include a company’s advertising spend on radio, TV, and newspapers. \[Sales = w_1 Radio + w_2 TV + w_3 News\] Simple regression ¶ Let’s say we are given a dataset with the following columns (features): how much a company spends on Radio advertising each year and its annual Sales in terms of units sold. We are trying to develop an equation that will let us to predict units sold based on how much a company spends on radio advertising. The rows (observations) represent companies. Company Radio ($) Sales Amazon 37.8 22.1 Google 39.3 10.4 Facebook 45.9 18.3 Apple 41.3 18.5 Making predictions ¶ Our prediction function outputs an estimate of sales given a company’s radio advertising spend and our current values for Weight and Bias . \[Sales = Weight \cdot Radio + Bias\] Weight the coefficient for the Radio independent variable. In machine learning we call coefficients weights . Radio the independent variable. In machine learning we call these variables features . Bias the intercept where our line intercepts the y-axis. In machine learning we can call intercepts bias . Bias offsets all predictions that we make. Our algorithm will try to learn the correct values for Weight and Bias. By the end of our training, our equation will approximate the line of best fit . Code def predict_sales ( radio , weight , bias ): return weight * radio + bias Cost function ¶ The prediction function is nice, but for our purposes we don’t really need it. What we need is a cost function so we can start optimizing our weights. Let’s use MSE (L2) as our cost function. MSE measures the average squared difference between an observation’s actual and predicted values. The output is a single number representing the cost, or score, associated with our current set of weights. Our goal is to minimize MSE to improve the accuracy of our model. Math Given our simple linear equation \(y = mx + b\) , we can calculate MSE as: \[MSE = \frac{1}{N} \sum_{i=1}^{n} (y_i - (m x_i + b))^2\] Note \(N\) is the total number of observations (data points) \(\frac{1}{N} \sum_{i=1}^{n}\) is the mean \(y_i\) is the actual value of an observation and \(m x_i + b\) is our prediction Code def cost_function ( radio , sales , weight , bias ): companies = len ( radio ) total_error = 0.0 for i in range ( companies ): total_error += ( sales [ i ] - ( weight * radio [ i ] + bias )) ** 2 return total_error / companies Gradient descent ¶ To minimize MSE we use Gradient Descent to calculate the gradient of our cost function. Gradient descent consists of looking at the error that our weight currently gives us, using the derivative of the cost function to find the gradient (The slope of the cost function using our current weight), and then changing our weight to move in the direction opposite of the gradient. We need to move in the opposite direction of the gradient since the gradient points up the slope instead of down it, so we move in the opposite direction to try to decrease our error. Math There are two parameters (coefficients) in our cost function we can control: weight \(m\) and bias \(b\) . Since we need to consider the impact each one has on the final prediction, we use partial derivatives. To find the partial derivatives, we use the Chain rule . We need the chain rule because \((y - (mx + b))^2\) is really 2 nested functions: the inner function \(y - (mx + b)\) and the outer function \(x^2\) . Returning to our cost function: \[f(m,b) = \frac{1}{N} \sum_{i=1}^{n} (y_i - (mx_i + b))^2\] Using the following: \[(y_i - (mx_i + b))^2 = A(B(m,b))\] We can split the derivative into \[ \begin{align}\begin{aligned}A(x) = x^2\\\frac{df}{dx} = A'(x) = 2x\end{aligned}\end{align} \] and \[ \begin{align}\begin{aligned}B(m,b) = y_i - (mx_i + b) = y_i - mx_i - b\\\frac{dx}{dm} = B'(m) = 0 - x_i - 0 = -x_i\\\frac{dx}{db} = B'(b) = 0 - 0 - 1 = -1\end{aligned}\end{align} \] And then using the Chain rule which states: \[ \begin{align}\begin{aligned}\frac{df}{dm} = \frac{df}{dx} \frac{dx}{dm}\\\frac{df}{db} = \frac{df}{dx} \frac{dx}{db}\end{aligned}\end{align} \] We then plug in each of the parts to get the following derivatives \[ \begin{align}\begin{aligned}\frac{df}{dm} = A'(B(m,f)) B'(m) = 2(y_i - (mx_i + b)) \cdot -x_i\\\frac{df}{db} = A'(B(m,f)) B'(b) = 2(y_i - (mx_i + b)) \cdot -1\end{aligned}\end{align} \] We can calculate the gradient of this cost function as: \[\begin{split}\begin{align} f'(m,b) = \begin{bmatrix} \frac{df}{dm}\\ \frac{df}{db}\\ \end{bmatrix} &= \begin{bmatrix} \frac{1}{N} \sum -x_i \cdot 2(y_i - (mx_i + b)) \\ \frac{1}{N} \sum -1 \cdot 2(y_i - (mx_i + b)) \\ \end{bmatrix}\\ &= \begin{bmatrix} \frac{1}{N} \sum -2x_i(y_i - (mx_i + b)) \\ \frac{1}{N} \sum -2(y_i - (mx_i + b)) \\ \end{bmatrix} \end{align}\end{split}\] Code To solve for the gradient, we iterate through our data points using our new weight and bias values and take the average of the partial derivatives. The resulting gradient tells us the slope of our cost function at our current position (i.e. weight and bias) and the direction we should update to reduce our cost function (we move in the direction opposite the gradient). The size of our update is controlled by the learning rate . def update_weights ( radio , sales , weight , bias , learning_rate ): weight_deriv = 0 bias_deriv = 0 companies = len ( radio ) for i in range ( companies ): # Calculate partial derivatives # -2x(y - (mx + b)) weight_deriv += - 2 * radio [ i ] * ( sales [ i ] - ( weight * radio [ i ] + bias )) # -2(y - (mx + b)) bias_deriv += - 2 * ( sales [ i ] - ( weight * radio [ i ] + bias )) # We subtract because the derivatives point in direction of steepest ascent weight -= ( weight_deriv / companies ) * learning_rate bias -= ( bias_deriv / companies ) * learning_rate return weight , bias Training ¶ Training a model is the process of iteratively improving your prediction equation by looping through the dataset multiple times, each time updating the weight and bias values in the direction indicated by the slope of the cost function (gradient). Training is complete when we reach an acceptable error threshold, or when subsequent training iterations fail to reduce our cost. Before training we need to initialize our weights (set default values), set our hyperparameters (learning rate and number of iterations), and prepare to log our progress over each iteration. Code def train ( radio , sales , weight , bias , learning_rate , iters ): cost_history = [] for i in range ( iters ): weight , bias = update_weights ( radio , sales , weight , bias , learning_rate ) #Calculate cost for auditing purposes cost = cost_function ( radio , sales , weight , bias ) cost_history . append ( cost ) # Log Progress if i % 10 == 0 : print ""iter= {:d} weight= {:.2f} bias= {:.4f} cost= {:.2} "" . format ( i , weight , bias , cost ) return weight , bias , cost_history Model evaluation ¶ If our model is working, we should see our cost decrease after every iteration. Logging iter = 1 weight =. 03 bias =. 0014 cost = 197.25 iter = 10 weight =. 28 bias =. 0116 cost = 74.65 iter = 20 weight =. 39 bias =. 0177 cost = 49.48 iter = 30 weight =. 44 bias =. 0219 cost = 44.31 iter = 30 weight =. 46 bias =. 0249 cost = 43.28 Visualizing Cost history Summary ¶ By learning the best values for weight (.46) and bias (.25), we now have an equation that predicts future sales based on radio advertising investment. \[Sales = .46 Radio + .025\] How would our model perform in the real world? I’ll let you think about it :) Multivariable regression ¶ Let’s say we are given data on TV, radio, and newspaper advertising spend for a list of companies, and our goal is to predict sales in terms of units sold. Company TV Radio News Units Amazon 230.1 37.8 69.1 22.1 Google 44.5 39.3 23.1 10.4 Facebook 17.2 45.9 34.7 18.3 Apple 151.5 41.3 13.2 18.5 Growing complexity ¶ As the number of features grows, the complexity of our model increases and it becomes increasingly difficult to visualize, or even comprehend, our data. One solution is to break the data apart and compare 1-2 features at a time. In this example we explore how Radio and TV investment impacts Sales. Normalization ¶ As the number of features grows, calculating gradient takes longer to compute. We can speed this up by “normalizing” our input data to ensure all values are within the same range. This is especially important for datasets with high standard deviations or differences in the ranges of the attributes. Our goal now will be to normalize our features so they are all in the range -1 to 1. Code For each feature column { #1 Subtract the mean of the column (mean normalization) #2 Divide by the range of the column (feature scaling) } Our input is a 200 x 3 matrix containing TV, Radio, and Newspaper data. Our output is a normalized matrix of the same shape with all values between -1 and 1. def normalize ( features ): ** features - ( 200 , 3 ) features . T - ( 3 , 200 ) We transpose the input matrix , swapping cols and rows to make vector math easier ** for feature in features . T : fmean = np . mean ( feature ) frange = np . amax ( feature ) - np . amin ( feature ) #Vector Subtraction feature -= fmean #Vector Division feature /= frange return features Note Matrix math . Before we continue, it’s important to understand basic Linear Algebra concepts as well as numpy functions like numpy.dot() . Making predictions ¶ Our predict function outputs an estimate of sales given our current weights (coefficients) and a company’s TV, radio, and newspaper spend. Our model will try to identify weight values that most reduce our cost function. \[Sales = W_1 TV + W_2 Radio + W_3 Newspaper\] def predict ( features , weights ): ** features - ( 200 , 3 ) weights - ( 3 , 1 ) predictions - ( 200 , 1 ) ** predictions = np . dot ( features , weights ) return predictions Initialize weights ¶ W1 = 0.0 W2 = 0.0 W3 = 0.0 weights = np . array ([ [ W1 ], [ W2 ], [ W3 ] ]) Cost function ¶ Now we need a cost function to audit how our model is performing. The math is the same, except we swap the \(mx + b\) expression for \(W_1 x_1 + W_2 x_2 + W_3 x_3\) . We also divide the expression by 2 to make derivative calculations simpler. \[MSE = \frac{1}{2N} \sum_{i=1}^{n} (y_i - (W_1 x_1 + W_2 x_2 + W_3 x_3))^2\] def cost_function ( features , targets , weights ): ** features :( 200 , 3 ) targets : ( 200 , 1 ) weights :( 3 , 1 ) returns average squared error among predictions ** N = len ( targets ) predictions = predict ( features , weights ) # Matrix math lets use do this without looping sq_error = ( predictions - targets ) ** 2 # Return average squared error among predictions return 1.0 / ( 2 * N ) * sq_error . sum () Gradient descent ¶ Again using the Chain rule we can compute the gradient–a vector of partial derivatives describing the slope of the cost function for each weight. \[\begin{split}\begin{align} f'(W_1) = -x_1(y - (W_1 x_1 + W_2 x_2 + W_3 x_3)) \\ f'(W_2) = -x_2(y - (W_1 x_1 + W_2 x_2 + W_3 x_3)) \\ f'(W_3) = -x_3(y - (W_1 x_1 + W_2 x_2 + W_3 x_3)) \end{align}\end{split}\] def update_weights ( features , targets , weights , lr ): ''' Features:(200, 3) Targets: (200, 1) Weights:(3, 1) ''' predictions = predict ( features , weights ) #Extract our features x1 = features [:, 0 ] x2 = features [:, 1 ] x3 = features [:, 2 ] # Use dot product to calculate the derivative for each weight d_w1 = - x1 . dot ( targets - predictions ) d_w2 = - x2 . dot ( targets - predictions ) d_w2 = - x2 . dot ( targets - predictions ) # Multiply the mean derivative by the learning rate # and subtract from our weights (remember gradient points in direction of steepest ASCENT) weights [ 0 ][ 0 ] -= ( lr * np . mean ( d_w1 )) weights [ 1 ][ 0 ] -= ( lr * np . mean ( d_w2 )) weights [ 2 ][ 0 ] -= ( lr * np . mean ( d_w3 )) return weights And that’s it! Multivariate linear regression. Simplifying with matrices ¶ The gradient descent code above has a lot of duplication. Can we improve it somehow? One way to refactor would be to loop through our features and weights–allowing our function to handle any number of features. However there is another even better technique: vectorized gradient descent . Math We use the same formula as above, but instead of operating on a single feature at a time, we use matrix multiplication to operative on all features and weights simultaneously. We replace the \(x_i\) terms with a single feature matrix \(X\) . \[gradient = -X(targets - predictions)\] Code X = [ [ x1 , x2 , x3 ] [ x1 , x2 , x3 ] . . . [ x1 , x2 , x3 ] ] targets = [ [ 1 ], [ 2 ], [ 3 ] ] def update_weights_vectorized ( X , targets , weights , lr ): ** gradient = X . T * ( predictions - targets ) / N X : ( 200 , 3 ) Targets : ( 200 , 1 ) Weights : ( 3 , 1 ) ** companies = len ( X ) #1 - Get Predictions predictions = predict ( X , weights ) #2 - Calculate error/loss error = targets - predictions #3 Transpose features from (200, 3) to (3, 200) # So we can multiply w the (200,1) error matrix. # Returns a (3,1) matrix holding 3 partial derivatives -- # one for each feature -- representing the aggregate # slope of the cost function across all observations gradient = np . dot ( - X . T , error ) #4 Take the average error derivative for each feature gradient /= companies #5 - Multiply the gradient by our learning rate gradient *= lr #6 - Subtract from our weights to minimize cost weights -= gradient return weights Bias term ¶ Our train function is the same as for simple linear regression, however we’re going to make one final tweak before running: add a bias term to our feature matrix. In our example, it’s very unlikely that sales would be zero if companies stopped advertising. Possible reasons for this might include past advertising, existing customer relationships, retail locations, and salespeople. A bias term will help us capture this base case. Code Below we add a constant 1 to our features matrix. By setting this value to 1, it turns our bias term into a constant. bias = np . ones ( shape = ( len ( features ), 1 )) features = np . append ( bias , features , axis = 1 ) Model evaluation ¶ After training our model through 1000 iterations with a learning rate of .0005, we finally arrive at a set of weights we can use to make predictions: \[Sales = 4.7TV + 3.5Radio + .81Newspaper + 13.9\] Our MSE cost dropped from 110.86 to 6.25. References [1] https://en.wikipedia.org/wiki/Linear_regression [2] http://www.holehouse.org/mlclass/04_Linear_Regression_with_multiple_variables.html [3] http://machinelearningmastery.com/simple-linear-regression-tutorial-for-machine-learning [4] http://people.duke.edu/~rnau/regintro.htm [5] https://spin.atomicobject.com/2014/06/24/gradient-descent-linear-regression [6] https://www.analyticsvidhya.com/blog/2015/08/common-machine-learning-algorithms","[-1.30693823e-01 -1.51534259e-01 -4.75469902e-02  5.99568486e-01
  4.42763120e-01 -4.17307466e-02  1.91339523e-01 -2.04921216e-02
  4.20675933e-01  2.41772346e-02  4.84439135e-01 -3.66262794e-01
  1.06933966e-01  2.19857976e-01 -3.37217212e-01 -5.11436939e-01
 -1.08661026e-01 -2.39580080e-01  1.12368271e-01 -3.82247627e-01
 -9.56900939e-02 -1.34202272e-01 -6.65128469e-01 -6.28056109e-01
  7.08480403e-02 -1.08629139e-03  1.70943648e-01  4.94494587e-02
 -6.88391387e-01 -4.53295380e-01 -1.67705566e-01 -8.32486600e-02
 -3.40097785e-01  6.71903372e-01  3.09372991e-01 -2.08276764e-01
 -5.47041222e-02  2.46933818e-01  1.42211691e-01 -1.23289987e-01
  1.81234330e-02  2.37166226e-01  5.36153093e-02  2.97024310e-01
 -5.80573082e-02 -5.84167205e-02 -3.85896266e-01 -7.56704211e-02
  7.65646547e-02  4.05085534e-02  1.82450801e-01  2.76709080e-01
 -4.33058813e-02  6.33951128e-02  2.70241320e-01 -2.31330007e-01
 -1.48054481e-01 -3.60202938e-01 -6.01340570e-02 -2.54205644e-01
  3.63352120e-01 -1.39379323e-01  3.22612748e-02  4.72358346e-01
 -2.28384957e-01 -1.52166665e-01  2.94055223e-01  4.79910612e-01
  8.22590292e-02  2.14249671e-01 -2.25266650e-01 -4.53476787e-01
  5.76553524e-01 -2.02395290e-01  1.32135406e-01 -3.24042469e-01
 -1.93554804e-01 -6.42590970e-03 -7.20594376e-02  2.31141686e-01
  6.43818676e-02  2.41615981e-01  3.34039107e-02  4.18426991e-02
  3.60540152e-01  3.66649210e-01  1.21090949e-01 -2.53561080e-01
  1.69224180e-02  3.24119061e-01 -4.01509047e-01 -2.36495540e-01
  2.63107046e-02 -4.86896858e-02  4.66263629e-02 -1.54835686e-01
 -7.50764608e-02  1.17089309e-01 -1.24965169e-01 -1.93377942e-01
 -4.66091096e-01  4.72628400e-02  1.66177318e-01  1.38120472e-01
  2.62723744e-01  3.12896043e-01  2.16189146e-01 -2.09729746e-01
 -4.94575292e-01 -1.97319031e-01 -1.91942990e-01 -3.81160587e-01
 -2.08556145e-01 -1.58168688e-01 -1.72681391e-01 -6.34307027e-01
  2.60338634e-01  1.86770335e-01  2.11438119e-01  1.28278941e-01
 -2.40400538e-01  1.04315490e-01  9.59837809e-02  4.03590798e-01
 -7.02466488e-01 -8.49105194e-02  2.41951972e-01 -3.48572060e-02
  8.20866004e-02  3.41562688e-01  7.81774372e-02 -5.35769835e-02
 -4.15649563e-01 -1.02383745e+00 -1.24251306e-01  1.42697290e-01
  1.62619442e-01  9.70225334e-02 -4.24421951e-02  3.09410810e-01
 -7.77343214e-02 -2.10831046e-01 -2.67279744e-01 -3.21290135e-01
 -9.75246802e-02 -5.58899306e-02  1.31190762e-01  2.34227031e-01
 -4.78551388e-02 -1.54551014e-01  1.64960902e-02  1.99262500e-01
 -7.54015148e-03 -1.01304963e-01 -2.28058130e-01  7.20324367e-02
  3.18388879e-01 -5.39659679e-01  2.07508147e-01 -7.06364512e-01
  1.66156128e-01  9.81143892e-01 -3.11010256e-02  1.76859424e-02
 -4.21200134e-03 -1.28701523e-01 -1.00635085e-02  1.74770862e-01
 -1.79454416e-01  1.11932002e-01 -1.42149419e-01  4.91500944e-01
 -1.09966248e-01  5.93421143e-03 -2.22236067e-01  3.15835416e-01
 -1.51435047e-01  8.41601714e-02 -5.50009236e-02  4.66964580e-02
 -2.84506649e-01 -4.15159836e-02  2.80325949e-01 -1.00403026e-01
  4.97649014e-02  3.97548437e-01 -1.30403072e-01  4.31154490e-01
 -1.40579358e-01 -3.57591480e-01  2.93096870e-01  1.19702481e-01
 -1.28012732e-01  9.78599936e-02  1.77304059e-01 -1.38898373e-01
 -2.81274766e-02  2.71331638e-01  1.76287204e-01 -1.67059302e-01
 -9.66135412e-02 -5.91005906e-02 -1.31311148e-01  8.33604187e-02
 -2.39103824e-01 -3.74172568e-01 -6.24292374e-01 -8.91605392e-02
  3.44455600e-01 -2.26007000e-01 -9.27040055e-02  1.01288307e+00
 -2.16640711e-01  4.78111118e-01 -5.16741753e-01 -3.18295330e-01
  5.25200441e-02  1.87069446e-01 -1.19984776e-01 -2.68058062e-01
  3.42760272e-02 -5.98687008e-02  1.73926860e-01  1.58036590e-01
  4.89039660e-01 -6.89404070e-01  2.11041689e-01 -8.75838101e-03
 -2.22957283e-02 -2.23706737e-01  8.47490281e-02  4.93673474e-01
  2.90569782e-01  4.94119562e-02  1.31275713e-01 -2.64937937e-01
  5.58016449e-02 -1.57142490e-01 -2.97257900e-01 -2.46642418e-02
  2.18207628e-01 -1.24407135e-01 -4.93320078e-02 -1.01804562e-01
  1.22306302e-01  1.91762626e-01  2.97166169e-01 -6.74969316e-01
  2.79602483e-02 -3.15405220e-01  2.62269109e-01  7.31412545e-02
  1.73869461e-01  1.57778144e-01  8.39442432e-01 -2.50942826e-01
 -9.29416865e-02 -3.11439782e-01 -4.42356527e-01 -4.29065764e-01
 -2.23524898e-01 -3.28112245e-02  1.01152062e-01  5.60177743e-01
  1.01035446e-01  1.44264653e-01  5.14161810e-02 -1.74995691e-01
  1.86559975e-01 -5.34819029e-02 -6.42306209e-02  6.19420856e-02
  4.19367492e-01 -3.44980836e-01  5.81684969e-02  5.91509528e-02
  2.90523648e-01  3.09345638e-03  5.98998785e-01  2.83486694e-01
  2.27669775e-01  3.98601323e-01 -7.81563640e-01 -2.03407183e-03
  3.50898728e-02  2.20090315e-01 -5.62036932e-02 -6.36510670e-01
  3.40237208e-02 -4.61085886e-02  1.81383789e-01  6.25234470e-03
 -2.09919199e-01  4.10142392e-01 -2.19378129e-01  3.70163620e-01
  1.45790100e-01  1.89252943e-01  1.26234561e-01 -6.14774451e-02
 -8.49459022e-02 -1.63002282e-01  4.37660635e-01  2.38529325e-01
 -2.63863236e-01 -3.96968722e-02 -3.13328147e-01  1.90108806e-01
 -3.13451350e-01 -2.97791034e-01 -1.24563072e-02  4.37343195e-02
  4.38973814e-01 -2.72955298e-01  1.63658142e-01  7.18341097e-02
  2.29363859e-01  3.79830271e-01 -1.70937657e-01 -1.03479743e-01
  3.10206842e-02  2.20148172e-02  1.70365691e-01  1.51736408e-01
  3.96624476e-01 -2.92519748e-01 -1.75198153e-01 -5.46940923e-01
  2.61731148e-01 -1.88342720e-01  6.11110210e-01  1.86105922e-01
  4.04330641e-02 -2.14028239e-01 -3.46176960e-02 -3.00752282e-01
  2.09627539e-01 -4.11935113e-02 -3.79952520e-01  3.49615633e-01
  7.05304623e-01  7.61227682e-04 -3.01043421e-01  7.35945925e-02
 -1.67889446e-01  4.45917174e-02 -1.71119466e-01  2.45948046e-01
 -2.61992514e-02 -5.34258448e-02 -9.51531380e-02  7.53367543e-02
 -7.62119442e-02  2.05777094e-01 -2.32264042e-01  9.63345990e-02
 -3.53030443e-01  1.79641277e-01 -2.36780196e-01 -2.01240152e-01
  1.72630981e-01 -3.99685979e-01  2.69738972e-01  2.14083210e-01
  2.99421668e-01 -3.58229369e-01  9.75398198e-02  1.63899899e-01
 -1.72918856e-01 -2.92584717e-01  3.91478300e-01 -2.72669476e-02
  1.92823440e-01 -7.35266089e-01  2.84219265e-01  5.05437478e-02
  5.46850324e-01 -2.41156891e-01  3.35087776e-01  2.13847801e-01
 -2.23902121e-01  3.90518248e-01 -2.52388448e-01 -2.19984740e-01
 -2.95386672e-01 -3.68037149e-02  2.84454048e-01  2.89514691e-01
  1.94881186e-01 -4.32421640e-02 -1.47614911e-01  1.03285894e-01
 -1.15444094e-01 -1.78606838e-01 -7.43332133e-02  2.03271449e-01
 -1.12434611e-01 -4.67801034e-01 -1.37912989e-01  1.77724481e-01
 -1.79350048e-01 -1.82486296e-01  3.60417575e-01  1.21394828e-01
  1.82527035e-01  1.75882518e-01  5.42233884e-01 -4.82490361e-02
  3.22865784e-01  7.02691525e-02 -3.38493943e-01  1.70607254e-01
 -6.46706969e-02 -1.01156771e-01  3.21788788e-01  8.57171714e-02
 -2.78533131e-01  3.61074984e-01 -8.35613161e-02 -2.45434210e-01
  6.07542321e-02 -2.72481322e-01  1.61117837e-02 -5.91081232e-02
 -5.63528538e-01  2.32100576e-01  5.55755198e-03  4.39939499e-01
 -1.36151284e-01 -1.29732918e-02 -1.65797681e-01 -3.04426942e-02
  5.21634698e-01 -1.37784421e-01 -4.73678783e-02  3.73022668e-02
  1.06465414e-01  7.45494217e-02  4.44079451e-02 -3.17799151e-02
  2.12040171e-02  9.67052206e-02 -2.27537841e-01 -1.36337042e-01
  9.57599133e-02 -1.15295038e-01 -1.59345239e-01  1.89292923e-01
  1.95482582e-01  1.97368234e-01 -1.95545703e-01 -2.85132349e-01
  1.98570907e-01  1.20258987e-01 -3.71129721e-01 -3.56692933e-02
 -3.04204226e-02  3.57758999e-01 -3.55228424e-01  5.80493286e-02
  2.57472545e-02 -1.57486983e-02 -2.98533291e-01  1.42783478e-01
 -4.71846133e-01  6.29337311e-01  1.66051656e-01  4.45076585e-01
 -5.68550348e-01  3.54165696e-02 -2.11210236e-01 -2.81386435e-01
  9.51364934e-02 -4.35820371e-02  4.95173968e-03  1.68102697e-01
 -5.07565141e-01 -4.32638586e-01 -1.14377156e-01 -2.49431953e-02
  9.20399129e-02  4.91235033e-02 -2.11614639e-01 -1.47305086e-01
 -1.43032625e-01  1.73575073e-01  2.70752132e-01  1.62324369e-01
 -5.53659946e-02 -8.01200718e-02  8.96494389e-02  2.27938250e-01
 -4.62158620e-01  2.31968790e-01  7.00096905e-01  2.82659262e-01
 -5.75060248e-01  1.96669906e-01  6.63980655e-03 -3.78732756e-03
 -4.95009944e-02 -6.91987127e-02  1.36085719e-01 -1.00201271e-01
 -6.30376041e-02  1.02299705e-01 -1.95212677e-01  2.18747571e-01
  3.52751821e-01 -1.02714561e-01 -7.14964196e-02  2.13519856e-01
  5.19285277e-02 -6.20612130e-02  7.25028068e-02  3.34483624e-01
  3.60577703e-01  4.09631431e-02  4.81169298e-02  1.69322670e-01
 -1.29052162e-01 -1.11090444e-01  1.12238109e-01  3.34911108e-01
  1.47330463e-01 -4.52685282e-02  3.71349454e-01  1.06735773e-01
  9.84958410e-02 -4.77849841e-02 -3.37665796e-01 -1.51645467e-01
  1.11159898e-01 -1.09499656e-01  2.94124126e-01  1.18978508e-01
  4.09987330e-01 -1.54943556e-01  1.62630435e-02 -1.26758114e-01
  7.15694308e-01  3.86987850e-02  2.76673675e-01 -1.48358300e-01
 -1.79423660e-01 -1.10793039e-01 -2.14798510e-01  1.96998924e-01
  2.25706145e-01  2.93499768e-01 -2.81395793e-01  6.73140645e-01
 -2.23183203e-02 -3.51847038e-02  9.19065103e-02  1.23520046e-01
 -2.63465881e-01  2.64998283e-02 -6.85106777e-03  1.77132979e-01
 -6.15506992e-02  3.21304440e-01  1.12819947e-01 -1.25084668e-01
 -2.01192558e-01 -1.68221667e-02 -1.75491758e-02 -2.86473602e-01
  1.35194987e-01  4.23310846e-01 -3.53301644e-01  3.41130137e-01
 -3.93503308e-01 -1.48326337e-01 -1.76102016e-02 -3.02513093e-02
  2.90301442e-01  6.24249816e-01 -2.63306737e-01 -1.92081898e-01
  2.66945828e-02  9.90244970e-02 -4.66678813e-02 -4.44986671e-01
  1.94967538e-02  2.11172551e-01 -4.15964365e-01  1.77023381e-01
 -2.04144269e-02  1.59263968e-01  9.78144705e-02  1.40933260e-01
 -1.54636532e-01 -6.99072927e-02  4.04169876e-03  2.37267420e-01
  6.64357096e-02 -3.54959667e-01  4.37846482e-01 -5.71016483e-02
  3.08626652e-01 -3.03956233e-02 -1.10806480e-01 -1.39037833e-01
 -8.33831668e-01 -8.91912207e-02 -2.57847369e-01 -1.05606690e-01
 -1.41902030e-01 -1.69122040e-01  4.79934886e-02  1.83337897e-01
 -7.82517865e-02 -1.02950945e-01 -2.73015164e-03 -1.95604682e-01
 -8.22337344e-02 -3.80371690e-01 -4.84974325e-01 -1.17676087e-01
  2.84720868e-01  4.65837158e-02  7.69139230e-02  8.51949155e-02
  3.27474117e-01  3.28699872e-02  1.87755644e-01  5.52091360e-01
 -1.09649107e-01 -3.01884443e-01 -7.17543215e-02 -2.24803329e-01
  1.24017056e-03 -4.63715017e-01 -4.62117106e-01  1.83930397e-01
  4.38356608e-01  3.36075455e-01  1.68061256e-01  8.56801569e-02
  3.77497852e-01  9.47806053e-03  5.15574887e-02 -2.62826174e-01
  1.02576613e-01  1.76600814e-01  1.88048974e-01  1.30229443e-01
 -1.78204894e-01  1.42297029e-01  1.28116801e-01 -5.25709271e-01
  3.34262013e-01 -4.41671193e-01 -2.41440341e-01 -8.68637040e-02
 -4.00867552e-01 -7.21767843e-02  9.98571441e-02  1.48632288e-01
  3.32084805e-01  4.89321142e-01  4.81483877e-01  1.07249141e-01
  5.12868166e-01  6.49812818e-02  1.42003939e-01 -2.61946797e-01
  1.12089619e-01  2.43455246e-02 -2.56349325e-01  4.01466727e-01
 -3.04894865e-01  2.51709342e-01 -2.62106508e-02  1.17547072e-01
  4.13908839e-01  1.64994434e-01 -3.16645324e-01 -1.58715338e-01
  1.37548208e-01  2.61376113e-01  1.97207347e-01  1.46824121e-01
  2.08423913e-01  2.86247045e-01  1.67817354e-01 -3.04834604e-01
  8.78765136e-02 -3.09356809e-01  6.91868216e-02  1.98934138e-01
 -5.68541400e-02  1.50118411e-01  2.24671572e-01 -2.43834019e-01
 -2.35965159e-02 -1.44883096e-01 -2.50372767e-01 -4.96141255e-01
 -3.66564766e-02  1.69992656e-01  3.65063250e-01 -1.62169319e-02
  1.22086167e-01 -7.43738040e-02  2.15384126e-01  2.85099819e-02
 -1.51210457e-01 -1.06105782e-01 -6.95686638e-02  7.99566880e-02
 -7.07665458e-04  5.88461831e-02  1.49115473e-01 -4.52924222e-02
 -9.40018371e-02  3.90928626e-01  2.59049863e-01  8.05334672e-02
  2.27478638e-01  4.34631854e-02  1.57887056e-01 -6.65051937e-02
  2.60716051e-01  2.46618971e-01  2.15683490e-01  1.68070242e-01
  4.39608157e-01 -1.79247588e-01  5.87247238e-02  4.77656484e-01
 -1.50624290e-02  4.01813626e-01 -2.59889126e-01  5.38220584e-01
  9.64578837e-02 -3.54376316e-01 -3.55124533e-01 -1.92617267e-01
 -4.14628163e-02 -3.19458067e-01  1.79993257e-01 -4.41835105e-01
  1.61011010e-01  3.62711191e-01 -1.91534758e-01 -2.68539518e-01
 -8.52992535e-01 -1.70117378e-01  2.64198363e-01  3.65706272e-02
 -4.22389656e-01 -1.08414814e-01 -1.33499969e-02 -1.99263230e-01
  6.65339231e-01 -4.09630537e-02  1.90978944e-01  1.88076839e-01
  3.34827572e-01  1.67661607e-01  4.02223319e-03 -7.69122764e-02
  6.99650705e-01  2.19860703e-01  3.69604886e-01  2.77104586e-01]"
Gradient Descent,"Gradient Descent ¶ Gradient descent is an optimization algorithm used to minimize some function by iteratively moving in the direction of steepest descent as defined by the negative of the gradient. In machine learning, we use gradient descent to update the parameters of our model. Parameters refer to coefficients in Linear Regression and weights in neural networks. Introduction ¶ Consider the 3-dimensional graph below in the context of a cost function. Our goal is to move from the mountain in the top right corner (high cost) to the dark blue sea in the bottom left (low cost). The arrows represent the direction of steepest descent (negative gradient) from any given point–the direction that decreases the cost function as quickly as possible. Source Starting at the top of the mountain, we take our first step downhill in the direction specified by the negative gradient. Next we recalculate the negative gradient (passing in the coordinates of our new point) and take another step in the direction it specifies. We continue this process iteratively until we get to the bottom of our graph, or to a point where we can no longer move downhill–a local minimum. image source . Learning rate ¶ The size of these steps is called the learning rate . With a high learning rate we can cover more ground each step, but we risk overshooting the lowest point since the slope of the hill is constantly changing. With a very low learning rate, we can confidently move in the direction of the negative gradient since we are recalculating it so frequently. A low learning rate is more precise, but calculating the gradient is time-consuming, so it will take us a very long time to get to the bottom. Cost function ¶ A Loss Functions tells us “how good” our model is at making predictions for a given set of parameters. The cost function has its own curve and its own gradients. The slope of this curve tells us how to update our parameters to make the model more accurate. Step-by-step ¶ Now let’s run gradient descent using our new cost function. There are two parameters in our cost function we can control: \(m\) (weight) and \(b\) (bias). Since we need to consider the impact each one has on the final prediction, we need to use partial derivatives. We calculate the partial derivatives of the cost function with respect to each parameter and store the results in a gradient. Math Given the cost function: \[f(m,b) = \frac{1}{N} \sum_{i=1}^{N} (y_i - (mx_i + b))^2\] The gradient can be calculated as: \[\begin{split}f'(m,b) = \begin{bmatrix} \frac{df}{dm}\\ \frac{df}{db}\\ \end{bmatrix} = \begin{bmatrix} \frac{1}{N} \sum -2x_i(y_i - (mx_i + b)) \\ \frac{1}{N} \sum -2(y_i - (mx_i + b)) \\ \end{bmatrix}\end{split}\] To solve for the gradient, we iterate through our data points using our new \(m\) and \(b\) values and compute the partial derivatives. This new gradient tells us the slope of our cost function at our current position (current parameter values) and the direction we should move to update our parameters. The size of our update is controlled by the learning rate. Code def update_weights ( m , b , X , Y , learning_rate ): m_deriv = 0 b_deriv = 0 N = len ( X ) for i in range ( N ): # Calculate partial derivatives # -2x(y - (mx + b)) m_deriv += - 2 * X [ i ] * ( Y [ i ] - ( m * X [ i ] + b )) # -2(y - (mx + b)) b_deriv += - 2 * ( Y [ i ] - ( m * X [ i ] + b )) # We subtract because the derivatives point in direction of steepest ascent m -= ( m_deriv / float ( N )) * learning_rate b -= ( b_deriv / float ( N )) * learning_rate return m , b References [1] http://ruder.io/optimizing-gradient-descent","[ 2.69496322e-01 -5.02407588e-02 -2.92841733e-01  5.26227236e-01
  4.02265608e-01  1.31734118e-01  1.50370330e-01  2.87902892e-01
  3.31729710e-01 -7.52141140e-03  5.34028828e-01 -8.03520441e-01
  1.61302522e-01 -2.58698851e-01 -1.92011759e-01  9.58717763e-02
 -9.38118100e-02 -4.24682200e-01  1.43099949e-01 -1.38898745e-01
 -1.37342319e-01  1.08865887e-01 -5.13001740e-01 -4.98395801e-01
 -3.25345457e-01  7.84206092e-02  2.45700628e-01  2.49312237e-01
 -5.06347418e-01  9.20509100e-02 -2.91608691e-01  1.43691584e-01
 -9.27039012e-02  4.61364567e-01 -5.06863259e-02 -1.37139916e-01
 -7.83014745e-02  3.59215885e-01 -5.62180877e-01  5.75235039e-02
  8.06129351e-02  5.02914310e-01 -9.49476212e-02  5.11174679e-01
 -1.18431598e-01  1.17878862e-01 -3.56286794e-01 -3.23670596e-01
  3.25378239e-01  2.28021622e-01  2.88030028e-01  2.48177469e-01
 -1.11367941e-01  2.55461872e-01  1.26153126e-01 -1.83187887e-01
 -1.09038800e-02  2.77925462e-01  5.27127497e-02 -2.41760463e-01
 -3.48031431e-01  8.01002532e-02  1.28630549e-01  3.14165242e-02
 -3.88008133e-02 -2.35576674e-01  1.88944966e-01 -1.96160376e-03
  1.38563186e-01  1.37948692e-01 -2.50650316e-01 -6.95440054e-01
  1.75131261e-01 -1.42389923e-01  8.53524879e-02 -5.26582479e-01
 -1.17501453e-01  2.92752862e-01  4.80719134e-02  1.79034680e-01
  2.54100133e-02  1.50126845e-01 -7.56268203e-02 -9.34816748e-02
  1.13135837e-01  2.96029150e-01  2.20966116e-01 -1.51133522e-01
  2.41046064e-02  1.69005096e-01 -7.90535927e-01  4.59309295e-02
 -2.33653523e-02  1.93343610e-01 -2.80676365e-01 -3.64849448e-01
 -2.37999111e-01 -4.21062648e-01 -9.20444727e-04 -6.50453866e-02
  1.79903150e-01 -1.52074486e-01  2.16072977e-01  2.18333647e-01
  1.42978147e-01  2.16906697e-01  2.24162847e-01 -1.16711028e-01
 -3.89881134e-01 -3.53699982e-01 -1.52852863e-01 -2.41389871e-01
 -9.49736089e-02  1.63562059e-01 -1.32641986e-01 -1.58147603e-01
  4.57559049e-01  4.91133481e-02 -7.13520870e-03 -2.61443973e-01
 -2.73739964e-01  3.10263455e-01  5.97989798e-01  6.09666705e-01
 -3.18868339e-01 -3.14756513e-01  4.77742739e-02  1.24262124e-01
 -4.85557243e-02  2.18183801e-01 -2.32073992e-01  2.18283106e-02
 -4.68601845e-02 -7.55627632e-01  4.95360047e-02  1.86829805e-01
 -8.94481391e-02  9.37604830e-02  9.34690461e-02  1.64405093e-01
  1.37236133e-01 -4.92890701e-02 -3.97814251e-03 -1.87942218e-02
  4.38628420e-02  5.51760457e-02  3.04999668e-02  7.19913691e-02
 -2.28215158e-02 -2.08989218e-01  1.57272220e-01 -1.51149407e-01
 -5.66200577e-02 -3.11737478e-01  1.10276558e-01  4.05613333e-03
  3.34878713e-01  2.91767299e-01  3.70483100e-01 -4.27508593e-01
 -1.04436457e-01  8.49071383e-01  4.66946280e-03 -8.52601379e-02
  3.21037054e-01 -1.05884656e-01 -1.08081482e-01  2.42236108e-01
 -3.51335555e-01  1.80037677e-01 -1.97680309e-01  6.72357798e-01
 -3.51953775e-01  3.13977972e-02 -4.09876108e-01  5.81283808e-01
 -4.33415696e-02 -2.33999580e-01 -8.91479626e-02  5.18732071e-02
 -3.15404147e-01 -1.31940916e-02  2.99070150e-01 -3.14124882e-01
  2.68334985e-01  1.36433179e-02  1.83563486e-01  3.52915376e-01
  2.32467681e-01 -1.80242807e-01  2.21461713e-01  2.56162018e-01
 -1.00302070e-01  1.48345947e-01  1.22116402e-01 -6.42746568e-01
  1.85764998e-01  4.34130430e-02 -9.85452086e-02 -2.78231204e-01
  1.51743189e-01 -3.07895690e-01  5.40019393e-01 -1.68618411e-01
  1.68744251e-01 -2.67498851e-01 -3.82173002e-01  2.42111355e-01
  1.01253614e-01 -4.64432597e-01 -2.07527876e-02  3.14753264e-01
 -1.79570735e-01  1.93884566e-01 -3.25800717e-01  1.15151584e-01
  7.85662904e-02  4.36772496e-01 -4.43620414e-01 -4.16149408e-01
  6.38331398e-02 -1.09605186e-01  1.84858769e-01  1.55522734e-01
  1.57109827e-01 -2.23900095e-01 -1.03092968e-01 -4.21110950e-02
 -2.39767917e-02  1.20223634e-01  1.03045434e-01  3.34350884e-01
  1.32818539e-02 -3.66657227e-02  9.11692455e-02  2.78250515e-01
  1.79845795e-01 -6.07708767e-02 -2.47018300e-02  1.31873816e-01
 -2.05362633e-01 -2.01391578e-01  3.60672176e-02  1.27069175e-01
  3.09853852e-01  6.36499166e-01 -8.49404559e-03 -1.68733269e-01
 -1.09646395e-01 -2.71365523e-01  2.10299119e-01 -2.02712804e-01
  1.41951609e-02 -2.12871283e-01  3.83822054e-01 -1.65943831e-01
 -3.42501998e-01 -2.83733994e-01 -3.98490727e-01  3.51231933e-01
  1.66562386e-02 -2.77439535e-01  4.06006910e-02  1.88706443e-01
  5.72503582e-02  2.82744288e-01 -1.42023742e-01 -7.55357593e-02
 -7.99974352e-02 -1.14281811e-02  1.68487310e-01 -2.60184463e-02
 -3.86162959e-02 -4.15064394e-01 -1.29960567e-01  2.17806041e-01
  2.36082539e-01  1.98875710e-01  2.57282317e-01  2.45904535e-01
 -1.03901904e-02  2.25727051e-01  2.01733723e-01 -1.50078714e-01
  2.15264559e-01 -1.76042356e-02  1.47313103e-02 -1.31184697e-01
  1.49514645e-01  3.46195817e-01 -1.42493909e-02 -2.34188408e-01
 -2.20252290e-01  1.86364025e-01 -2.51854390e-01 -4.36073095e-02
  1.98315114e-01 -1.04270637e-01 -5.02602383e-03 -6.28460869e-02
  1.55436426e-01 -2.66772151e-01  2.43875518e-01  3.49395245e-01
 -2.35176921e-01 -1.11655384e-01 -1.76596656e-01  3.13427180e-01
 -1.73887700e-01 -1.88875228e-01 -2.42742911e-01 -8.12597387e-03
  3.74785423e-01 -2.63580680e-02 -2.24945337e-01  3.23037863e-01
  1.38629287e-01  3.10240537e-01 -1.85878035e-02  6.28846139e-02
  6.37095496e-02 -2.22810060e-01  9.74379182e-02  1.35825410e-01
  6.53073549e-01 -9.38736945e-02 -5.86780384e-02 -6.77771330e-01
  6.31432533e-01 -9.71807763e-02  2.69524246e-01  6.70661107e-02
 -9.33590233e-02  3.55025709e-01  4.97030020e-02 -1.58914030e-01
  1.66834176e-01 -1.70601785e-01 -1.92201674e-01  2.63208210e-01
  5.17976344e-01  3.28600377e-01  2.50168517e-02  8.04830492e-02
 -1.93568021e-01  8.32293555e-02 -1.36456966e-01  9.26986560e-02
  3.92149210e-01 -2.88022161e-01 -1.68500721e-01 -2.48590857e-02
 -2.89264858e-01  1.71171844e-01 -1.13528818e-01 -5.63683175e-02
 -4.13444132e-01 -8.82626027e-02  2.66002119e-02  3.04155171e-01
  1.05019391e-01  4.34475765e-03  1.82618052e-01  5.76494575e-01
  1.16715804e-01 -6.51564971e-02  4.75917935e-01  1.39179587e-01
 -2.00258419e-01 -2.81003922e-01  1.90313965e-01  9.86592248e-02
  1.47213697e-01 -7.08927393e-01  4.48453426e-01 -4.61261719e-04
  2.41621763e-01 -3.70978177e-01  2.43267506e-01  1.13444410e-01
 -1.68442830e-01  2.62966573e-01 -2.51247019e-01 -2.19579637e-01
 -3.18835497e-01  4.16649938e-01  2.25253195e-01  2.38779306e-01
  2.81768084e-01  1.41909227e-01 -1.44841164e-01  1.54278845e-01
 -1.34716153e-01 -5.23083359e-02 -1.53657228e-01  6.26120046e-02
 -2.22341284e-01 -7.01121569e-01 -2.89503127e-01  2.45512158e-01
  3.92126262e-01 -2.07547516e-01  3.28935146e-01  2.99071848e-01
 -1.91066787e-01 -2.07928255e-01  2.14097232e-01  1.98544890e-01
  4.55860674e-01 -2.57956415e-01 -2.84032337e-02  5.26683666e-02
 -1.48148388e-02 -1.56205054e-03  1.88938767e-01 -4.23769131e-02
 -1.40484214e-01  3.47649634e-01  2.26368934e-01 -1.50926903e-01
  9.25589651e-02 -2.03332931e-01 -4.96100150e-02 -1.15825757e-01
  3.27938318e-01  2.54850328e-01 -3.21624875e-01  3.91482413e-01
 -2.29127020e-01 -4.79167104e-02 -3.42978477e-01  5.21986634e-02
  2.04191983e-01 -2.84178257e-01  3.93434763e-02  2.19161749e-01
  2.75932968e-01 -1.71389043e-01 -2.25646421e-03 -1.98650286e-01
  2.34746888e-01  2.16934174e-01  5.70376702e-02 -2.39667892e-01
  7.58509524e-03  2.18184385e-02 -2.25060191e-02  7.03724176e-02
  7.84405172e-02  5.78607142e-01 -1.06707864e-01 -1.02002621e-01
  4.18703616e-01  4.02780414e-01 -4.22991037e-01 -2.68719494e-01
 -1.90056294e-01  6.83210343e-02 -3.85253042e-01  2.38511667e-01
  7.78592452e-02  3.82577419e-01 -1.94369435e-01 -1.41570866e-01
 -2.62886882e-01  2.56703556e-01  1.83992490e-01  2.83459015e-02
 -2.29631305e-01 -3.95828038e-02 -3.31758946e-01 -9.11688060e-03
 -8.35933387e-02  1.90391600e-01  1.23446211e-01 -8.15467238e-02
 -4.60843407e-02 -3.73164535e-01  6.80722296e-02 -1.67653739e-01
  6.37351051e-02 -3.24601419e-02 -1.86829954e-01 -5.11541292e-02
  4.31280583e-02  2.03232110e-01 -2.30042432e-02  1.48780048e-01
 -6.12885728e-02  4.29956317e-02 -7.17666224e-02  1.06275529e-01
 -1.10981755e-01  1.70446098e-01  7.30761439e-02  1.62301920e-02
 -3.50302458e-01  1.49573505e-01 -3.95261526e-01  4.61047515e-02
 -2.23373808e-03 -6.02059066e-02  1.52956039e-01 -1.62415981e-01
  3.86716425e-02  1.88814402e-01 -4.29665148e-01  8.95637721e-02
  2.28217050e-01  4.62604053e-02 -1.45561874e-01  7.97562450e-02
  4.52153683e-02  2.40286440e-03  1.64096266e-01  3.80150825e-02
  3.18862319e-01 -2.28772745e-01  1.17190242e-01 -1.82805136e-01
 -2.27413192e-01  1.05259567e-01 -2.84355521e-01  3.57195497e-01
 -9.84145626e-02 -5.34143262e-02  2.64928162e-01  1.65251285e-01
  1.48872405e-01 -5.52621067e-01 -2.01059639e-01  5.80401942e-02
  2.22521573e-01 -1.56289697e-01  1.41523451e-01 -2.68665142e-02
  2.92754434e-02 -6.17350638e-02 -1.47337347e-01 -3.60408843e-01
  2.23650455e-01  3.10761444e-02  3.98647845e-01 -1.89157605e-01
 -9.16966796e-03 -7.05015063e-02 -3.67505312e-01  6.58502504e-02
  1.19127989e-01  3.66947532e-01 -3.20472002e-01  3.26975942e-01
 -2.30429731e-02 -2.09922284e-01  3.74915510e-01  2.51342207e-01
 -2.31547713e-01 -6.68775588e-02  1.35181278e-01  6.10445499e-01
 -1.46981701e-02  2.17516109e-01 -1.87157080e-01  2.32884791e-02
 -8.01017404e-01 -9.70889032e-02 -1.66997522e-01 -1.77659858e-02
  1.61817878e-01  1.89301491e-01  2.91710049e-01 -3.09679098e-02
 -3.91249776e-01 -5.15124321e-01 -3.47969890e-01 -2.40901820e-02
  8.85626897e-02 -1.53142989e-01 -2.06826344e-01 -2.18615830e-01
  2.06899166e-01 -2.80955434e-02  2.35089689e-01 -2.77916849e-01
  4.50681835e-01  1.15000285e-01  1.13225460e-01  2.57162154e-01
 -7.46691003e-02 -3.25918734e-01 -9.84368473e-02  4.30018872e-01
 -2.58787684e-02 -3.31029475e-01  1.65652186e-02  3.00062448e-01
  1.11872867e-01 -3.86930369e-02  1.23921789e-01 -6.22835234e-02
  5.24959087e-01 -1.10972971e-01 -5.75026013e-02  2.43698806e-02
 -5.14678895e-01 -6.47377819e-02 -4.31831539e-01  1.23679332e-01
 -1.51119620e-01 -6.98744059e-02 -3.17492243e-03  5.56955338e-01
 -2.30844796e-01 -1.69039279e-01 -4.88671176e-02 -1.17336318e-01
 -1.35520190e-01  1.53707340e-04 -2.97266841e-01  3.96694183e-01
  2.42931366e-01  2.37100534e-02 -1.75177813e-01 -1.03439845e-01
  1.43963337e-01  4.19292785e-02 -2.61603277e-02  2.22973242e-01
 -9.08003747e-02 -2.63191760e-01  5.48198819e-02  2.23756805e-02
  3.04942548e-01 -2.86337614e-01 -1.75721064e-01  1.55155033e-01
  4.99913901e-01  1.51676118e-01  2.42451400e-01  2.51491010e-01
  1.85505360e-01 -2.24023014e-01 -2.45621875e-02 -2.39462584e-01
  2.76131213e-01  3.99820656e-01  5.09663951e-03 -1.60961971e-02
  3.88813093e-02  2.50224546e-02  1.05550826e-01 -5.22505939e-02
  9.34499949e-02 -2.83962991e-02  1.05873004e-01 -3.61195862e-01
 -2.84523144e-02 -3.06360483e-01 -2.61508763e-01  1.67222321e-01
  1.44019514e-01  1.94903418e-01  1.43721312e-01  7.61994064e-01
  3.65893751e-01  3.41619402e-02 -8.55984539e-03  1.20158512e-02
  7.36824721e-02  1.58373833e-01 -4.32686538e-01  2.45510995e-01
  1.66155070e-01  2.64712304e-01 -6.44071177e-02  2.91078627e-01
  2.70567417e-01  3.41699541e-01 -1.27197996e-01  2.38560691e-01
 -2.71106251e-02  1.65851980e-01  5.24000525e-01  2.34269321e-01
  2.65335470e-01 -3.36149931e-01  4.33440953e-01 -2.90010750e-01
  1.42630816e-01 -3.98343235e-01  1.88983545e-01 -6.58042729e-02
  2.84050047e-01  3.97789478e-03  3.71399313e-01 -1.72351494e-01
  6.16639405e-02  2.53951382e-02 -4.71392348e-02 -8.97068262e-01
 -1.55960605e-01  3.53624493e-01  1.00786336e-01 -1.89967334e-01
  6.59432337e-02 -2.09171936e-01 -4.75488231e-02  1.17888182e-01
  2.91405395e-02 -1.04979068e-01  8.87624174e-02  2.26318449e-01
  1.51060775e-01 -9.18713585e-02  5.42844906e-02  2.51597054e-02
 -5.99822290e-02  1.14484400e-01  7.28534222e-01  1.56934977e-01
 -1.86377048e-01 -1.22187570e-01  3.20435315e-02  1.20059505e-01
  1.70248404e-01 -1.41890749e-01 -1.53343379e-01  3.45048130e-01
 -8.07989389e-02 -4.34145391e-01  1.26970876e-02  2.52328515e-01
  1.43071294e-01 -3.96924973e-01  8.27975757e-03  3.18592727e-01
  2.63888001e-01  1.64720356e-01 -2.52973080e-01 -4.07519750e-02
  7.07460493e-02 -2.43290663e-01  4.64272141e-01 -1.37094796e-01
  2.66330361e-01  4.66720015e-01 -1.21840999e-01 -1.32327471e-02
 -6.00979209e-01 -1.21281475e-01 -1.45746261e-01  4.14912343e-01
 -3.78349543e-01 -1.58268571e-01  2.88713053e-02 -2.35373795e-01
  2.58374512e-01  1.97149590e-01  6.64721429e-01  2.32075721e-01
  3.42869908e-01  7.21114129e-02  1.03474781e-01 -2.25987017e-01
  4.31254476e-01  4.84683692e-01  3.09984803e-01  2.46430725e-01]"
Logistic Regression,"Logistic Regression ¶ Introduction Comparison to linear regression Types of logistic regression Binary logistic regression Sigmoid activation Decision boundary Making predictions Cost function Gradient descent Mapping probabilities to classes Training Model evaluation Multiclass logistic regression Procedure Softmax activation Scikit-Learn example Introduction ¶ Logistic regression is a classification algorithm used to assign observations to a discrete set of classes. Unlike linear regression which outputs continuous number values, logistic regression transforms its output using the logistic sigmoid function to return a probability value which can then be mapped to two or more discrete classes. Comparison to linear regression ¶ Given data on time spent studying and exam scores. Linear Regression and logistic regression can predict different things: Linear Regression could help us predict the student’s test score on a scale of 0 - 100. Linear regression predictions are continuous (numbers in a range). Logistic Regression could help use predict whether the student passed or failed. Logistic regression predictions are discrete (only specific values or categories are allowed). We can also view probability scores underlying the model’s classifications. Types of logistic regression ¶ Binary (Pass/Fail) Multi (Cats, Dogs, Sheep) Ordinal (Low, Medium, High) Binary logistic regression ¶ Say we’re given data on student exam results and our goal is to predict whether a student will pass or fail based on number of hours slept and hours spent studying. We have two features (hours slept, hours studied) and two classes: passed (1) and failed (0). Studied Slept Passed 4.85 9.63 1 8.62 3.23 0 5.43 8.23 1 9.21 6.34 0 Graphically we could represent our data with a scatter plot. Sigmoid activation ¶ In order to map predicted values to probabilities, we use the sigmoid function. The function maps any real value into another value between 0 and 1. In machine learning, we use sigmoid to map predictions to probabilities. Math \[S(z) = \frac{1} {1 + e^{-z}}\] Note \(s(z)\) = output between 0 and 1 (probability estimate) \(z\) = input to the function (your algorithm’s prediction e.g. mx + b) \(e\) = base of natural log Graph Code def sigmoid ( z ): return 1.0 / ( 1 + np . exp ( - z )) Decision boundary ¶ Our current prediction function returns a probability score between 0 and 1. In order to map this to a discrete class (true/false, cat/dog), we select a threshold value or tipping point above which we will classify values into class 1 and below which we classify values into class 2. \[\begin{split}p \geq 0.5, class=1 \\ p < 0.5, class=0\end{split}\] For example, if our threshold was .5 and our prediction function returned .7, we would classify this observation as positive. If our prediction was .2 we would classify the observation as negative. For logistic regression with multiple classes we could select the class with the highest predicted probability. Making predictions ¶ Using our knowledge of sigmoid functions and decision boundaries, we can now write a prediction function. A prediction function in logistic regression returns the probability of our observation being positive, True, or “Yes”. We call this class 1 and its notation is \(P(class=1)\) . As the probability gets closer to 1, our model is more confident that the observation is in class 1. Math Let’s use the same multiple linear regression equation from our linear regression tutorial. \[z = W_0 + W_1 Studied + W_2 Slept\] This time however we will transform the output using the sigmoid function to return a probability value between 0 and 1. \[P(class=1) = \frac{1} {1 + e^{-z}}\] If the model returns .4 it believes there is only a 40% chance of passing. If our decision boundary was .5, we would categorize this observation as “Fail.”” Code We wrap the sigmoid function over the same prediction function we used in multiple linear regression def predict ( features , weights ): ''' Returns 1D array of probabilities that the class label == 1 ''' z = np . dot ( features , weights ) return sigmoid ( z ) Cost function ¶ Unfortunately we can’t (or at least shouldn’t) use the same cost function MSE (L2) as we did for linear regression. Why? There is a great math explanation in chapter 3 of Michael Neilson’s deep learning book [5] , but for now I’ll simply say it’s because our prediction function is non-linear (due to sigmoid transform). Squaring this prediction as we do in MSE results in a non-convex function with many local minimums. If our cost function has many local minimums, gradient descent may not find the optimal global minimum. Math Instead of Mean Squared Error, we use a cost function called Cross-Entropy , also known as Log Loss. Cross-entropy loss can be divided into two separate cost functions: one for \(y=1\) and one for \(y=0\) . The benefits of taking the logarithm reveal themselves when you look at the cost function graphs for y=1 and y=0. These smooth monotonic functions [7] (always increasing or always decreasing) make it easy to calculate the gradient and minimize cost. Image from Andrew Ng’s slides on logistic regression [1] . The key thing to note is the cost function penalizes confident and wrong predictions more than it rewards confident and right predictions! The corollary is increasing prediction accuracy (closer to 0 or 1) has diminishing returns on reducing cost due to the logistic nature of our cost function. Above functions compressed into one Multiplying by \(y\) and \((1-y)\) in the above equation is a sneaky trick that let’s us use the same equation to solve for both y=1 and y=0 cases. If y=0, the first side cancels out. If y=1, the second side cancels out. In both cases we only perform the operation we need to perform. Vectorized cost function Code def cost_function ( features , labels , weights ): ''' Using Mean Absolute Error Features:(100,3) Labels: (100,1) Weights:(3,1) Returns 1D matrix of predictions Cost = (labels*log(predictions) + (1-labels)*log(1-predictions) ) / len(labels) ''' observations = len ( labels ) predictions = predict ( features , weights ) #Take the error when label=1 class1_cost = - labels * np . log ( predictions ) #Take the error when label=0 class2_cost = ( 1 - labels ) * np . log ( 1 - predictions ) #Take the sum of both costs cost = class1_cost - class2_cost #Take the average cost cost = cost . sum () / observations return cost Gradient descent ¶ To minimize our cost, we use Gradient Descent just like before in Linear Regression . There are other more sophisticated optimization algorithms out there such as conjugate gradient like BFGS , but you don’t have to worry about these. Machine learning libraries like Scikit-learn hide their implementations so you can focus on more interesting things! Math One of the neat properties of the sigmoid function is its derivative is easy to calculate. If you’re curious, there is a good walk-through derivation on stack overflow [6] . Michael Neilson also covers the topic in chapter 3 of his book. \[\begin{align} s'(z) & = s(z)(1 - s(z)) \end{align}\] Which leads to an equally beautiful and convenient cost function derivative: \[C' = x(s(z) - y)\] Note \(C'\) is the derivative of cost with respect to weights \(y\) is the actual class label (0 or 1) \(s(z)\) is your model’s prediction \(x\) is your feature or feature vector. Notice how this gradient is the same as the MSE (L2) gradient, the only difference is the hypothesis function. Pseudocode Repeat { 1. Calculate gradient average 2. Multiply by learning rate 3. Subtract from weights } Code def update_weights ( features , labels , weights , lr ): ''' Vectorized Gradient Descent Features:(200, 3) Labels: (200, 1) Weights:(3, 1) ''' N = len ( features ) #1 - Get Predictions predictions = predict ( features , weights ) #2 Transpose features from (200, 3) to (3, 200) # So we can multiply w the (200,1) cost matrix. # Returns a (3,1) matrix holding 3 partial derivatives -- # one for each feature -- representing the aggregate # slope of the cost function across all observations gradient = np . dot ( features . T , predictions - labels ) #3 Take the average cost derivative for each feature gradient /= N #4 - Multiply the gradient by our learning rate gradient *= lr #5 - Subtract from our weights to minimize cost weights -= gradient return weights Mapping probabilities to classes ¶ The final step is assign class labels (0 or 1) to our predicted probabilities. Decision boundary def decision_boundary ( prob ): return 1 if prob >= . 5 else 0 Convert probabilities to classes def classify ( predictions ): ''' input - N element array of predictions between 0 and 1 output - N element array of 0s (False) and 1s (True) ''' decision_boundary = np . vectorize ( decision_boundary ) return decision_boundary ( predictions ) . flatten () Example output Probabilities = [ 0.967 , 0.448 , 0.015 , 0.780 , 0.978 , 0.004 ] Classifications = [ 1 , 0 , 0 , 1 , 1 , 0 ] Training ¶ Our training code is the same as we used for linear regression . def train ( features , labels , weights , lr , iters ): cost_history = [] for i in range ( iters ): weights = update_weights ( features , labels , weights , lr ) #Calculate error for auditing purposes cost = cost_function ( features , labels , weights ) cost_history . append ( cost ) # Log Progress if i % 1000 == 0 : print ""iter: "" + str ( i ) + "" cost: "" + str ( cost ) return weights , cost_history Model evaluation ¶ If our model is working, we should see our cost decrease after every iteration. iter : 0 cost : 0.635 iter : 1000 cost : 0.302 iter : 2000 cost : 0.264 Final cost: 0.2487. Final weights: [-8.197, .921, .738] Cost history Accuracy Accuracy measures how correct our predictions were. In this case we simply compare predicted labels to true labels and divide by the total. def accuracy ( predicted_labels , actual_labels ): diff = predicted_labels - actual_labels return 1.0 - ( float ( np . count_nonzero ( diff )) / len ( diff )) Decision boundary Another helpful technique is to plot the decision boundary on top of our predictions to see how our labels compare to the actual labels. This involves plotting our predicted probabilities and coloring them with their true labels. Code to plot the decision boundary def plot_decision_boundary ( trues , falses ): fig = plt . figure () ax = fig . add_subplot ( 111 ) no_of_preds = len ( trues ) + len ( falses ) ax . scatter ([ i for i in range ( len ( trues ))], trues , s = 25 , c = 'b' , marker = ""o"" , label = 'Trues' ) ax . scatter ([ i for i in range ( len ( falses ))], falses , s = 25 , c = 'r' , marker = ""s"" , label = 'Falses' ) plt . legend ( loc = 'upper right' ); ax . set_title ( ""Decision Boundary"" ) ax . set_xlabel ( 'N/2' ) ax . set_ylabel ( 'Predicted Probability' ) plt . axhline ( . 5 , color = 'black' ) plt . show () Multiclass logistic regression ¶ Instead of \(y = {0,1}\) we will expand our definition so that \(y = {0,1...n}\) . Basically we re-run binary classification multiple times, once for each class. Procedure ¶ Divide the problem into n+1 binary classification problems (+1 because the index starts at 0?). For each class… Predict the probability the observations are in that single class. prediction = max(probability of the classes) For each sub-problem, we select one class (YES) and lump all the others into a second class (NO). Then we take the class with the highest predicted value. Softmax activation ¶ The softmax function (softargmax or normalized exponential function) is a function that takes as input a vector of K real numbers, and normalizes it into a probability distribution consisting of K probabilities proportional to the exponentials of the input numbers. That is, prior to applying softmax, some vector components could be negative, or greater than one; and might not sum to 1; but after applying softmax, each component will be in the interval [ 0 , 1 ] , and the components will add up to 1, so that they can be interpreted as probabilities. The standard (unit) softmax function is defined by the formula \[\begin{align} σ(z_i) = \frac{e^{z_{(i)}}}{\sum_{j=1}^K e^{z_{(j)}}}\ \ \ for\ i=1,.,.,.,K\ and\ z=z_1,.,.,.,z_K \end{align}\] In words: we apply the standard exponential function to each element \(z_i\) of the input vector \(z\) and normalize these values by dividing by the sum of all these exponentials; this normalization ensures that the sum of the components of the output vector \(σ(z)\) is 1. [9] Scikit-Learn example ¶ Let’s compare our performance to the LogisticRegression model provided by scikit-learn [8] . import sklearn from sklearn.linear_model import LogisticRegression from sklearn.cross_validation import train_test_split # Normalize grades to values between 0 and 1 for more efficient computation normalized_range = sklearn . preprocessing . MinMaxScaler ( feature_range = ( - 1 , 1 )) # Extract Features + Labels labels . shape = ( 100 ,) #scikit expects this features = normalized_range . fit_transform ( features ) # Create Test/Train features_train , features_test , labels_train , labels_test = train_test_split ( features , labels , test_size = 0.4 ) # Scikit Logistic Regression scikit_log_reg = LogisticRegression () scikit_log_reg . fit ( features_train , labels_train ) #Score is Mean Accuracy scikit_score = clf . score ( features_test , labels_test ) print 'Scikit score: ' , scikit_score #Our Mean Accuracy observations , features , labels , weights = run () probabilities = predict ( features , weights ) . flatten () classifications = classifier ( probabilities ) our_acc = accuracy ( classifications , labels . flatten ()) print 'Our score: ' , our_acc Scikit score: 0.88. Our score: 0.89 References [1] http://www.holehouse.org/mlclass/06_Logistic_Regression.html [2] http://machinelearningmastery.com/logistic-regression-tutorial-for-machine-learning [3] https://scilab.io/machine-learning-logistic-regression-tutorial/ [4] https://github.com/perborgen/LogisticRegression/blob/master/logistic.py [5] http://neuralnetworksanddeeplearning.com/chap3.html [6] http://math.stackexchange.com/questions/78575/derivative-of-sigmoid-function-sigma-x-frac11e-x [7] https://en.wikipedia.org/wiki/Monotoniconotonic_function [8] http://scikit-learn.org/stable/modules/linear_model.html#logistic-regression > [9] https://en.wikipedia.org/wiki/Softmax_function","[-1.77549750e-01 -2.84701347e-01 -4.98923808e-02  7.85560608e-01
  6.83578670e-01  2.79670179e-01  2.55152434e-01 -1.01628378e-01
  2.03504920e-01 -1.66361853e-02  3.29920262e-01 -5.09765148e-01
  1.58833206e-01  2.87566185e-01 -1.65723003e-02 -7.95059204e-01
 -1.34312421e-01 -2.76017904e-01  1.38888061e-01 -4.70039397e-01
 -9.45001841e-03  9.14722607e-02 -2.39423409e-01 -5.75954676e-01
  3.74883264e-01  2.50138640e-01  3.98237765e-01 -6.15118667e-02
 -5.29038489e-01 -2.75998533e-01 -1.89558685e-01  1.37564726e-04
 -1.22008502e-01  4.96632576e-01  3.31308365e-01 -6.29005730e-02
  7.68413246e-02  1.35532439e-01  1.55992031e-01  4.94476631e-02
  1.55925721e-01  1.67099401e-01  1.57968998e-01  4.71972451e-02
  3.02307010e-02  1.38140656e-02 -3.63934636e-01 -7.37728849e-02
  5.88534549e-02 -1.43130153e-01  9.34116095e-02  1.08324081e-01
 -8.44801515e-02 -1.04629539e-01 -4.89128614e-03 -1.02629155e-01
 -6.43273965e-02 -5.11502683e-01 -5.43026403e-02 -3.08110982e-01
  9.89969075e-02 -3.44662294e-02 -2.86886275e-01  5.73246419e-01
 -1.49519861e-01 -1.01940259e-01  1.49726599e-01  5.92879236e-01
  9.64709073e-02 -7.49385208e-02 -4.02349442e-01 -3.64456773e-01
  5.20749986e-01 -4.19018090e-01  1.36781961e-01 -6.55293703e-01
  7.97732025e-02 -2.18674749e-01 -3.17265451e-01  3.84066045e-01
 -1.60833552e-01  1.31562963e-01 -2.52165832e-04  8.04182813e-02
  6.52367890e-01  6.34359941e-03  3.82898673e-02 -6.25635460e-02
  1.15235433e-01  3.40751886e-01 -1.03734881e-01 -2.37315059e-01
 -1.12754077e-01 -4.61091429e-01 -4.51295078e-02 -2.31927931e-01
 -3.45929153e-02 -1.62797555e-01 -3.28593552e-02  5.43126278e-02
 -6.23338461e-01  1.00099444e-01 -1.93204373e-01  2.56750405e-01
  1.49437591e-01  8.64465237e-02  3.12079668e-01 -9.73566398e-02
 -4.47466195e-01 -1.53333157e-01 -2.58372039e-01 -1.05330199e-01
 -2.74721086e-01 -9.47565213e-02  1.20358393e-01 -6.38545930e-01
  1.08998895e-01  8.43713619e-03  6.43499941e-02  2.10641205e-01
 -1.40007779e-01  1.58080131e-01  2.38932475e-01  5.73235035e-01
 -8.69526267e-01  1.09960109e-01  1.21756032e-01 -1.48646623e-01
  2.07628489e-01  3.56460690e-01  2.52594531e-01 -3.40302527e-01
 -3.69622737e-01 -8.04404974e-01 -1.55715644e-01  1.58168092e-01
 -1.40185151e-02 -4.87114787e-02 -6.63815439e-02  2.55951345e-01
  1.10069096e-01  8.01419616e-02 -5.71291670e-02 -5.92691675e-02
  1.15355983e-01  2.30960697e-02  9.53171551e-02  1.81667358e-02
 -1.86152011e-01 -7.90654272e-02 -2.01009274e-01  3.09385270e-01
  2.41409708e-02 -3.36664528e-01 -2.20846221e-01 -5.80664650e-02
  3.27691376e-01 -5.21205306e-01 -1.88216753e-02 -6.89410865e-01
  2.29106426e-01  7.58321047e-01 -1.70888722e-01  1.30198941e-01
 -2.53446162e-01 -2.22884357e-01  1.46923736e-01  3.65032881e-01
 -3.10962081e-01  2.39480525e-01  4.41103354e-02  2.86133349e-01
 -1.02370925e-01  9.40212049e-04 -4.58473057e-01  3.06332111e-01
  1.44791409e-01 -4.54524718e-02  3.13570760e-02  9.80049931e-03
 -7.58053213e-02 -1.51993521e-03  9.13713127e-04  9.95800644e-03
  3.65302861e-02  2.25585639e-01 -7.18245506e-02  4.89933789e-01
  8.75102729e-03 -4.13490564e-01  3.75171751e-01 -1.38824135e-01
 -3.05822432e-01  1.94438562e-01  3.26469213e-01 -2.19797909e-01
 -3.66024114e-03  1.27309144e-01  1.01995036e-01 -3.43230039e-01
  9.06400532e-02 -2.73581576e-02  5.84791787e-02 -3.01485639e-02
 -3.98109220e-02 -2.23661348e-01 -4.36199307e-01 -1.09490706e-02
  4.17530715e-01  2.28645466e-02  8.33747685e-02  8.02450716e-01
 -1.90074384e-01  3.35042030e-01 -5.44452131e-01 -1.47066206e-01
 -6.02960624e-02  4.16733265e-01 -6.76490664e-02 -3.76085415e-02
  1.02366030e-01  2.41965920e-01  1.66938603e-01  3.35999846e-01
  4.70116794e-01 -5.77246785e-01  4.24936675e-02  3.15949470e-02
 -4.06562164e-02 -4.53672372e-04  1.11516066e-01  3.91441882e-01
 -7.33331442e-02  2.38112912e-01  2.11569741e-01 -2.50408590e-01
  9.73438472e-02  2.02627853e-01 -2.21874297e-01 -1.69715852e-01
  4.26139474e-01 -1.60084173e-01 -8.66145864e-02 -1.06253184e-01
 -4.71727103e-02  3.70627046e-01  1.04123518e-01 -4.63873535e-01
  4.98465635e-03 -2.76885897e-01  2.75388181e-01  2.93021142e-01
 -8.23804922e-03  8.05501416e-02  6.74096346e-01 -1.90490454e-01
 -1.56199098e-01 -3.46460640e-01 -4.07879114e-01 -4.00449038e-01
 -1.73656926e-01 -1.08761769e-02 -1.28975324e-02  5.57942092e-01
 -5.20823803e-03  2.48357117e-01 -8.15784559e-02 -2.70872831e-01
  2.83800900e-01  1.05654551e-02 -1.01623245e-01 -4.52905037e-02
  2.92163789e-01 -2.65511632e-01  1.49178714e-01  2.45399237e-01
  5.44341505e-02 -7.60614499e-02  6.29304886e-01  2.91344166e-01
  1.49098888e-01  4.50647175e-01 -7.56354213e-01  1.06366947e-01
  7.97775295e-03  1.45550668e-01 -2.00127400e-02 -5.47041237e-01
  1.07654380e-02  1.63708568e-01  9.90202501e-02 -2.01798990e-01
 -3.41828197e-01  6.33383870e-01 -1.14113018e-01  3.71902823e-01
  3.72807562e-01  1.98771983e-01  1.32485196e-01 -6.58361614e-03
  3.22025493e-02  3.42975669e-02  8.43601227e-02  3.01834285e-01
 -4.00851369e-01 -5.94808832e-02 -2.67995656e-01 -2.34618746e-02
 -5.14328718e-01 -1.96721420e-01 -1.52171910e-01  1.28424108e-01
  3.50562662e-01 -2.42079899e-01 -9.88991745e-03  1.25132486e-01
  2.73647845e-01  2.02566758e-01 -2.24515200e-01  2.00535148e-01
 -5.22964895e-02  5.27713932e-02  1.40629053e-01  3.35986495e-01
 -1.01053283e-01  1.02976203e-01  1.70007087e-02 -6.92622423e-01
  1.62107915e-01 -2.26565331e-01  5.16553223e-01  1.40004441e-01
  3.27755325e-02 -2.68946826e-01  4.11573723e-02 -4.50800098e-02
  1.87303767e-01 -8.38588029e-02 -2.79694349e-01  3.20207000e-01
  4.26147759e-01  3.46767306e-02 -4.25193816e-01  1.63491338e-01
 -1.99229151e-01 -1.59474403e-01 -5.55304773e-02  2.69931760e-02
  1.18000908e-02 -1.96466278e-02 -9.62103903e-02  1.66643560e-01
  7.35610947e-02 -8.70766118e-02 -2.58185744e-01 -1.66601926e-01
 -3.24831486e-01  2.66397178e-01 -2.54473269e-01 -7.77192041e-02
  1.85330600e-01 -4.34478164e-01  1.65713996e-01  1.59422100e-01
  4.11686376e-02 -1.98475793e-01  1.68831468e-01  1.36053979e-01
  4.77592014e-02 -3.30460012e-01  2.10511059e-01 -1.44629389e-01
  2.63170779e-01 -2.85307229e-01  2.86325365e-01  6.12723492e-02
  5.09988666e-01 -4.08839822e-01  3.77825975e-01 -6.78577647e-02
 -2.41995975e-01  3.90296757e-01 -9.65835899e-02 -1.90870613e-01
 -2.22796440e-01 -3.37937288e-02  2.65245974e-01  2.77012646e-01
  5.20376921e-01  4.35213931e-03 -1.64416179e-01 -2.53707618e-02
 -8.84743482e-02 -2.84854501e-01 -7.73385763e-02  2.08848521e-01
 -1.92697048e-01 -4.40605849e-01 -4.57046807e-01  8.99272114e-02
 -2.20686704e-01 -1.20640114e-01 -3.49750109e-02 -1.31964922e-01
 -1.40517354e-01  2.21037149e-01  5.23690581e-01  3.16162765e-01
  2.53377587e-01 -2.73900896e-01 -2.07009427e-02  1.50720328e-01
 -9.13837403e-02  1.01868778e-01  2.03174710e-01  4.76477854e-02
 -2.35286634e-03  2.20492750e-01 -7.20108822e-02 -1.21271119e-01
  8.46862122e-02 -1.37096524e-01 -1.41042799e-01  8.17780346e-02
 -4.09532845e-01  2.97410667e-01  1.54609427e-01  3.56463015e-01
 -2.57371776e-02  3.02700490e-01  3.78903598e-02 -1.22715808e-01
  2.50196368e-01 -7.02495798e-02  9.08150673e-02 -3.07795480e-02
  2.42129445e-01  4.66189459e-02  1.99712999e-03  4.19445969e-02
  1.53799757e-01  1.62172973e-01 -1.73156649e-01 -3.49621534e-01
 -1.55056622e-02 -5.53177558e-02 -1.08954541e-01  2.04447120e-01
  4.05023918e-02 -4.38451506e-02 -1.65466025e-01 -5.20998120e-01
  2.80558690e-02  2.08514035e-01 -3.09021801e-01 -2.19911426e-01
  1.58749446e-01  2.16082215e-01 -1.60689861e-01  1.00532711e-01
 -5.46148885e-03  7.81628117e-03 -2.88521826e-01  6.60282522e-02
 -4.63158011e-01  3.54843587e-01  5.51933534e-02  3.95946950e-01
 -5.93820333e-01  1.46483392e-01 -2.80267775e-01 -2.02422589e-01
  7.47747123e-02  2.67672129e-02 -1.21913716e-01  3.32553267e-01
 -2.36091644e-01 -5.80590010e-01  7.38603324e-02  1.47939557e-02
  3.31589878e-01  7.94233084e-02 -2.16789633e-01 -9.04689506e-02
 -2.99699660e-02  1.31035522e-01  4.04215753e-01  1.42894834e-01
 -1.32755488e-01  1.88893616e-01  9.15323347e-02  2.87823915e-01
 -5.42085052e-01  2.47867048e-01  3.76692295e-01  1.85077786e-01
 -4.37788308e-01 -1.02142297e-01 -4.53415126e-01 -1.19873837e-01
 -1.59510791e-01  1.30952939e-01  1.66417465e-01  1.23028696e-01
 -2.60130391e-02 -5.78677393e-02 -2.66357034e-01  2.08417699e-01
  3.41680586e-01  2.19967887e-02 -1.00854725e-01  2.40939111e-01
  2.32411504e-01  1.15649596e-01  2.95712836e-02  4.34381485e-01
  3.41944039e-01  2.62803525e-01  2.41078883e-01  1.27879381e-01
 -6.66185841e-02  7.94504359e-02 -1.22279920e-01  3.53560328e-01
 -3.79258394e-03 -5.34222722e-02 -7.29982834e-03 -1.84682831e-02
  1.89901203e-01 -1.38647795e-01 -9.52590257e-02 -2.69624889e-01
  1.53391853e-01  9.95919332e-02  6.06442392e-01  3.64290625e-02
  3.31423044e-01 -1.15755117e-02 -4.04939353e-02 -4.76338640e-02
  3.58943820e-01  1.50786757e-01  1.87516704e-01 -6.77448139e-02
 -1.17738113e-01 -1.80414066e-01 -1.28025144e-01  1.52444527e-01
  9.75381285e-02  4.29901212e-01 -3.25330883e-01  7.74246693e-01
  2.14318514e-01 -3.68771628e-02  2.51501769e-01  1.26333892e-01
 -3.48069310e-01 -1.19508252e-01  1.55030116e-01  1.46802962e-01
 -9.85786319e-02  3.77702773e-01  9.93862301e-02 -1.91338390e-01
 -2.38626242e-01 -1.19792342e-01 -2.69489512e-02 -1.65442616e-01
  3.15948546e-01  2.84250826e-01 -5.08757949e-01  1.90864503e-01
 -2.45172352e-01 -2.21367195e-01  1.58459857e-01  8.24790746e-02
  3.52319740e-02  7.76595592e-01 -1.09391548e-01 -6.64862990e-02
 -2.69523300e-02 -1.50654078e-01  1.12554796e-01 -6.15433455e-01
  1.02256551e-01  8.78202170e-02  1.32394165e-01  3.54022672e-03
 -1.06276512e-01  1.30551323e-01 -1.01498373e-01  1.22220688e-01
 -2.57981777e-01 -1.03531875e-01  6.30170926e-02  3.79658163e-01
  3.83720696e-01 -1.99863926e-01  2.56167680e-01 -1.93134338e-01
  2.64016539e-01 -1.33621305e-01 -3.13221395e-01  2.27919713e-01
 -4.87007707e-01 -3.10414046e-01 -3.83806229e-01 -4.84628901e-02
 -1.16307497e-01 -7.84857348e-02  1.59723461e-01  1.89440459e-01
 -1.93199009e-01 -1.61038920e-01  1.23320490e-01 -4.30065580e-03
  3.14198993e-02 -2.48555019e-01 -4.57035542e-01  2.40310922e-01
  4.23798203e-01 -1.80650696e-01  1.40076473e-01 -1.73771858e-01
  3.69644463e-01 -7.51643628e-02  9.22387987e-02  2.67432004e-01
 -5.57111017e-02 -1.14303660e-02 -1.29435331e-01  1.68935023e-02
  1.10031694e-01 -2.49280483e-01 -4.63718683e-01  2.83400714e-01
  1.81594938e-01  3.26896548e-01  4.95719761e-02 -7.59131014e-02
  4.25499499e-01 -6.20968342e-02  1.46145254e-01 -8.25065076e-02
  2.70965010e-01  2.80052066e-01  2.16889277e-01  2.08421007e-01
  4.54436690e-02 -2.87119299e-02  2.92839203e-02 -1.92154229e-01
  5.26248097e-01 -4.45147961e-01 -2.08350688e-01  1.66059107e-01
 -7.59847522e-01 -1.32976230e-02  4.16615568e-02  9.72741842e-03
  1.55663863e-01  7.11593568e-01  1.03237018e-01  5.61695546e-04
  6.85195923e-01  1.16479456e-01  1.90408677e-01 -1.44203752e-01
  3.18435207e-02 -7.02508762e-02 -2.89080769e-01  5.09119511e-01
 -5.56845255e-02  1.69857129e-01 -2.31923342e-01  2.77196586e-01
  4.77767065e-02  1.62400335e-01 -3.52451950e-01  6.22357391e-02
 -1.89478099e-01  9.87266675e-02  4.53206062e-01  6.80846795e-02
  2.48030037e-01  8.29413384e-02  6.69843480e-02 -8.89840052e-02
  2.75135756e-01 -3.47245216e-01  2.70191431e-02  7.73303732e-02
  6.01406470e-02  2.15999335e-01  1.63075536e-01  3.81757244e-02
 -7.81196356e-02 -1.57580122e-01 -3.11409950e-01 -6.01340830e-01
  2.46149078e-02  2.04836816e-01  4.95873928e-01  1.33920550e-01
  1.84121400e-01 -4.00781557e-02  2.31852308e-01 -4.75385487e-02
 -2.04653978e-01 -2.75030166e-01 -9.35070664e-02 -2.83044968e-02
  1.42017618e-01  5.71909174e-02  1.75464451e-01  4.03538384e-02
 -1.67446733e-01  2.43298218e-01 -2.86606932e-03  8.76622200e-02
  2.00342387e-01  1.69091374e-01  1.06754392e-01  7.12940842e-02
  1.78941548e-01  1.61958203e-01  8.96996036e-02 -4.48221192e-02
  4.10782635e-01 -1.63897693e-01 -7.40281492e-02  5.25690198e-01
 -4.22953516e-01  2.63469964e-01 -1.43615752e-01  5.54406941e-01
  1.66354179e-01 -4.10884917e-01 -1.92903429e-01 -1.01792842e-01
 -1.06605612e-01 -9.47339833e-02 -7.76802003e-02 -3.21303904e-01
  7.13557526e-02  4.25372049e-02 -2.33289704e-01 -3.29517305e-01
 -3.63251776e-01 -2.48824760e-01  2.17153996e-01 -1.18252665e-01
 -1.80857092e-01 -8.67169574e-02  1.28596649e-01  1.18311122e-03
  4.36520517e-01 -2.07120597e-01  1.33000433e-01  1.44321144e-01
  2.13976234e-01  4.33965564e-01 -2.87825894e-03 -4.10915129e-02
  6.82263613e-01  2.13171884e-01  3.89124453e-01  1.15992814e-01]"
Glossary,"Glossary ¶ Definitions of common machine learning terms. Accuracy Percentage of correct predictions made by the model. Algorithm A method, function, or series of instructions used to generate a machine learning model . Examples include linear regression, decision trees, support vector machines, and neural networks. Attribute A quality describing an observation (e.g. color, size, weight). In Excel terms, these are column headers. Bias metric What is the average difference between your predictions and the correct value for that observation? Low bias could mean every prediction is correct. It could also mean half of your predictions are above their actual values and half are below, in equal proportion, resulting in low average difference. High bias (with low variance) suggests your model may be underfitting and you’re using the wrong architecture for the job. Bias term Allow models to represent patterns that do not pass through the origin. For example, if all my features were 0, would my output also be zero? Is it possible there is some base value upon which my features have an effect? Bias terms typically accompany weights and are attached to neurons or filters. Categorical Variables Variables with a discrete set of possible values. Can be ordinal (order matters) or nominal (order doesn’t matter). Classification Predicting a categorical output. Binary classification predicts one of two possible outcomes (e.g. is the email spam or not spam?) Multi-class classification predicts one of multiple possible outcomes (e.g. is this a photo of a cat, dog, horse or human?) Classification Threshold The lowest probability value at which we’re comfortable asserting a positive classification. For example, if the predicted probability of being diabetic is > 50%, return True, otherwise return False. Clustering Unsupervised grouping of data into buckets. Confusion Matrix Table that describes the performance of a classification model by grouping predictions into 4 categories. True Positives : we correctly predicted they do have diabetes True Negatives : we correctly predicted they don’t have diabetes False Positives : we incorrectly predicted they do have diabetes (Type I error) False Negatives : we incorrectly predicted they don’t have diabetes (Type II error) Continuous Variables Variables with a range of possible values defined by a number scale (e.g. sales, lifespan). Convergence A state reached during the training of a model when the loss changes very little between each iteration. Deduction A top-down approach to answering questions or solving problems. A logic technique that starts with a theory and tests that theory with observations to derive a conclusion. E.g. We suspect X, but we need to test our hypothesis before coming to any conclusions. Deep Learning Deep Learning is derived from a machine learning algorithm called perceptron or multi layer perceptron that is gaining more and more attention nowadays because of its success in different fields like, computer vision to signal processing and medical diagnosis to self-driving cars. Like other AI algorithms, deep learning is based on decades of research. Nowadays, we have more and more data and cheap computing power that makes this algorithm really powerful in achieving state of the art accuracy. In modern world this algorithm is known as artificial neural network. Deep learning is much more accurate and robust compared to traditional artificial neural networks. But it is highly influenced by machine learning’s neural network and perceptron networks. Dimension Dimension for machine learning and data scientist is different from physics. Here, dimension of data means how many features you have in your data ocean(data-set). e.g in case of object detection application, flatten image size and color channel(e.g 28*28*3) is a feature of the input set. In case of house price prediction (maybe) house size is the data-set so we call it 1 dimentional data. Epoch An epoch describes the number of times the algorithm sees the entire data set. Extrapolation Making predictions outside the range of a dataset. E.g. My dog barks, so all dogs must bark. In machine learning we often run into trouble when we extrapolate outside the range of our training data. False Positive Rate Defined as \[FPR = 1 - Specificity = \frac{False Positives}{False Positives + True Negatives}\] The False Positive Rate forms the x-axis of the ROC curve . Feature With respect to a dataset, a feature represents an attribute and value combination. Color is an attribute. “Color is blue” is a feature. In Excel terms, features are similar to cells. The term feature has other definitions in different contexts. Feature Selection Feature selection is the process of selecting relevant features from a data-set for creating a Machine Learning model. Feature Vector A list of features describing an observation with multiple attributes. In Excel we call this a row. Gradient Accumulation A mechanism to split the batch of samples—used for training a neural network—into several mini-batches of samples that will be run sequentially. This is used to enable using large batch sizes that require more GPU memory than available. Hyperparameters Hyperparameters are higher-level properties of a model such as how fast it can learn (learning rate) or complexity of a model. The depth of trees in a Decision Tree or number of hidden layers in a Neural Networks are examples of hyper parameters. Induction A bottoms-up approach to answering questions or solving problems. A logic technique that goes from observations to theory. E.g. We keep observing X, so we infer that Y must be True. Instance A data point, row, or sample in a dataset. Another term for observation . Label The “answer” portion of an observation in supervised learning . For example, in a dataset used to classify flowers into different species, the features might include the petal length and petal width, while the label would be the flower’s species. Learning Rate The size of the update steps to take during optimization loops like Gradient Descent . With a high learning rate we can cover more ground each step, but we risk overshooting the lowest point since the slope of the hill is constantly changing. With a very low learning rate, we can confidently move in the direction of the negative gradient since we are recalculating it so frequently. A low learning rate is more precise, but calculating the gradient is time-consuming, so it will take us a very long time to get to the bottom. Loss Loss = true_value(from data-set)- predicted value(from ML-model) The lower the loss, the better a model (unless the model has over-fitted to the training data). The loss is calculated on training and validation and its interpretation is how well the model is doing for these two sets. Unlike accuracy, loss is not a percentage. It is a summation of the errors made for each example in training or validation sets. Machine Learning Mitchell (1997) provides a succinct definition: “A computer program is said to learn from experience E with respect to some class of tasks T and performance measure P, if its performance at tasks in T, as measured by P, improves with experience E.” In simple language machine learning is a field in which human made algorithms have an ability learn by itself or predict future for unseen data. Model A data structure that stores a representation of a dataset (weights and biases). Models are created/learned when you train an algorithm on a dataset. Neural Networks Neural Networks are mathematical algorithms modeled after the brain’s architecture, designed to recognize patterns and relationships in data. Normalization Restriction of the values of weights in regression to avoid overfitting and improving computation speed. Noise Any irrelevant information or randomness in a dataset which obscures the underlying pattern. Null Accuracy Baseline accuracy that can be achieved by always predicting the most frequent class (“B has the highest frequency, so lets guess B every time”). Observation A data point, row, or sample in a dataset. Another term for instance . Outlier An observation that deviates significantly from other observations in the dataset. Overfitting Overfitting occurs when your model learns the training data too well and incorporates details and noise specific to your dataset. You can tell a model is overfitting when it performs great on your training/validation set, but poorly on your test set (or new real-world data). Parameters Parameters are properties of training data learned by training a machine learning model or classifier. They are adjusted using optimization algorithms and unique to each experiment. Examples of parameters include: weights in an artificial neural network support vectors in a support vector machine coefficients in a linear or logistic regression Precision In the context of binary classification (Yes/No), precision measures the model’s performance at classifying positive observations (i.e. “Yes”). In other words, when a positive value is predicted, how often is the prediction correct? We could game this metric by only returning positive for the single observation we are most confident in. \[P = \frac{True Positives}{True Positives + False Positives}\] Recall Also called sensitivity. In the context of binary classification (Yes/No), recall measures how “sensitive” the classifier is at detecting positive instances. In other words, for all the true observations in our sample, how many did we “catch.” We could game this metric by always classifying observations as positive. \[R = \frac{True Positives}{True Positives + False Negatives}\] Recall vs Precision Say we are analyzing Brain scans and trying to predict whether a person has a tumor (True) or not (False). We feed it into our model and our model starts guessing. Precision is the % of True guesses that were actually correct! If we guess 1 image is True out of 100 images and that image is actually True, then our precision is 100%! Our results aren’t helpful however because we missed 10 brain tumors! We were super precise when we tried, but we didn’t try hard enough. Recall , or Sensitivity, provides another lens which with to view how good our model is. Again let’s say there are 100 images, 10 with brain tumors, and we correctly guessed 1 had a brain tumor. Precision is 100%, but recall is 10%. Perfect recall requires that we catch all 10 tumors! Regression Predicting a continuous output (e.g. price, sales). Regularization Regularization is a technique utilized to combat the overfitting problem. This is achieved by adding a complexity term to the loss function that gives a bigger loss for more complex models Reinforcement Learning Training a model to maximize a reward via iterative trial and error. ROC (Receiver Operating Characteristic) Curve A plot of the true positive rate against the false positive rate at all classification thresholds . This is used to evaluate the performance of a classification model at different classification thresholds. The area under the ROC curve can be interpreted as the probability that the model correctly distinguishes between a randomly chosen positive observation (e.g. “spam”) and a randomly chosen negative observation (e.g. “not spam”). Segmentation It is the process of partitioning a data set into multiple distinct sets. This separation is done such that the members of the same set are similar to each otherand different from the members of other sets. Specificity In the context of binary classification (Yes/No), specificity measures the model’s performance at classifying negative observations (i.e. “No”). In other words, when the correct label is negative, how often is the prediction correct? We could game this metric if we predict everything as negative. \[S = \frac{True Negatives}{True Negatives + False Positives}\] Supervised Learning Training a model using a labeled dataset. Test Set A set of observations used at the end of model training and validation to assess the predictive power of your model. How generalizable is your model to unseen data? Training Set A set of observations used to generate machine learning models. Transfer Learning A machine learning method where a model developed for a task is reused as the starting point for a model on a second task. In transfer learning, we take the pre-trained weights of an already trained model (one that has been trained on millions of images belonging to 1000’s of classes, on several high power GPU’s for several days) and use these already learned features to predict new classes. True Positive Rate Another term for recall , i.e. \[TPR = \frac{True Positives}{True Positives + False Negatives}\] The True Positive Rate forms the y-axis of the ROC curve . Type 1 Error False Positives. Consider a company optimizing hiring practices to reduce false positives in job offers. A type 1 error occurs when candidate seems good and they hire him, but he is actually bad. Type 2 Error False Negatives. The candidate was great but the company passed on him. Underfitting Underfitting occurs when your model over-generalizes and fails to incorporate relevant variations in your data that would give your model more predictive power. You can tell a model is underfitting when it performs poorly on both training and test sets. Universal Approximation Theorem A neural network with one hidden layer can approximate any continuous function but only for inputs in a specific range. If you train a network on inputs between -2 and 2, then it will work well for inputs in the same range, but you can’t expect it to generalize to other inputs without retraining the model or adding more hidden neurons. Unsupervised Learning Training a model to find patterns in an unlabeled dataset (e.g. clustering). Validation Set A set of observations used during model training to provide feedback on how well the current parameters generalize beyond the training set. If training error decreases but validation error increases, your model is likely overfitting and you should pause training. Variance How tightly packed are your predictions for a particular observation relative to each other? Low variance suggests your model is internally consistent, with predictions varying little from each other after every iteration. High variance (with low bias) suggests your model may be overfitting and reading too deeply into the noise found in every training set. References [1] http://robotics.stanford.edu/~ronnyk/glossary.html [2] https://developers.google.com/machine-learning/glossary","[ 2.67827630e-01  2.16761440e-01 -1.57313764e-01  5.08401632e-01
  3.29477787e-01 -1.05600849e-01  1.65709957e-01 -9.03733671e-02
  4.47871298e-01  1.76223949e-01  4.40554559e-01  9.11865234e-02
 -4.56307493e-02 -7.53205195e-02 -1.03027850e-01 -5.35833597e-01
 -5.73489249e-01 -1.73951060e-01 -1.95223600e-01 -1.91652030e-01
  7.92603344e-02  2.05204546e-01 -5.97574264e-02 -4.99426186e-01
 -1.75694644e-01  7.57439956e-02  7.85472021e-02  1.60850227e-01
 -3.16628754e-01 -1.29284831e-02  1.68551862e-01  1.39035910e-01
 -3.56679380e-01  4.00948226e-01  2.99556792e-01  8.17714110e-02
 -9.08384323e-02  3.46743047e-01  5.26027083e-02 -1.40222371e-01
 -8.37518275e-03  4.22499150e-01 -1.27008706e-01  5.07928312e-01
  3.45206261e-03 -2.86702037e-01 -7.33751476e-01  2.61353433e-01
 -1.82954408e-02 -1.59981310e-01  2.35427171e-01  1.44039601e-01
  3.05835217e-01  2.21815333e-02  2.71709263e-01 -1.89832717e-01
  2.84353904e-02 -1.24456719e-01 -1.99051678e-01  8.68823305e-02
 -8.27769414e-02  8.02848488e-04 -1.11920834e-01  2.21933633e-01
 -1.97743177e-01  6.42054603e-02  1.70352876e-01  2.34521851e-01
  2.10267067e-01  1.31960541e-01  1.68762710e-02 -5.50515771e-01
  2.05635816e-01 -4.88964200e-01 -7.81996101e-02 -1.81911699e-03
 -1.51308119e-01 -4.34962153e-01  8.67421180e-02  2.30604127e-01
 -2.13030905e-01  1.90207541e-01 -2.60717291e-02  2.47873232e-01
  9.73707289e-02  1.63630441e-01  1.77662045e-01  2.55860444e-02
 -6.76157624e-02  5.89035340e-02 -2.36192629e-01  4.83475178e-02
 -1.88890874e-01  5.17399549e-01 -2.78376341e-01 -6.70065284e-02
  3.08497727e-01 -2.89930642e-01 -1.66999042e-01  1.45766027e-02
 -4.60673451e-01  1.94293261e-01  4.96203661e-01  6.34896979e-02
  3.37650418e-01  1.01481736e-01  4.15224254e-01  1.38195986e-02
 -1.88086048e-01  7.24218786e-02 -2.84331918e-01 -1.04934648e-01
 -1.84249848e-01 -1.19150490e-01  2.65246443e-02 -9.75414068e-02
  1.75716132e-01 -4.65310439e-02 -6.04311898e-02 -2.50166953e-01
  9.04813036e-03 -2.08964035e-01 -3.94642770e-01  3.80408704e-01
 -8.75485599e-01 -9.85659063e-02  7.88128972e-02 -2.63101757e-01
 -5.19476384e-02  1.05387270e-01 -1.32504040e-02 -1.84520870e-01
  4.22682986e-02 -5.22518635e-01 -7.56904036e-02 -2.04231620e-01
 -8.86799768e-02 -2.70713307e-03  6.48753494e-02 -8.79141688e-02
 -1.03536151e-01 -1.34866327e-01 -1.21896714e-01 -1.38892055e-01
  6.72374666e-02  7.91966617e-02 -3.94162014e-02  1.72906011e-01
  6.66062087e-02 -4.01742101e-01  3.32282782e-01  1.93637058e-01
  2.72046864e-01 -3.09423327e-01  4.18431014e-02 -4.21590954e-01
  6.42109364e-02  3.63321714e-02  2.92114913e-01  2.23132536e-01
  2.24304926e-02  2.17149615e-01  6.16220571e-02  8.25599730e-02
  2.35163122e-01 -8.98113176e-02 -1.39966398e-01 -3.03564668e-01
 -1.88554585e-01 -2.04278469e-01 -2.99126446e-01  1.34630889e-01
  8.07210952e-02 -2.58800596e-01 -2.92757094e-01  2.53862619e-01
 -1.78372025e-01  2.62350552e-02  1.23844564e-01  1.60532780e-02
  1.34606630e-01  1.58685565e-01  2.54728585e-01 -1.04271010e-01
 -1.01919612e-02 -7.14150965e-02  2.26346448e-01  6.35290384e-01
  6.89400956e-02 -1.64738633e-02  1.14494130e-01 -1.38253719e-03
 -2.07797930e-01 -3.93583685e-01  2.17779607e-01  1.89905092e-01
  2.27692835e-02  2.03056455e-01 -2.65882909e-02 -2.72705019e-01
  1.36286020e-01 -2.58425981e-01  2.01467782e-01  2.33825251e-01
  3.87995541e-01 -3.12876403e-01 -3.60455751e-01  3.44619095e-01
  3.33981961e-01  4.61901575e-02  4.79933619e-03  5.73814586e-02
 -4.99994457e-01  3.84018511e-01 -1.04003400e-02 -4.39100683e-01
  1.04180396e-01  8.68658066e-01 -2.79994190e-01 -4.21231985e-02
 -1.04632244e-01  1.35307893e-01 -8.63412097e-02 -1.94065481e-01
  6.98380530e-01 -5.17886281e-01 -1.26431227e-01  1.49212331e-01
  5.45652024e-03 -4.64754522e-01  7.65753984e-02  2.45725848e-02
 -2.90349722e-01 -1.51164144e-01 -8.68193060e-02  1.16604075e-01
  1.50579616e-01  5.91873005e-02 -1.55590214e-02  1.91873461e-01
  8.05882737e-02 -1.02738120e-01  3.53257000e-01 -4.89654690e-02
  4.02474910e-01 -1.02843344e-01  1.17502958e-01 -4.32288796e-01
  1.40185535e-01 -4.98266190e-01  1.79709315e-01 -3.69315088e-01
  4.05970097e-01  1.35903470e-02  3.75039279e-01 -2.56907165e-01
 -1.10654533e-01 -1.75164953e-01 -2.70408779e-01 -1.19259655e-01
  1.61661297e-01  1.44170225e-01 -1.89102694e-01  1.63053900e-01
  1.51981890e-01 -1.45062834e-01 -1.01775080e-02  5.42190671e-02
  6.80636913e-02 -1.82557255e-01 -3.96734141e-02 -1.26926288e-01
  1.11109018e-01 -1.45662412e-01 -2.29943581e-02  6.67792335e-02
  1.27536029e-01  8.25425982e-02  1.63224399e-01  2.22912073e-01
 -3.46820951e-02 -1.68690503e-01  1.69829339e-01  1.81297865e-03
 -2.79895484e-01  2.33117029e-01 -3.98743600e-02 -9.77493599e-02
  3.16099942e-01  4.18080926e-01  2.45899677e-01 -2.73124099e-01
 -1.07648119e-01  3.48007172e-01 -1.74127862e-01  2.39442941e-02
  1.89751387e-01  3.15846443e-01  5.79468533e-02 -1.44538969e-01
 -5.20335175e-02 -1.30841732e-01 -1.56685650e-01  1.31178379e-01
  4.89548221e-02 -1.30758673e-01 -3.11259985e-01  3.49787265e-01
 -1.31599307e-01 -4.04222310e-01 -8.60792920e-02 -1.35617182e-01
  3.35669100e-01 -3.36736470e-01  1.14131339e-01  1.18214622e-01
  1.40724778e-01  8.01281258e-02  1.48056567e-01 -3.70258838e-02
  1.68628812e-01 -1.18786715e-01  4.64283973e-02  1.53775200e-01
  9.81358439e-02 -1.89010248e-01  1.04326777e-01 -4.12949204e-01
  2.33367682e-01 -2.02498600e-01  4.71664965e-02 -2.63540894e-01
 -6.28686398e-02  3.34831655e-01  1.49584748e-03 -4.71596345e-02
 -5.25229052e-02 -2.15625972e-01 -6.13564253e-02  5.77701852e-02
  5.73357105e-01  3.80234897e-01 -2.13109106e-01  7.50317648e-02
 -1.84574977e-01  1.57041252e-01 -2.98358381e-01  1.75603405e-01
  3.27003509e-01 -3.54094207e-01 -1.10569291e-01  6.68568090e-02
  7.28775859e-02  1.06979579e-01 -2.30714113e-01 -5.45471370e-01
  3.70093156e-03  2.61099786e-01  3.07133887e-02 -1.45850241e-01
 -9.14169103e-02  5.45891933e-02  2.33573362e-01 -5.92819229e-02
  2.85811454e-01 -3.03321153e-01 -1.16360046e-01 -5.82731031e-02
 -1.47983253e-01 -1.32958323e-01  2.11462155e-01 -1.99390769e-01
  3.00707016e-02  5.04479073e-02  5.68393059e-03  2.17814445e-02
  7.16592148e-02 -2.16619909e-01  4.73127753e-01  2.40646273e-01
 -2.96225369e-01  5.68095624e-01  4.44273576e-02 -9.30623710e-02
 -3.53128314e-01 -9.42690372e-02  3.81586313e-01 -5.28294332e-02
  1.01751670e-01 -5.15477061e-02  5.54274023e-02 -1.75640851e-01
 -4.61212039e-01 -9.17254761e-02  1.72515184e-01  1.95937142e-01
  1.67534694e-01 -1.89766720e-01 -1.06448330e-01  1.68839023e-02
 -1.97414979e-01 -1.04034312e-01  1.79337889e-01  4.30362254e-01
 -8.15505534e-02  2.02925488e-01 -4.39781956e-02 -1.09833427e-01
  3.58936906e-01 -1.93733156e-01 -3.46231878e-01 -3.42153192e-01
 -6.24723360e-02  1.21921048e-01  6.33933365e-01 -4.15317081e-02
 -1.65324919e-02  7.54021704e-02 -4.30070490e-01 -2.59386271e-01
  3.23873460e-02 -8.44432339e-02  2.77241796e-01  3.09822053e-01
 -2.14456856e-01  1.59804881e-01  1.79717243e-01  3.36264193e-01
 -1.20029211e-01  2.54120708e-01 -5.30939698e-02 -1.55904144e-01
  3.66500244e-02 -6.80245236e-02 -4.16429527e-02 -1.31399557e-01
 -4.87523228e-02  1.59446113e-02  9.53030512e-02 -2.83894204e-02
  2.33304590e-01  1.00302368e-01 -8.35896358e-02  1.54437637e-02
  1.34646624e-01  4.00607914e-01 -9.91133600e-02  2.37403631e-01
  3.42966467e-02  1.35752350e-01  5.66437729e-02 -2.15921387e-01
 -2.67649829e-01 -1.37845650e-01 -5.42301059e-01 -3.11599910e-01
  8.34292173e-03  3.65457654e-01 -1.77300960e-01  7.43137673e-02
  1.87157005e-01  2.26582736e-02 -1.59034543e-02  3.66968989e-01
 -5.09255409e-01  2.87314117e-01  6.45225793e-02  2.51929939e-01
 -1.48972854e-01  9.25150812e-02 -1.58281997e-04 -5.63590936e-02
 -1.18529998e-01  1.52569205e-01 -1.85365491e-02  7.61669278e-02
  1.36479475e-02 -1.01944506e-01 -8.72186348e-02  7.24865273e-02
 -3.40327583e-02  2.45769009e-01 -2.59173334e-01 -1.17411874e-02
 -2.60169804e-01  4.31062818e-01  2.61933118e-01  2.24906847e-01
 -2.11210519e-01 -2.70442724e-01  1.24618366e-01  1.37782112e-01
  2.14142621e-01 -3.97196710e-01  2.58344412e-01 -7.77966753e-02
 -6.56945407e-01  1.44016016e-02 -9.86531451e-02 -6.86321855e-02
 -8.42229500e-02  7.91343451e-02  4.72645238e-02  1.55721707e-02
 -2.31148843e-02 -8.05151537e-02 -6.12632111e-02  6.96015432e-02
  2.45610267e-01 -6.45862594e-02  8.43593627e-02  1.26489341e-01
  1.67041838e-01  1.33040801e-01  9.50581022e-03  3.92559469e-01
 -7.30082020e-03 -2.36794099e-01 -3.21788341e-03  2.74535894e-01
  1.05605721e-01 -1.90335900e-01 -3.90008390e-01  3.10363591e-01
 -1.32775918e-01 -1.25664786e-01  5.83632112e-01  6.24005422e-02
  1.84384212e-02 -3.76398087e-01 -2.47923255e-01 -5.17531335e-01
 -1.23059452e-02  1.56913754e-02  6.43379211e-01 -1.53180063e-01
  8.18036497e-02 -2.56035268e-01  3.94227281e-02 -1.17192887e-01
 -4.42184508e-03  7.36131817e-02  4.88051414e-01 -1.06420375e-01
 -9.49475616e-02  1.71122268e-01 -3.88265073e-01  2.15245634e-01
  6.44381903e-03  3.47896993e-01 -3.16675276e-01  8.43030453e-01
  3.23306769e-02 -1.71652690e-01  4.10909325e-01  7.44840354e-02
 -2.04833537e-01 -1.76601149e-02  2.54191548e-01  7.45239295e-03
  2.54870892e-01  2.92147458e-01  4.76638079e-02  1.84524193e-01
 -2.89047033e-01 -3.90302613e-02 -4.63672653e-02 -3.14132482e-01
  1.82124153e-01  1.52234524e-01 -2.85797417e-01  6.10210262e-02
  1.24807127e-01 -2.28045046e-01  4.66245830e-01  1.04816481e-01
 -5.29926345e-02  2.84423441e-01  3.78617108e-01  1.40708342e-01
  9.07000452e-02  1.03095792e-01  2.12668017e-01  2.91795611e-01
  1.37872532e-01  3.90185177e-01 -2.65808590e-03  7.54654258e-02
 -5.53185344e-02 -2.39046812e-01 -1.62317231e-01 -1.74401164e-01
 -2.03065529e-01 -2.61477649e-01  3.15213025e-01 -1.68799669e-01
  9.85013396e-02  1.10631473e-02  3.04324746e-01 -5.32056205e-03
  1.14138596e-01  1.44886643e-01 -9.60802808e-02 -1.01026155e-01
  2.10859135e-01 -1.53270543e-01 -3.52497935e-01  1.64591238e-01
  3.36184865e-03 -2.92013735e-01  2.24859580e-01 -6.55598752e-03
  1.71581402e-01 -3.77779722e-01 -1.34411722e-01 -1.53675731e-02
 -1.28022999e-01 -1.01556927e-02 -2.34546512e-01 -6.27466962e-02
  1.01167165e-01  5.20281531e-02  4.42220718e-02 -1.03810787e-01
  1.11113340e-01 -6.52629584e-02  1.70877159e-01  1.67121589e-01
 -2.03526229e-01  1.28440782e-01 -9.26144570e-02 -1.47081926e-01
  2.80913174e-01 -2.23395377e-01 -5.39670438e-02  2.06931606e-02
  1.95127577e-01  3.75940859e-01  2.24751420e-02  2.24553496e-01
  1.12197526e-01 -3.23433548e-01  3.76665443e-01  1.73522085e-01
  2.64626324e-01  4.60211225e-02  1.36262223e-01 -3.64207998e-02
 -1.08688653e-01  1.66464865e-01  3.40315551e-02 -3.23978484e-01
 -2.46650204e-02 -3.47292036e-01  5.21144830e-02 -1.53762579e-01
 -1.28260374e-01 -9.19374973e-02  3.78482223e-01 -7.76193365e-02
  3.12651992e-01  4.24165010e-01  2.98110962e-01  1.29714474e-01
  5.96064508e-01 -7.28581250e-02  1.18382901e-01  6.94191828e-02
 -2.40227714e-01  2.48407900e-01 -3.88010263e-01  3.20320100e-01
  4.53230113e-01  2.99910307e-01 -1.62295103e-01 -6.53077960e-02
  5.79765849e-02  3.19675505e-01 -3.16790402e-01 -1.73649013e-01
 -3.82367745e-02  8.12306106e-02  3.00797701e-01  3.77840757e-01
 -8.59646872e-02  1.06425472e-01  1.44109145e-01 -2.92138994e-01
  1.85491353e-01 -3.65454406e-01 -1.96667284e-01  1.85272858e-01
 -1.06944077e-01  3.78780454e-01  8.96664336e-02 -8.65601152e-02
 -7.06374794e-02  1.33152172e-01  2.45731790e-03 -4.45609868e-01
  3.16671394e-02 -1.71292219e-02  2.85205066e-01  7.35872388e-02
  2.15441078e-01 -8.33259001e-02 -1.30346537e-01 -3.12654734e-01
 -9.43301916e-02 -2.03689381e-01 -1.68133035e-01  5.99670000e-02
 -1.04790673e-01  2.92730510e-01  1.39757305e-01 -1.20647795e-01
 -4.84712660e-01 -8.20958316e-02  3.40198636e-01  1.87448293e-01
 -5.73104173e-02  1.49957649e-02  1.70369759e-01 -3.04714330e-02
  2.07973868e-02  2.47529939e-01  2.71438397e-02  1.40383303e-01
 -1.76208578e-02  1.29917800e-01 -1.60944223e-01  4.71083701e-01
  4.50589061e-02  2.03236490e-01 -9.18116495e-02 -8.09486955e-02
  2.43333876e-01 -1.84968501e-01 -8.15754235e-02 -3.50177705e-01
  2.81118333e-01 -5.27090490e-01  3.69570702e-02 -4.53427017e-01
  2.77782708e-01 -4.66541424e-02 -7.36951455e-03 -2.03839466e-01
 -5.09441271e-02  1.31898433e-01  4.63436782e-01  1.45913437e-01
 -3.93518299e-01 -8.04332644e-02  1.57648057e-01 -7.79278204e-03
  3.74415219e-01  2.28889138e-01  4.60240275e-01 -8.73762444e-02
  5.94764985e-02  1.18102193e-01 -2.36212518e-02 -2.47182101e-01
  4.24347252e-01  4.60057944e-01  4.37208027e-01 -1.26657322e-01]"
Calculus,"Calculus ¶ Introduction Derivatives Geometric definition Taking the derivative Step-by-step Machine learning use cases Chain rule How It Works Step-by-step Multiple functions Gradients Partial derivatives Step-by-step Directional derivatives Useful properties Integrals Computing integrals Applications of integration Computing probabilities Expected value Variance Introduction ¶ You need to know some basic calculus in order to understand how functions change over time (derivatives), and to calculate the total amount of a quantity that accumulates over a time period (integrals). The language of calculus will allow you to speak precisely about the properties of functions and better understand their behaviour. Normally taking a calculus course involves doing lots of tedious calculations by hand, but having the power of computers on your side can make the process much more fun. This section describes the key ideas of calculus which you’ll need to know to understand machine learning concepts. Derivatives ¶ A derivative can be defined in two ways: Instantaneous rate of change (Physics) Slope of a line at a specific point (Geometry) Both represent the same principle, but for our purposes it’s easier to explain using the geometric definition. Geometric definition ¶ In geometry slope represents the steepness of a line. It answers the question: how much does \(y\) or \(f(x)\) change given a specific change in \(x\) ? Using this definition we can easily calculate the slope between two points. But what if I asked you, instead of the slope between two points, what is the slope at a single point on the line? In this case there isn’t any obvious “rise-over-run” to calculate. Derivatives help us answer this question. A derivative outputs an expression we can use to calculate the instantaneous rate of change , or slope, at a single point on a line. After solving for the derivative you can use it to calculate the slope at every other point on the line. Taking the derivative ¶ Consider the graph below, where \(f(x) = x^2 + 3\) . The slope between (1,4) and (3,12) would be: \[slope = \frac{y2-y1}{x2-x1} = \frac{12-4}{3-1} = 4\] But how do we calculate the slope at point (1,4) to reveal the change in slope at that specific point? One way would be to find the two nearest points, calculate their slopes relative to \(x\) and take the average. But calculus provides an easier, more precise way: compute the derivative. Computing the derivative of a function is essentially the same as our original proposal, but instead of finding the two closest points, we make up an imaginary point an infinitesimally small distance away from \(x\) and compute the slope between \(x\) and the new point. In this way, derivatives help us answer the question: how does \(f(x)\) change if we make a very very tiny increase to x? In other words, derivatives help estimate the slope between two points that are an infinitesimally small distance away from each other. A very, very, very small distance, but large enough to calculate the slope. In math language we represent this infinitesimally small increase using a limit. A limit is defined as the output value a function approaches as the input value approaches another value. In our case the target value is the specific point at which we want to calculate slope. Step-by-step ¶ Calculating the derivative is the same as calculating normal slope, however in this case we calculate the slope between our point and a point infinitesimally close to it. We use the variable \(h\) to represent this infinitesimally distance. Here are the steps: Given the function: \[f(x) = x^2\] Increment \(x\) by a very small value \(h (h = Δx)\) \[f(x + h) = (x + h)^2\] Apply the slope formula \[\frac{f(x + h) - f(x)}{h}\] Simplify the equation \[ \begin{align}\begin{aligned}\begin{split}\frac{x^2 + 2xh + h^2 - x^2}{h} \\\end{split}\\\frac{2xh+h^2}{h} = 2x+h\end{aligned}\end{align} \] Set \(h\) to 0 (the limit as \(h\) heads toward 0) \[{2x + 0} = {2x}\] So what does this mean? It means for the function \(f(x) = x^2\) , the slope at any point equals \(2x\) . The formula is defined as: \[\lim_{h\to0}\frac{f(x+h) - f(x)}{h}\] Code Let’s write code to calculate the derivative of any function \(f(x)\) . We test our function works as expected on the input \(f(x)=x^2\) producing a value close to the actual derivative \(2x\) . def get_derivative ( func , x ): """"""Compute the derivative of `func` at the location `x`."""""" h = 0.0001 # step size return ( func ( x + h ) - func ( x )) / h # rise-over-run def f ( x ): return x ** 2 # some test function f(x)=x^2 x = 3 # the location of interest computed = get_derivative ( f , x ) actual = 2 * x computed , actual # = 6.0001, 6 # pretty close if you ask me... In general it’s preferable to use the math to obtain exact derivative formulas , but keep in mind you can always compute derivatives numerically by computing the rise-over-run for a “small step” \(h\) . Machine learning use cases ¶ Machine learning uses derivatives in optimization problems. Optimization algorithms like gradient descent use derivatives to decide whether to increase or decrease weights in order to maximize or minimize some objective (e.g. a model’s accuracy or error functions). Derivatives also help us approximate nonlinear functions as linear functions (tangent lines), which have constant slopes. With a constant slope we can decide whether to move up or down the slope (increase or decrease our weights) to get closer to the target value (class label). Chain rule ¶ The chain rule is a formula for calculating the derivatives of composite functions. Composite functions are functions composed of functions inside other function(s). How It Works ¶ Given a composite function \(f(x) = A(B(x))\) , the derivative of \(f(x)\) equals the product of the derivative of \(A\) with respect to \(B(x)\) and the derivative of \(B\) with respect to \(x\) . \[\mbox{composite function derivative} = \mbox{outer function derivative} * \mbox{inner function derivative}\] For example, given a composite function \(f(x)\) , where: \[f(x) = h(g(x))\] The chain rule tells us that the derivative of \(f(x)\) equals: \[\frac{df}{dx} = \frac{dh}{dg} \cdot \frac{dg}{dx}\] Step-by-step ¶ Say \(f(x)\) is composed of two functions \(h(x) = x^3\) and \(g(x) = x^2\) . And that: \[\begin{split}\begin{align} f(x) &= h(g(x)) \\ &= (x^2)^3 \\ \end{align}\end{split}\] The derivative of \(f(x)\) would equal: \[\begin{split}\begin{align} \frac{df}{dx} &= \frac{dh}{dg} \frac{dg}{dx} \\ &= \frac{dh}{d(x^2)} \frac{dg}{dx} \end{align}\end{split}\] Steps Solve for the inner derivative of \(g(x) = x^2\) \[\frac{dg}{dx} = 2x\] Solve for the outer derivative of \(h(x) = x^3\) , using a placeholder \(b\) to represent the inner function \(x^2\) \[\frac{dh}{db} = 3b^2\] Swap out the placeholder variable (b) for the inner function (g(x)) \[\begin{split}\begin{gathered} 3(x^2)^2 \\ 3x^4 \end{gathered}\end{split}\] Return the product of the two derivatives \[3x^4 \cdot 2x = 6x^5\] Multiple functions ¶ In the above example we assumed a composite function containing a single inner function. But the chain rule can also be applied to higher-order functions like: \[f(x) = A(B(C(x)))\] The chain rule tells us that the derivative of this function equals: \[\frac{df}{dx} = \frac{dA}{dB} \frac{dB}{dC} \frac{dC}{dx}\] We can also write this derivative equation \(f'\) notation: \[f' = A'(B(C(x)) \cdot B'(C(x)) \cdot C'(x)\] Steps Given the function \(f(x) = A(B(C(x)))\) , lets assume: \[\begin{split}\begin{align} A(x) & = sin(x) \\ B(x) & = x^2 \\ C(x) & = 4x \end{align}\end{split}\] The derivatives of these functions would be: \[\begin{split}\begin{align} A'(x) &= cos(x) \\ B'(x) &= 2x \\ C'(x) &= 4 \end{align}\end{split}\] We can calculate the derivative of \(f(x)\) using the following formula: \[f'(x) = A'( (4x)^2) \cdot B'(4x) \cdot C'(x)\] We then input the derivatives and simplify the expression: \[\begin{split}\begin{align} f'(x) &= cos((4x)^2) \cdot 2(4x) \cdot 4 \\ &= cos(16x^2) \cdot 8x \cdot 4 \\ &= cos(16x^2)32x \end{align}\end{split}\] Gradients ¶ A gradient is a vector that stores the partial derivatives of multivariable functions. It helps us calculate the slope at a specific point on a curve for functions with multiple independent variables. In order to calculate this more complex slope, we need to isolate each variable to determine how it impacts the output on its own. To do this we iterate through each of the variables and calculate the derivative of the function after holding all other variables constant. Each iteration produces a partial derivative which we store in the gradient. Partial derivatives ¶ In functions with 2 or more variables, the partial derivative is the derivative of one variable with respect to the others. If we change \(x\) , but hold all other variables constant, how does \(f(x,z)\) change? That’s one partial derivative. The next variable is \(z\) . If we change \(z\) but hold \(x\) constant, how does \(f(x,z)\) change? We store partial derivatives in a gradient, which represents the full derivative of the multivariable function. Step-by-step ¶ Here are the steps to calculate the gradient for a multivariable function: Given a multivariable function \[f(x,z) = 2z^3x^2\] Calculate the derivative with respect to \(x\) \[\frac{df}{dx}(x,z)\] Swap \(2z^3\) with a constant value \(b\) \[f(x,z) = bx^2\] Calculate the derivative with \(b\) constant \[\begin{split}\begin{align} \frac{df}{dx} & = \lim_{h\to0}\frac{f(x+h) - f(x)}{h} \\ & = \lim_{h\to0}\frac{b(x+h)^2 - b(x^2)}{h} \\ & = \lim_{h\to0}\frac{b((x+h)(x+h)) - bx^2}{h} \\ & = \lim_{h\to0}\frac{b((x^2 + xh + hx + h^2)) - bx^2}{h} \\ & = \lim_{h\to0}\frac{bx^2 + 2bxh + bh^2 - bx^2}{h} \\ & = \lim_{h\to0}\frac{2bxh + bh^2}{h} \\ & = \lim_{h\to0} 2bx + bh \\ \end{align}\end{split}\] As \(h —> 0\) … 2bx + 0 Swap \(2z^3\) back into the equation, to find the derivative with respect to \(x\) . \[\begin{split}\begin{align} \frac{df}{dx}(x,z) &= 2(2z^3)x \\ &= 4z^3x \end{align}\end{split}\] Repeat the above steps to calculate the derivative with respect to \(z\) \[\frac{df}{dz}(x,z) = 6x^2z^2\] Store the partial derivatives in a gradient \[\begin{split}\nabla f(x,z)=\begin{bmatrix} \frac{df}{dx} \\ \frac{df}{dz} \\ \end{bmatrix} =\begin{bmatrix} 4z^3x \\ 6x^2z^2 \\ \end{bmatrix}\end{split}\] Directional derivatives ¶ Another important concept is directional derivatives. When calculating the partial derivatives of multivariable functions we use our old technique of analyzing the impact of infinitesimally small increases to each of our independent variables. By increasing each variable we alter the function output in the direction of the slope. But what if we want to change directions? For example, imagine we’re traveling north through mountainous terrain on a 3-dimensional plane. The gradient we calculated above tells us we’re traveling north at our current location. But what if we wanted to travel southwest? How can we determine the steepness of the hills in the southwest direction? Directional derivatives help us find the slope if we move in a direction different from the one specified by the gradient. Math The directional derivative is computed by taking the dot product [11] of the gradient of \(f\) and a unit vector \(\vec{v}\) of “tiny nudges” representing the direction. The unit vector describes the proportions we want to move in each direction. The output of this calculation is a scalar number representing how much \(f\) will change if the current input moves with vector \(\vec{v}\) . Let’s say you have the function \(f(x,y,z)\) and you want to compute its directional derivative along the following vector [2] : \[\begin{split}\vec{v}=\begin{bmatrix} 2 \\ 3 \\ -1 \\ \end{bmatrix}\end{split}\] As described above, we take the dot product of the gradient and the directional vector: \[\begin{split}\begin{bmatrix} \frac{df}{dx} \\ \frac{df}{dy} \\ \frac{df}{dz} \\ \end{bmatrix} \cdot \begin{bmatrix} 2 \\ 3 \\ -1 \\ \end{bmatrix}\end{split}\] We can rewrite the dot product as: \[\nabla_\vec{v} f = 2 \frac{df}{dx} + 3 \frac{df}{dy} - 1 \frac{df}{dz}\] This should make sense because a tiny nudge along \(\vec{v}\) can be broken down into two tiny nudges in the x-direction, three tiny nudges in the y-direction, and a tiny nudge backwards, by −1 in the z-direction. Useful properties ¶ There are two additional properties of gradients that are especially useful in deep learning. The gradient of a function: Always points in the direction of greatest increase of a function ( explained here ) Is zero at a local maximum or local minimum Integrals ¶ The integral of \(f(x)\) corresponds to the computation of the area under the graph of \(f(x)\) . The area under \(f(x)\) between the points \(x=a\) and \(x=b\) is denoted as follows: \[A(a,b) = \int_a^b f(x) \: dx.\] The area \(A(a,b)\) is bounded by the function \(f(x)\) from above, by the \(x\) -axis from below, and by two vertical lines at \(x=a\) and \(x=b\) . The points \(x=a\) and \(x=b\) are called the limits of integration. The \(\int\) sign comes from the Latin word summa. The integral is the “sum” of the values of \(f(x)\) between the two limits of integration. The integral function \(F(c)\) corresponds to the area calculation as a function of the upper limit of integration: \[F(c) \equiv \int_0^c \! f(x)\:dx\,.\] There are two variables and one constant in this formula. The input variable \(c\) describes the upper limit of integration. The integration variable \(x\) performs a sweep from \(x=0\) until \(x=c\) . The constant \(0\) describes the lower limit of integration. Note that choosing \(x=0\) for the starting point of the integral function was an arbitrary choice. The integral function \(F(c)\) contains the “precomputed” information about the area under the graph of \(f(x)\) . The derivative function \(f'(x)\) tells us the “slope of the graph” property of the function \(f(x)\) for all values of \(x\) . Similarly, the integral function \(F(c)\) tells us the “area under the graph” property of the function \(f(x)\) for all possible limits of integration. The area under \(f(x)\) between \(x=a\) and \(x=b\) is obtained by calculating the change in the integral function as follows: \[A(a,b) = \int_a^b \! f(x)\:dx = F(b)-F(a).\] Computing integrals ¶ We can approximate the total area under the function \(f(x)\) between \(x=a\) and \(x=b\) by splitting the region into tiny vertical strips of width \(h\) , then adding up the areas of the rectangular strips. The figure below shows how to compute the area under \(f(x)=x^2\) between \(x=1\) and \(x=3\) by approximating it as four rectangular strips of width \(h=0.5\) . Usually we want to choose \(h\) to be a small number so that the approximation is accurate. Here is some sample code that performs integration. def get_integral ( func , a , b ): """"""Compute the area under `func` between x=a and x=b."""""" h = 0.0001 # width of small rectangle x = a # start at x=a total = 0 while x <= b : # continue until x=b total += h * func ( x ) # area of rect is base*height x += h return total def f ( x ): return x ** 2 # some test function f(x)=x^2 computed = get_integral ( f , 1 , 3 ) def actualF ( x ): return 1.0 / 3.0 * x ** 3 actual = actualF ( 3 ) - actualF ( 1 ) computed , actual # = 8.6662, 8.6666 # pretty close if you ask me... You can find integral functions using the derivative formulas and some reverse engineering. To find an integral function of the function \(f(x)\) , we must find a function \(F(x)\) such that \(F'(x)=f(x)\) . Suppose you’re given a function \(f(x)\) and asked to find its integral function \(F(x)\) : \[F(x) = \int \! f(x)\: dx.\] This problem is equivalent to finding a function \(F(x)\) whose derivative is \(f(x)\) : \[F'(x) = f(x).\] For example, suppose you want to find the indefinite integral \(\int \!x^2\:dx\) . We can rephrase this problem as the search for some function \(F(x)\) such that \[F'(x) = x^2.\] Remembering the derivative formulas we saw above, you guess that \(F(x)\) must contain an \(x^3\) term. Taking the derivative of a cubic term results in a quadratic term. Therefore, the function you are looking for has the form \(F(x)=cx^3\) , for some constant \(c\) . Pick the constant \(c\) that makes this equation true: \[F'(x) = 3cx^2 = x^2.\] Solving \(3c=1\) , we find \(c=\frac{1}{3}\) and so the integral function is \[F(x) = \int x^2 \:dx = \frac{1}{3}x^3 + C.\] You can verify that \(\frac{d}{dx}\left[\frac{1}{3}x^3 + C\right] = x^2\) . You can also verify Integrals using maths. Here is a set of formulas for your reference Applications of integration ¶ Integral calculations have widespread applications to more areas of science than are practical to list here. Let’s explore a few examples related to probabilities. Computing probabilities ¶ A continuous random variable \(X\) is described by its probability density function \(p(x)\) . A probability density function \(p(x)\) is a positive function for which the total area under the curve is \(1\) : \[ p(x) \geq 0, \forall x \qquad \textrm{and} \qquad \int_{-\infty}^\infty p(x)\; dx = 1.\] The probability of observing a value of \(X\) between \(a\) and \(b\) is given by the integral \[ \textrm{Pr}(a \leq X \leq b) = \int_a^b p(x)\; dx.\] Thus, the notion of integration is central to probability theory with continuous random variables. We also use integration to compute certain characteristic properties of the random variable. The expected value and the variance are two properties of any random variable \(X\) that capture important aspects of its behaviour. Expected value ¶ The expected value of the random variable \(X\) is computed using the formula \[\mu % \equiv \mathbb{E}_X[X] = \int_{-\infty}^\infty x\, p(x).\] The expected value is a single number that tells us what value of \(X\) we can expect to obtain on average from the random variable \(X\) . The expected value is also called the average or the mean of the random variable \(X\) . Variance ¶ The variance of the random variable \(X\) is defined as follows: \[\sigma^2 % \equiv \mathbb{E}_X\!\big[(X-\mu)^2\big] = \int_{-\infty}^\infty (x-\mu)^2 \, p(x).\] The variance formula computes the expectation of the squared distance of the random variable \(X\) from its expected value. The variance \(\sigma^2\) , also denoted \(\textrm{var}(X)\) , gives us an indication of how clustered or spread the values of \(X\) are. A small variance indicates the outcomes of \(X\) are tightly clustered near the expected value \(\mu\) , while a large variance indicates the outcomes of \(X\) are widely spread. The square root of the variance is called the standard deviation and is usually denoted \(\sigma\) . The expected value \(\mu\) and the variance \(\sigma^2\) are two central concepts in probability theory and statistics because they allow us to characterize any random variable. The expected value is a measure of the central tendency of the random variable, while the variance \(\sigma^2\) measures its dispersion . Readers familiar with concepts from physics can think of the expected value as the centre of mass of the distribution, and the variance as the moment of inertia of the distribution. References [1] https://en.wikipedia.org/wiki/Derivative [2] https://www.khanacademy.org/math/multivariable-calculus/multivariable-derivatives/partial-derivative-and-gradient-articles/a/directional-derivative-introduction [3] https://en.wikipedia.org/wiki/Partial_derivative [4] https://en.wikipedia.org/wiki/Gradient [5] https://betterexplained.com/articles/vector-calculus-understanding-the-gradient [6] https://www.mathsisfun.com/calculus/derivatives-introduction.html [7] http://tutorial.math.lamar.edu/Classes/CalcI/DefnOfDerivative.aspx [8] https://www.khanacademy.org/math/calculus-home/taking-derivatives-calc/chain-rule-calc/v/chain-rule-introduction [9] http://tutorial.math.lamar.edu/Classes/CalcI/ChainRule.aspx [10] https://youtu.be/pHMzNW8Agq4?t=1m5s [11] https://en.wikipedia.org/wiki/Dot_product","[ 1.97678804e-02  2.99038947e-01  1.53647333e-01  7.25492835e-01
  7.30802119e-03  2.71585792e-01  2.94875145e-01  2.40018234e-01
  2.17236996e-01  1.83667779e-01  4.64378804e-01 -2.93654263e-01
  1.78579971e-01  3.57299775e-01  6.71681404e-01 -5.07146478e-01
 -2.33546421e-01 -1.89819410e-01  2.18630046e-01  9.42696035e-02
 -2.09177807e-02  8.42152014e-02 -2.29838192e-01 -6.52885318e-01
  2.00241134e-01  3.37109029e-01 -2.42083780e-02  3.54068987e-02
 -5.15424490e-01  4.85213287e-03 -3.60724270e-01 -2.44192988e-01
 -6.35614842e-02  2.27697283e-01 -2.68866241e-01  6.22558668e-02
 -1.54055551e-01  1.35542527e-02 -2.16368407e-01 -2.88895190e-01
 -1.04273066e-01  2.81997085e-01 -2.40171731e-01  3.31337929e-01
 -1.47190243e-01 -2.75996983e-01 -7.69789517e-01 -3.49328555e-02
  8.30621347e-02  3.63107920e-02  3.42040241e-01  1.02053799e-01
  1.09002560e-01 -2.65340358e-02  1.53624788e-01 -2.21986100e-01
  8.22505951e-02  3.66011262e-01  2.36982465e-01 -4.97160628e-02
 -1.82275444e-01 -2.84375250e-03 -5.94902873e-01  5.04766941e-01
 -1.01147957e-01 -3.19367439e-01  2.13020712e-01 -8.57976377e-02
 -1.52631491e-01  2.36041278e-01 -3.79333109e-01 -2.63920486e-01
  2.09643319e-01 -4.84956622e-01  5.98412678e-02 -4.80624080e-01
  8.48506838e-02  1.10912651e-01 -2.07031846e-01 -2.67605066e-01
 -2.34656483e-01  2.89908707e-01  1.01927482e-03  2.91143060e-01
  3.29403341e-01  2.10459828e-01  2.97414601e-01 -2.77763844e-01
  2.32731998e-01  8.82972404e-02 -3.39545608e-01 -2.73910373e-01
 -3.67638588e-01 -3.54802430e-01 -3.63383815e-02 -5.05452976e-03
  9.25576985e-02 -7.92256057e-01 -1.76059425e-01  1.97405189e-01
  1.87546015e-01  5.32979108e-02 -2.00404301e-01  1.19560450e-01
  5.72726727e-02 -1.51764512e-01  1.46482855e-01  1.74859762e-02
 -9.03715938e-02 -3.20352852e-01 -1.68827385e-01 -5.47571957e-01
 -5.20991802e-01 -4.91877533e-02 -8.44580010e-02 -7.28838444e-01
  3.03576708e-01 -3.68310288e-02 -1.55718982e-01 -1.35972947e-01
 -2.99991041e-01  3.90670896e-02 -9.18567419e-01  2.24171668e-01
 -5.41399062e-01  3.70736420e-01 -6.25319555e-02 -1.80596024e-01
  2.02202320e-01  5.47308564e-01 -1.20663062e-01  2.28633463e-01
 -4.09757018e-01 -3.65619272e-01 -3.41863513e-01 -1.69007629e-02
  1.53643275e-02 -5.77338673e-02  1.21087350e-01  8.39338973e-02
 -2.17923433e-01  1.04014754e-01 -1.84657156e-01  1.14293903e-01
  2.12013170e-01 -5.01094759e-02 -3.10954392e-01 -2.81112175e-03
  1.66641176e-01  7.52543658e-02 -1.14863202e-01  2.85998192e-02
  1.67681083e-01 -2.65886933e-01  6.51625469e-02  3.25895846e-01
  3.30746472e-01 -7.66387761e-01  5.69133088e-02  1.09177180e-01
  4.44806181e-03  1.67892471e-01  8.64435434e-02 -1.17582902e-02
  2.65281558e-01  1.39588684e-01  1.14437923e-01  2.16785818e-02
 -2.47737959e-01  9.13227573e-02 -2.23465741e-01  3.36592615e-01
 -3.34626436e-01  8.14051852e-02 -9.52641219e-02  1.23853236e-01
 -1.94537789e-01  3.58806364e-02  6.05446249e-02  6.03296049e-02
 -1.12177208e-02  1.35705233e-01  1.14202149e-01  4.14656028e-02
  4.60789055e-01  1.53771892e-01  7.93620721e-02  5.85335493e-01
 -5.92403412e-01 -3.02581936e-01 -1.72421381e-01 -1.88683853e-01
 -1.00116193e-01 -2.83237398e-01  3.78948748e-01  5.24379164e-02
  3.00564319e-01  5.50141223e-02 -9.33657289e-02 -1.62522018e-01
  1.54773727e-01 -2.02161133e-01  7.44108856e-02  9.45007708e-03
  1.64217457e-01 -3.56445521e-01 -4.81486201e-01  3.81484509e-01
  4.29719925e-01 -6.64159954e-02 -1.60967827e-01  3.57233554e-01
 -1.48247927e-01  4.37984407e-01  4.19966392e-02 -6.18479490e-01
  4.01886821e-01  6.93175435e-01  2.12449074e-01 -4.96563967e-04
  1.15627475e-01  2.15733409e-01  1.01961598e-01  1.62536338e-01
  1.37338698e-01 -9.50027183e-02  1.30763441e-01 -9.09542292e-03
  7.95510784e-02 -2.73723453e-01  4.42172959e-02  1.69986904e-01
  3.21152598e-01  3.56141254e-02 -3.00461520e-02  4.40332554e-02
 -2.01320469e-01  3.12404692e-01 -2.76862562e-01 -1.74274109e-02
  2.57955551e-01 -8.15543830e-02  6.11979812e-02  2.05888316e-01
  4.72588576e-02  4.60327387e-01 -1.49922520e-01 -2.72742093e-01
 -2.16447547e-01 -4.56439316e-01  4.54129755e-01  2.00825199e-01
  2.76601374e-01  5.03046513e-02  5.17983913e-01 -2.32887104e-01
 -2.05458954e-01 -3.67104635e-03 -3.88473868e-01  5.11752814e-03
  1.08067423e-01 -1.28616601e-01 -1.02711052e-01  3.42654973e-01
  2.15993822e-01 -6.19207621e-02  1.15111880e-01  1.82912797e-01
  5.03959171e-02  1.23530015e-01  4.58382368e-01 -1.55252397e-01
  3.33406746e-01 -6.10336185e-01 -1.25249140e-02  1.98866695e-01
  6.39602765e-02  5.61911725e-02  1.40904188e-01  4.17079568e-01
  1.93869770e-01 -1.14231385e-01 -4.42805409e-01 -2.55275488e-01
  1.32284164e-01 -7.72788003e-03  1.49829209e-01 -1.84410334e-01
  1.76635280e-01  2.31048971e-01  3.01919222e-01 -2.39115179e-01
  2.72318833e-02  2.32579768e-01 -1.37952983e-01  2.38875985e-01
  3.35861146e-01 -9.47712660e-02 -2.55744681e-02 -1.79227680e-01
 -3.67886484e-01  1.38121814e-01  1.68367565e-01 -1.63983256e-02
  2.37270474e-01  6.57104701e-02 -4.19779062e-01  1.96997762e-01
 -5.56511521e-01 -5.72470784e-01  1.36335222e-02 -9.69860926e-02
  4.40792918e-01 -2.72647794e-02  1.21029317e-01 -3.39827538e-02
  5.09785235e-01  5.14818318e-02 -3.11024427e-01  2.81049550e-01
  1.43043548e-01 -1.74894422e-01  1.36338353e-01  3.50192487e-01
  4.02684882e-02 -1.91898242e-01  5.54281101e-03  2.52618790e-02
 -2.12286897e-02 -2.21436113e-01  2.08971679e-01 -2.94487290e-02
  1.66181266e-01 -2.26560175e-01  2.62550175e-01 -2.05232739e-01
  3.16279978e-01 -2.51948759e-02 -3.57578278e-01  2.86667764e-01
  4.61044848e-01 -2.17826217e-01 -2.49342754e-01 -3.17537598e-02
  1.34716511e-01 -1.21000931e-01 -4.53705758e-01  1.89689934e-01
 -1.93612322e-01  3.96315418e-02 -1.12166949e-01  1.31817952e-01
  1.03081837e-01 -2.97812402e-01 -2.51445919e-01 -5.16135134e-02
 -2.33642325e-01  5.59505105e-01 -1.55278832e-01  3.56077909e-01
  1.14135757e-01 -1.44485950e-01  2.87444592e-01  1.11993074e-01
  3.19527745e-01 -1.66381776e-01  7.62758702e-02  1.36508092e-01
 -2.08794147e-01 -2.58462191e-01  9.30526108e-02  8.85971710e-02
  2.22845048e-01 -5.97545505e-01  1.50231168e-01 -1.21176697e-01
  8.44650269e-01 -1.59335405e-01  4.36794102e-01  6.69571310e-02
 -1.50372475e-01 -9.53422785e-02  1.48762465e-01 -2.37327576e-01
 -3.97852749e-01  6.24604896e-02  1.48269832e-01  3.01826239e-01
  1.91917747e-01  1.69727340e-01  3.64920758e-02  8.32418166e-03
 -6.70821369e-02  2.28413865e-02 -3.34940374e-01  1.36356726e-01
 -1.28972620e-01  3.59588027e-01 -3.26396853e-01  1.05482742e-01
  1.36790909e-02 -1.34635508e-01  8.54736790e-02  4.72505569e-01
 -1.66575447e-01  4.45773482e-01 -1.16669782e-01  2.26580054e-01
  1.52554616e-01 -5.98072410e-02 -2.15277195e-01  4.16893184e-01
  4.63353954e-02 -2.40078300e-01  7.51905739e-02 -1.00748613e-01
  1.46416828e-01  2.73930311e-01  1.57778889e-01  2.18845010e-01
 -1.26141250e-01 -3.28584671e-01 -9.80103016e-02 -2.71752238e-01
 -1.59682393e-01  6.97921067e-02  2.02359855e-02  1.99851722e-01
  1.36116743e-01  2.77486425e-02  3.82231958e-02 -1.83857247e-01
 -2.28004575e-01 -1.03984281e-01  1.11789003e-01  2.87450347e-02
  2.04866856e-01 -2.98315108e-01 -9.89904553e-02 -9.89671797e-04
  1.46305874e-01  3.11064243e-01 -5.78350946e-02  3.86939198e-03
  2.36055523e-01 -1.42276078e-01  4.27751124e-01  1.01105124e-01
  3.41929525e-01 -1.25819236e-01 -3.94664377e-01 -3.14811975e-01
 -1.02990158e-01  2.24841293e-03 -2.37435997e-01 -2.20443130e-01
 -5.78546897e-03 -4.29471955e-02 -4.41250682e-01 -1.12117670e-01
  2.04520747e-01  1.17650881e-01 -1.12321526e-01  2.13201314e-01
 -1.75401896e-01  7.68360645e-02  7.03416094e-02  2.66698867e-01
 -5.03870130e-01  3.18235368e-01 -6.13531545e-02  9.32356110e-04
  4.44975495e-02  2.66501367e-01 -2.06673399e-01  3.03177714e-01
 -4.66722727e-01  5.90225980e-02 -2.23376118e-02 -3.71349156e-01
  1.75479911e-02  1.32610351e-01 -1.70833349e-01 -2.06586272e-01
 -9.48203355e-02  1.49830356e-01  2.48635545e-01 -8.17572325e-03
 -3.72853309e-01 -2.20715657e-01  1.35545611e-01 -4.82199416e-02
  2.31847614e-01  1.91196829e-01  3.80261719e-01 -1.72593400e-01
 -7.49430358e-01  1.56255916e-01  9.02702510e-02 -1.14527419e-01
 -8.99202898e-02  8.52873772e-02  2.46022582e-01 -2.73072161e-03
 -2.37545505e-01  1.42281771e-01  5.25789931e-02  1.56580731e-01
  4.00904715e-01  4.01595950e-01  4.44352329e-02 -8.37177560e-02
  3.83584201e-01  4.18244779e-01  1.41037852e-01  2.10266322e-01
  5.46321273e-01  1.71931386e-02 -9.67393965e-02  2.23627225e-01
  7.89397210e-02 -5.20252138e-02  2.87209421e-01  6.02905899e-02
  1.79636255e-01 -1.11516394e-01  3.43657315e-01 -3.46467614e-01
  7.84159452e-02 -6.69983685e-01 -2.26314515e-01 -3.68218750e-01
 -3.10599767e-02  1.25058740e-03  3.67753208e-01 -4.34410632e-01
 -8.42342824e-02  7.89696127e-02  2.74818361e-01 -5.88807344e-01
  2.59348333e-01  2.45583385e-01  5.28168559e-01 -4.94669199e-01
 -1.20513499e-01 -2.77301013e-01 -1.96134493e-01  2.01919347e-01
 -7.29897171e-02 -1.64442006e-02  2.61302292e-01  8.48215938e-01
 -1.23197302e-01  1.62266403e-01  1.85214043e-01  1.00493193e-01
  1.33819371e-01 -8.49590153e-02  5.58610559e-02  4.02726710e-01
  3.31776172e-01  6.73907399e-01  1.76184326e-02  6.01146668e-02
 -4.62118924e-01  1.87700495e-01 -2.46483594e-01 -2.62595892e-01
  8.75512362e-02  1.84387982e-01  6.14703707e-02 -1.08729489e-02
 -2.98793375e-01 -5.57221115e-01 -6.39809072e-02 -6.11168742e-02
  4.06381667e-01  4.60053653e-01 -3.77357572e-01 -5.73982894e-01
  2.29811147e-02  9.85736847e-02  3.16860005e-02 -1.26236752e-01
  1.32786781e-02  2.41121128e-01 -2.46426433e-01  6.93672448e-02
  3.25926155e-01  5.01077771e-01 -1.15917668e-01  3.80047739e-01
 -4.93161023e-01 -1.76963851e-01 -7.07776705e-03  2.53577560e-01
  2.61977941e-01 -4.06565398e-01  2.85316825e-01 -1.66998267e-01
  3.43577027e-01  2.72761941e-01  8.96630809e-02  4.72959243e-02
 -7.01348066e-01  3.41557339e-02 -2.57660180e-01  6.48206770e-02
 -1.01388641e-01 -5.66177607e-01  4.04955819e-03  2.00579017e-01
 -7.96482414e-02  1.99950635e-01 -2.28970513e-01 -2.44405031e-01
  1.69676170e-01  2.85567403e-01 -8.04253101e-01 -1.29785642e-01
  1.24110714e-01 -2.52286702e-01  7.52931610e-02 -2.63686419e-01
  4.54446375e-01  2.05791175e-01 -6.61321431e-02  6.01544201e-01
 -1.71650395e-01 -1.65176347e-01  4.94028740e-02 -9.53365117e-02
 -1.33244783e-01 -2.68725574e-01 -3.28865111e-01  1.03661902e-01
  2.51573235e-01  3.83947253e-01  8.62568542e-02  1.12070829e-01
  3.35916489e-01 -3.05169165e-01  2.48929560e-02 -2.88392067e-01
  9.47028473e-02  2.09496528e-01  1.67050660e-01  2.27521643e-01
  1.40938357e-01 -3.08970600e-01 -1.38860911e-01 -5.72977304e-01
  2.22108960e-01 -2.83383131e-01 -3.12902868e-01  3.16520691e-01
 -6.15202308e-01  2.75488168e-01 -1.68306947e-01  2.20145434e-01
  2.09597632e-01  5.18393517e-01  4.10988145e-02 -1.24696001e-01
  7.72369146e-01  1.12352237e-01 -8.66580382e-02 -5.58502257e-01
  3.03021729e-01  1.15737200e-01 -1.49201110e-01  2.95303434e-01
 -3.39581013e-01  4.69440341e-01 -1.78203553e-01 -7.73473606e-02
  5.49229205e-01  5.09338140e-01  3.83271948e-02 -8.66727531e-02
  2.23950684e-01  5.25075421e-02  5.71081638e-01 -9.44630876e-02
  9.01439786e-02  5.91167808e-03  3.07318240e-01  1.08539224e-01
  2.18994766e-01 -7.80003667e-01  3.44056129e-01  1.34871483e-01
 -8.79931450e-02  3.01058382e-01  9.08187747e-01 -1.43483996e-01
  2.97566131e-02 -2.92302877e-01 -2.20036283e-01 -1.74769625e-01
  2.22176164e-02  3.60999584e-01 -9.66691896e-02  3.73957194e-02
  1.55550033e-01 -4.10539657e-02  2.63465971e-01  9.31143463e-02
 -1.67826742e-01  2.25966275e-02  1.82825141e-02 -7.48078004e-02
  6.41379952e-02  5.51309101e-02  4.05315608e-01 -1.65954858e-01
 -1.10598519e-01  3.24827671e-01  1.26537830e-01 -1.09906077e-01
 -6.83373436e-02  9.61078778e-02  1.93905801e-01  9.00674611e-03
 -3.90951484e-01 -6.03498369e-02  3.11640948e-01 -4.63578515e-02
  1.51898414e-01 -9.00173783e-02 -1.56179905e-01  3.88129085e-01
 -1.53746530e-02  5.15984535e-01 -9.35726836e-02  2.70606875e-01
  2.27244839e-01 -3.27718973e-01 -3.00812900e-01 -4.42381680e-01
  2.57137537e-01 -3.98366928e-01 -6.71232939e-02 -3.45054328e-01
  1.03984557e-01  1.48173332e-01  1.30990192e-01 -5.67694604e-02
 -1.58906788e-01 -5.52060485e-01 -4.79770184e-01 -1.29548535e-02
 -7.14262128e-02 -1.65990308e-01  2.95076668e-01 -2.78471172e-01
  6.19315624e-01 -2.16498617e-02  3.64686877e-01 -3.40046622e-02
  7.39320368e-03  1.23933613e-01  3.94098938e-01  1.68054268e-01
  3.11371118e-01  1.30106539e-01  4.41141576e-01  7.47542363e-03]"
Linear Algebra,"Linear Algebra ¶ Vectors Notation Vectors in geometry Scalar operations Elementwise operations Dot product Hadamard product Vector fields Matrices Dimensions Scalar operations Elementwise operations Hadamard product Matrix transpose Matrix multiplication Test yourself Numpy Dot product Broadcasting Linear algebra is a mathematical toolbox that offers helpful techniques for manipulating groups of numbers simultaneously. It provides structures like vectors and matrices (spreadsheets) to hold these numbers and new rules for how to add, subtract, multiply, and divide them. Here is a brief overview of basic linear algebra concepts taken from my linear algebra post on Medium. Vectors ¶ Vectors are 1-dimensional arrays of numbers or terms. In geometry, vectors store the magnitude and direction of a potential change to a point. The vector [3, -2] says go right 3 and down 2. A vector with more than one dimension is called a matrix. Notation ¶ There are a variety of ways to represent vectors. Here are a few you might come across in your reading. \[\begin{split}v = \begin{bmatrix} 1 \\ 2 \\ 3 \\ \end{bmatrix} = \begin{pmatrix} 1 \\ 2 \\ 3 \\ \end{pmatrix} = \begin{bmatrix} 1 & 2 & 3\\ \end{bmatrix}\end{split}\] Vectors in geometry ¶ Vectors typically represent movement from a point. They store both the magnitude and direction of potential changes to a point. The vector [-2,5] says move left 2 units and up 5 units [1] . A vector can be applied to any point in space. The vector’s direction equals the slope of the hypotenuse created moving up 5 and left 2. Its magnitude equals the length of the hypotenuse. Scalar operations ¶ Scalar operations involve a vector and a number. You modify the vector in-place by adding, subtracting, or multiplying the number from all the values in the vector. \[\begin{split}\begin{bmatrix} 2 \\ 2 \\ 2 \\ \end{bmatrix} + 1 = \begin{bmatrix} 3 \\ 3 \\ 3 \\ \end{bmatrix}\end{split}\] Elementwise operations ¶ In elementwise operations like addition, subtraction, and division, values that correspond positionally are combined to produce a new vector. The 1st value in vector A is paired with the 1st value in vector B. The 2nd value is paired with the 2nd, and so on. This means the vectors must have equal dimensions to complete the operation.* \[\begin{split}\begin{bmatrix} a_1 \\ a_2 \\ \end{bmatrix} + \begin{bmatrix} b_1 \\ b_2 \\ \end{bmatrix} = \begin{bmatrix} a_1+b_1 \\ a_2+b_2 \\ \end{bmatrix}\end{split}\] y = np . array ([ 1 , 2 , 3 ]) x = np . array ([ 2 , 3 , 4 ]) y + x = [ 3 , 5 , 7 ] y - x = [ - 1 , - 1 , - 1 ] y / x = [ . 5 , . 67 , . 75 ] See below for details on broadcasting in numpy. Dot product ¶ The dot product of two vectors is a scalar. Dot product of vectors and matrices (matrix multiplication) is one of the most important operations in deep learning. \[\begin{split}\begin{bmatrix} a_1 \\ a_2 \\ \end{bmatrix} \cdot \begin{bmatrix} b_1 \\ b_2 \\ \end{bmatrix} = a_1 b_1+a_2 b_2\end{split}\] y = np . array ([ 1 , 2 , 3 ]) x = np . array ([ 2 , 3 , 4 ]) np . dot ( y , x ) = 20 Hadamard product ¶ Hadamard Product is elementwise multiplication and it outputs a vector. \[\begin{split}\begin{bmatrix} a_1 \\ a_2 \\ \end{bmatrix} \odot \begin{bmatrix} b_1 \\ b_2 \\ \end{bmatrix} = \begin{bmatrix} a_1 \cdot b_1 \\ a_2 \cdot b_2 \\ \end{bmatrix}\end{split}\] y = np . array ([ 1 , 2 , 3 ]) x = np . array ([ 2 , 3 , 4 ]) y * x = [ 2 , 6 , 12 ] Vector fields ¶ A vector field shows how far the point (x,y) would hypothetically move if we applied a vector function to it like addition or multiplication. Given a point in space, a vector field shows the power and direction of our proposed change at a variety of points in a graph [2] . This vector field is an interesting one since it moves in different directions depending the starting point. The reason is that the vector behind this field stores terms like \(2x\) or \(x^2\) instead of scalar values like -2 and 5. For each point on the graph, we plug the x-coordinate into \(2x\) or \(x^2\) and draw an arrow from the starting point to the new location. Vector fields are extremely useful for visualizing machine learning techniques like Gradient Descent. Matrices ¶ A matrix is a rectangular grid of numbers or terms (like an Excel spreadsheet) with special rules for addition, subtraction, and multiplication. Dimensions ¶ We describe the dimensions of a matrix in terms of rows by columns. \[\begin{split}\begin{bmatrix} 2 & 4 \\ 5 & -7 \\ 12 & 5 \\ \end{bmatrix} \begin{bmatrix} a² & 2a & 8\\ 18 & 7a-4 & 10\\ \end{bmatrix}\end{split}\] The first has dimensions (3,2). The second (2,3). a = np . array ([ [ 1 , 2 , 3 ], [ 4 , 5 , 6 ] ]) a . shape == ( 2 , 3 ) b = np . array ([ [ 1 , 2 , 3 ] ]) b . shape == ( 1 , 3 ) Scalar operations ¶ Scalar operations with matrices work the same way as they do for vectors. Simply apply the scalar to every element in the matrix — add, subtract, divide, multiply, etc. \[\begin{split}\begin{bmatrix} 2 & 3 \\ 2 & 3 \\ 2 & 3 \\ \end{bmatrix} + 1 = \begin{bmatrix} 3 & 4 \\ 3 & 4 \\ 3 & 4 \\ \end{bmatrix}\end{split}\] # Addition a = np . array ( [[ 1 , 2 ], [ 3 , 4 ]]) a + 1 [[ 2 , 3 ], [ 4 , 5 ]] Elementwise operations ¶ In order to add, subtract, or divide two matrices they must have equal dimensions. We combine corresponding values in an elementwise fashion to produce a new matrix. \[\begin{split}\begin{bmatrix} a & b \\ c & d \\ \end{bmatrix} + \begin{bmatrix} 1 & 2\\ 3 & 4 \\ \end{bmatrix} = \begin{bmatrix} a+1 & b+2\\ c+3 & d+4 \\ \end{bmatrix}\end{split}\] a = np.array([ [1,2], [3,4]]) b = np.array([ [1,2], [3,4]]) a + b [[2, 4], [6, 8]] a — b [[0, 0], [0, 0]] Hadamard product ¶ Hadamard product of matrices is an elementwise operation. Values that correspond positionally are multiplied to produce a new matrix. \[\begin{split}\begin{bmatrix} a_1 & a_2 \\ a_3 & a_4 \\ \end{bmatrix} \odot \begin{bmatrix} b_1 & b_2 \\ b_3 & b_4 \\ \end{bmatrix} = \begin{bmatrix} a_1 \cdot b_1 & a_2 \cdot b_2 \\ a_3 \cdot b_3 & a_4 \cdot b_4 \\ \end{bmatrix}\end{split}\] a = np . array ( [[ 2 , 3 ], [ 2 , 3 ]]) b = np . array ( [[ 3 , 4 ], [ 5 , 6 ]]) # Uses python's multiply operator a * b [[ 6 , 12 ], [ 10 , 18 ]] In numpy you can take the Hadamard product of a matrix and vector as long as their dimensions meet the requirements of broadcasting. \[\begin{split}\begin{bmatrix} {a_1} \\ {a_2} \\ \end{bmatrix} \odot \begin{bmatrix} b_1 & b_2 \\ b_3 & b_4 \\ \end{bmatrix} = \begin{bmatrix} a_1 \cdot b_1 & a_1 \cdot b_2 \\ a_2 \cdot b_3 & a_2 \cdot b_4 \\ \end{bmatrix}\end{split}\] Matrix transpose ¶ Neural networks frequently process weights and inputs of different sizes where the dimensions do not meet the requirements of matrix multiplication. Matrix transposition (often denoted by a superscript ‘T’ e.g. M^T) provides a way to “rotate” one of the matrices so that the operation complies with multiplication requirements and can continue. There are two steps to transpose a matrix: Rotate the matrix right 90° Reverse the order of elements in each row (e.g. [a b c] becomes [c b a]) As an example, transpose matrix M into T: \[\begin{split}\begin{bmatrix} a & b \\ c & d \\ e & f \\ \end{bmatrix} \quad \Rightarrow \quad \begin{bmatrix} a & c & e \\ b & d & f \\ \end{bmatrix}\end{split}\] a = np . array ([ [ 1 , 2 ], [ 3 , 4 ]]) a . T [[ 1 , 3 ], [ 2 , 4 ]] Matrix multiplication ¶ Matrix multiplication specifies a set of rules for multiplying matrices together to produce a new matrix. Rules Not all matrices are eligible for multiplication. In addition, there is a requirement on the dimensions of the resulting matrix output. Source. The number of columns of the 1st matrix must equal the number of rows of the 2nd The product of an M x N matrix and an N x K matrix is an M x K matrix. The new matrix takes the rows of the 1st and columns of the 2nd Steps Matrix multiplication relies on dot product to multiply various combinations of rows and columns. In the image below, taken from Khan Academy’s excellent linear algebra course, each entry in Matrix C is the dot product of a row in matrix A and a column in matrix B [3] . The operation a1 · b1 means we take the dot product of the 1st row in matrix A (1, 7) and the 1st column in matrix B (3, 5). \[\begin{split}a_1 \cdot b_1 = \begin{bmatrix} 1 \\ 7 \\ \end{bmatrix} \cdot \begin{bmatrix} 3 \\ 5 \\ \end{bmatrix} = (1 \cdot 3) + (7 \cdot 5) = 38\end{split}\] Here’s another way to look at it: \[\begin{split}\begin{bmatrix} a & b \\ c & d \\ e & f \\ \end{bmatrix} \cdot \begin{bmatrix} 1 & 2 \\ 3 & 4 \\ \end{bmatrix} = \begin{bmatrix} 1a + 3b & 2a + 4b \\ 1c + 3d & 2c + 4d \\ 1e + 3f & 2e + 4f \\ \end{bmatrix}\end{split}\] Test yourself ¶ What are the dimensions of the matrix product? \[\begin{split}\begin{bmatrix} 1 & 2 \\ 5 & 6 \\ \end{bmatrix} \cdot \begin{bmatrix} 1 & 2 & 3 \\ 5 & 6 & 7 \\ \end{bmatrix} = \text{2 x 3}\end{split}\] What are the dimensions of the matrix product? \[\begin{split}\begin{bmatrix} 1 & 2 & 3 & 4 \\ 5 & 6 & 7 & 8 \\ 9 & 10 & 11 & 12 \\ \end{bmatrix} \cdot \begin{bmatrix} 1 & 2 \\ 5 & 6 \\ 3 & 0 \\ 2 & 1 \\ \end{bmatrix} = \text{3 x 2}\end{split}\] What is the matrix product? \[\begin{split}\begin{bmatrix} 2 & 3 \\ 1 & 4 \\ \end{bmatrix} \cdot \begin{bmatrix} 5 & 4 \\ 3 & 5 \\ \end{bmatrix} = \begin{bmatrix} 19 & 23 \\ 17 & 24 \\ \end{bmatrix}\end{split}\] What is the matrix product?} \[\begin{split}\begin{bmatrix} 3 \\ 5 \\ \end{bmatrix} \cdot \begin{bmatrix} 1 & 2 & 3\\ \end{bmatrix} = \begin{bmatrix} 3 & 6 & 9 \\ 5 & 10 & 15 \\ \end{bmatrix}\end{split}\] What is the matrix product? \[\begin{split}\begin{bmatrix} 1 & 2 & 3\\ \end{bmatrix} \cdot \begin{bmatrix} 4 \\ 5 \\ 6 \\ \end{bmatrix} = \begin{bmatrix} 32 \\ \end{bmatrix}\end{split}\] Numpy ¶ Dot product ¶ Numpy uses the function np.dot(A,B) for both vector and matrix multiplication. It has some other interesting features and gotchas so I encourage you to read the documentation here before use. Also, to multiply two matrices A and B, you can use the expression A @ B. a = np . array ([ [ 1 , 2 ] ]) a . shape == ( 1 , 2 ) b = np . array ([ [ 3 , 4 ], [ 5 , 6 ] ]) b . shape == ( 2 , 2 ) # Multiply mm = np . dot ( a , b ) # or a @ b mm == [ 13 , 16 ] mm . shape == ( 1 , 2 ) Broadcasting ¶ In numpy the dimension requirements for elementwise operations are relaxed via a mechanism called broadcasting. Two matrices are compatible if the corresponding dimensions in each matrix (rows vs rows, columns vs columns) meet the following requirements: The dimensions are equal, or One dimension is of size 1 a = np . array ([ [ 1 ], [ 2 ] ]) b = np . array ([ [ 3 , 4 ], [ 5 , 6 ] ]) c = np . array ([ [ 1 , 2 ] ]) # Same no. of rows # Different no. of columns # but a has one column so this works a * b [[ 3 , 4 ], [ 10 , 12 ]] # Same no. of columns # Different no. of rows # but c has one row so this works b * c [[ 3 , 8 ], [ 5 , 12 ]] # Different no. of columns # Different no. of rows # but both a and c meet the # size 1 requirement rule a + c [[ 2 , 3 ], [ 3 , 4 ]] Tutorials Khan Academy Linear Algebra Deep Learning Book Math Andrew Ng Course Notes Linear Algebra Better Explained Understanding Matrices Intuitively Intro To Linear Algebra Immersive Math References [1] http://mathinsight.org/vector_introduction [2] https://en.wikipedia.org/wiki/Vector_field [3] https://www.khanacademy.org/math/precalculus/precalc-matrices/properties-of-matrix-multiplication/a/properties-of-matrix-multiplication","[-2.12479442e-01  2.10269749e-01 -6.30163550e-02  5.79860449e-01
  1.70558095e-01  4.07923520e-01 -8.21485966e-02  2.18660265e-01
  1.13131076e-01  1.44363642e-01  1.04360327e-01 -1.25352085e-01
  1.87417701e-01  1.29173473e-01 -2.58521914e-01  1.29884705e-01
 -1.61672190e-01  1.10900939e-01  2.21855700e-01 -7.25218207e-02
 -5.85469007e-02 -3.00324857e-01 -4.45110500e-01 -4.41606849e-01
  5.00901341e-01  4.66234684e-01  1.92193612e-01  1.02476917e-01
  1.27475291e-01 -3.77940834e-01 -1.18032746e-01 -9.80426595e-02
 -4.83711548e-02  1.96915697e-02  2.07263276e-01  1.76917762e-01
 -1.07980259e-01  1.64963916e-01 -1.11453071e-01 -2.18629658e-01
  3.53566945e-01  3.52396190e-01 -2.03503281e-01  5.28097570e-01
 -3.72586213e-02 -8.37158859e-02 -7.74392903e-01  3.01082551e-01
 -2.01718524e-01  3.09105217e-01  6.21432364e-02  2.41500676e-01
 -1.87344588e-02 -2.06693396e-01  1.13779724e-01  1.23805106e-01
  3.90314423e-02 -5.81124425e-01 -6.48198202e-02  5.17448410e-02
 -1.12385349e-02  1.49017453e-01 -3.24289590e-01  1.02373528e+00
  1.52558804e-01 -4.25115734e-01  1.94789469e-01  6.02585733e-01
 -5.87060153e-02  9.09807608e-02 -6.40655041e-01 -3.96627843e-01
  1.67671233e-01 -6.54288590e-01 -1.66529976e-02  8.47178847e-02
 -1.93557024e-01 -1.42857254e-01 -3.29797745e-01  1.32332742e-01
  5.85920503e-03  2.71191418e-01  1.73483714e-01 -8.27354640e-02
  3.49632502e-01 -3.46730649e-01 -1.01175666e-01 -4.29683030e-01
  3.95248905e-02  4.43264581e-02 -3.36621106e-02 -2.56746411e-01
 -2.47197121e-01 -3.01823974e-01  1.94808975e-01  1.72679275e-01
 -2.54803389e-01 -4.60011363e-01  6.53741062e-02 -2.94577301e-01
  8.51968229e-01 -1.60390645e-01 -2.41066948e-01  4.63296808e-02
  9.05234218e-02  6.68337226e-01 -2.62397915e-01  9.96988416e-02
 -3.35705578e-01 -7.67460614e-02 -1.42419204e-01 -3.79847676e-01
 -8.30310211e-02 -1.65137947e-01 -3.32383513e-01 -3.78369570e-01
  1.69059724e-01 -9.58371907e-02  1.26691774e-01  4.55397129e-01
 -1.42741129e-01  3.49377096e-02 -7.19862700e-01  5.21711588e-01
 -4.78301406e-01 -5.48590422e-01  3.50315809e-01 -1.98879503e-02
 -5.60718402e-03  4.83239830e-01  5.51809818e-02  2.09873199e-01
 -2.44316235e-01 -5.13906777e-01 -8.21340829e-02 -3.81050743e-02
  1.19620390e-01 -5.43884374e-02  1.16920406e-02  3.28934580e-01
 -1.08054057e-01  3.92046809e-01  3.36697876e-01  1.37893453e-01
 -2.79279724e-02  4.90123481e-02 -1.49430096e-01 -6.22253194e-02
  4.54497695e-01  2.90378153e-01 -1.94783844e-02  3.62876475e-01
  3.44603360e-01 -3.04984927e-01 -1.32840499e-01  1.88013524e-01
  9.91029665e-03 -4.72116888e-01  1.65836550e-02 -3.33536029e-01
  1.63529307e-01  3.71330559e-01 -1.43045336e-02 -2.32640997e-01
 -1.00636333e-01 -1.94127589e-01 -1.55341148e-01 -5.15031330e-02
 -2.07263276e-01  9.86281782e-02  1.99573748e-02  3.51357758e-01
 -1.53411984e-01 -5.78746237e-02 -3.72305810e-01  4.65756617e-02
 -3.05106699e-01  3.79981026e-02  1.38060912e-01  1.38768032e-01
 -2.26960480e-02 -6.31532073e-02  4.18987274e-01  1.15987949e-01
  2.32405901e-01  1.25703663e-02 -4.10763770e-02  2.02280730e-01
 -1.84337422e-01 -2.06955463e-01 -2.81841040e-01  8.17656517e-02
 -2.84853399e-01  2.08145201e-01  1.84529386e-02  4.34414029e-01
  5.12667596e-01  1.44231603e-01 -1.88903838e-01 -3.55238497e-01
 -1.52562708e-01 -1.55705571e-01  1.78786904e-01 -2.51597036e-02
 -3.40961367e-01 -4.08545703e-01 -6.50350332e-01 -6.75239135e-03
  2.38626808e-01  4.12593074e-02 -2.51956284e-01  6.08901978e-01
 -1.33645028e-01  8.00159335e-01 -1.08449161e-01 -3.16475034e-01
  1.34037614e-01  5.21305203e-01  3.62826765e-01 -1.35338008e-01
  1.77086860e-01  2.99990773e-01  1.40281394e-01  3.91983204e-02
  2.23078996e-01 -3.55063826e-01  8.71002674e-02  1.37526356e-03
  6.11749142e-02 -2.19932213e-01  4.37675528e-02  3.20780009e-01
 -2.06416428e-01  4.10200935e-03 -2.68475831e-01  8.46073180e-02
  1.69552304e-02  1.56888336e-01  1.74039140e-01 -4.88588251e-02
  6.43756539e-02 -3.18452895e-01 -1.35449603e-01  2.15104505e-01
  4.09566127e-02  1.92209363e-01 -1.18436292e-04 -4.28476006e-01
 -2.05695719e-01 -7.03252554e-01  2.27164790e-01  2.72134781e-01
  5.60280085e-02  1.05673969e-01  8.29035819e-01 -2.36320168e-01
 -8.24465603e-02  6.88880533e-02  4.31794971e-02  3.50658149e-02
 -3.85763526e-01 -2.62758434e-01 -5.16118035e-02  2.46887907e-01
 -8.31698179e-02  9.48305055e-03 -9.66946036e-02  4.41702753e-02
 -3.07883434e-02 -2.85626464e-02 -1.75912246e-01 -8.20395350e-02
  2.47400880e-01  1.48574501e-01  1.81966186e-01  2.38366574e-01
  3.81895781e-01 -1.44546190e-02  4.92531866e-01  2.52492487e-01
  4.67826784e-01  8.48582536e-02 -6.78820252e-01 -3.22716624e-01
  2.49654539e-02 -1.33934207e-02 -1.09496191e-02  4.76976186e-02
 -3.72433737e-02 -2.31566444e-01  8.48786533e-02 -5.07445991e-01
  2.48504896e-02  2.49870062e-01 -2.41974443e-01  2.90958613e-01
  7.85581097e-02  2.17225686e-01  1.37513578e-01 -2.61789024e-01
  1.04436383e-01 -1.60136521e-02  3.71272676e-02  1.60398453e-01
 -1.93415523e-01 -1.11823276e-01 -4.69058901e-01  1.52366832e-01
 -2.57595479e-01 -5.60073376e-01 -1.29442677e-01  1.87953338e-01
  4.46231306e-01 -8.31558648e-03  8.59713703e-02  2.39532202e-01
 -3.66068333e-02  2.35594124e-01 -3.11940491e-01 -8.96030217e-02
  1.35290608e-01  2.24779516e-01 -2.84903981e-02  2.27658227e-01
 -3.01096141e-02 -8.42866600e-02  1.47280525e-02  5.42030260e-02
 -1.60964206e-03 -2.83381760e-01  8.60808134e-01  1.70336455e-01
  3.10814261e-01  7.40312040e-03  1.08790211e-01 -4.99355018e-01
  2.85493821e-01 -1.77480385e-01 -1.33637086e-01  2.44228661e-01
  4.40348625e-01  2.09494501e-01 -5.60060024e-01  4.16273512e-02
 -2.60816544e-01  8.40788931e-02 -2.43918478e-01  2.83197433e-01
  4.14050231e-03 -7.34836012e-02  1.13449484e-01 -6.38042092e-02
 -3.03570852e-02  4.65691149e-01 -1.11879274e-01  8.31189603e-02
 -5.31293154e-01  2.34145820e-01 -1.49538875e-01 -5.98795712e-02
  4.06271696e-01 -6.16915077e-02  1.98136330e-01  2.34261081e-01
  1.28463954e-01 -1.68887973e-01 -3.14108193e-01  1.49453074e-01
 -5.83977029e-02 -3.64969432e-01  5.01701683e-02 -2.44936496e-01
  2.38469318e-01  2.32073396e-01  4.13255930e-01  1.66231450e-02
  5.93751669e-01  1.08623065e-01  3.72841954e-04  2.83956319e-01
 -2.42934942e-01  1.64251387e-01 -1.81465238e-01 -1.35512918e-01
  4.65719625e-02  2.42110103e-01 -1.48251444e-01  2.68468976e-01
  2.11116761e-01 -6.11521304e-04  1.06042445e-01 -3.02645653e-01
 -1.14536658e-01 -1.41232580e-01 -1.26371324e-01 -4.38108668e-03
 -4.65183221e-02 -3.25176001e-01  6.87371269e-02  2.02985734e-01
  1.78008914e-01 -2.38009200e-01 -6.44911900e-02  3.45748365e-01
  5.96874915e-02  3.57830048e-01  3.87453228e-01  2.69195676e-01
  1.54727906e-01 -3.17232683e-02 -3.64047110e-01  1.99287221e-01
 -2.87048053e-02 -2.89296620e-02  3.70302975e-01 -8.36625323e-03
  7.29186162e-02  1.70759186e-02 -8.48309845e-02 -8.07054937e-02
 -1.48600206e-01 -4.25794840e-01 -3.45141664e-02 -1.27728790e-01
 -3.90184879e-01  3.17429245e-01  1.46706328e-01  1.37473986e-01
 -5.69679976e-01  1.11861955e-02  1.09639809e-01 -2.78282519e-02
  2.21418038e-01  2.05531418e-01  1.18554190e-01  2.14335218e-01
  9.99965668e-02 -1.57297179e-01 -6.29444420e-02 -1.38134450e-01
  4.82485116e-01  1.79508895e-01 -1.09023832e-01  9.98032317e-02
 -3.26398462e-02 -1.12366721e-01 -1.46672070e-01  1.00756429e-01
 -2.59094685e-02  6.45427331e-02 -8.48554820e-02 -7.69810915e-01
  8.48992839e-02 -1.24506757e-01  1.02692610e-02 -2.13669240e-01
  1.63836211e-01  3.00052576e-02 -3.41577798e-01  1.03535630e-01
  8.98987651e-02  1.59761980e-01 -3.40457916e-01  2.34403178e-01
 -2.44169325e-01  1.99374527e-01  3.22220437e-02  2.42422521e-01
 -6.13555193e-01  1.90017045e-01  1.04964271e-01 -5.39198890e-02
  1.54716283e-01 -1.89262003e-01  6.48420006e-02  3.34790587e-01
 -7.25265503e-01  3.31615023e-02  2.82971710e-01 -3.47118944e-01
  2.21998557e-01  1.80763006e-01 -1.58000737e-03 -1.89185083e-01
 -6.34248853e-02  2.12091014e-01  1.11436799e-01  1.78026319e-01
  9.56639200e-02  5.47634438e-02  1.88080937e-01  1.51480455e-02
  3.14892799e-01  5.29359058e-02  6.11398101e-01 -2.86914736e-01
 -4.92245853e-01 -3.33194256e-01 -4.94120538e-01  1.65450498e-02
  5.97057752e-02  1.27705216e-01 -1.57387227e-01  1.25216246e-01
 -5.02562448e-02  3.59667122e-01 -1.91114232e-01  2.02725053e-01
  5.11876345e-02  1.00259610e-01 -5.49335442e-02  2.51756251e-01
 -1.68372840e-01  2.97622323e-01  5.93847074e-02  4.37332988e-01
  2.73933023e-01 -1.27721906e-01 -1.38376072e-01  7.81680703e-01
  8.83023366e-02  1.10680610e-01  1.74718767e-01  1.34708673e-01
  4.43108439e-01 -1.08834349e-01 -1.73732519e-01  1.66543871e-01
  3.11305523e-01 -4.30061728e-01 -1.61222547e-01 -4.83252779e-02
 -2.05567032e-02 -2.46247500e-02  2.06379712e-01 -5.64206950e-02
  2.99610734e-01 -5.40207922e-02  2.38715202e-01 -2.36803249e-01
  7.08690166e-01  1.56599969e-01  4.69047487e-01 -3.01566660e-01
 -1.62640512e-01 -3.78190130e-01  5.25964260e-01  1.48010701e-01
  5.76425344e-02  3.36236715e-01 -1.21970885e-01  7.44473219e-01
 -2.81001955e-01  2.61157844e-02  8.07812810e-02 -3.39329466e-02
  1.29660338e-01 -1.49946868e-01 -6.64194301e-02 -2.05320567e-01
 -1.27355531e-01  7.00418115e-01  8.02051276e-02  4.13670912e-02
 -1.09249122e-01  4.54230141e-03 -8.89212918e-03 -3.48074526e-01
  1.38426423e-01  3.41395706e-01  6.02054298e-02  2.22463757e-01
 -3.46834064e-01 -4.57878768e-01 -3.46290588e-01  1.55451283e-01
  4.74250972e-01  4.08881307e-01 -4.42526758e-01 -1.15388088e-01
 -3.78607929e-01  7.84294903e-02 -2.83205420e-01  1.74565315e-01
 -1.84280574e-01  1.30648002e-01 -2.85338163e-01  5.45271579e-03
  7.17176497e-03  1.91153213e-01 -9.18091275e-03 -8.89593959e-02
 -2.39403233e-01 -1.37951285e-01 -2.28966922e-01  4.93760049e-01
  1.34121493e-01 -5.02686910e-02  1.62897199e-01  2.57918119e-01
  6.18625432e-02  1.32482320e-01  1.25022233e-03 -7.24985451e-03
 -6.08699441e-01 -9.38455909e-02 -2.35843137e-01  8.11374187e-02
 -2.24633992e-01 -4.17574823e-01 -1.01388872e-01  2.53503323e-01
 -1.19366385e-01  2.76994314e-02 -4.77579594e-01 -1.32645667e-01
  1.52584255e-01 -1.00458652e-01 -3.24938953e-01 -7.10101426e-02
  3.21498394e-01 -7.21852332e-02 -1.09670520e-01 -8.54445919e-02
 -1.63643777e-01  4.37494740e-02 -5.36243431e-03  2.96970308e-01
  2.25957874e-02  4.94740717e-02  2.11371988e-01 -1.65354148e-01
  5.04562408e-02 -3.65498096e-01 -4.41150427e-01  6.14069402e-02
  3.88022542e-01  1.46507099e-01 -9.53202173e-02  5.35631850e-02
  1.57014996e-01 -4.11067367e-01 -7.98914507e-02 -1.48227721e-01
 -5.62413707e-02  2.93895960e-01  2.58347422e-01 -2.76770711e-01
 -2.56690651e-01  3.33622396e-02  3.04244101e-01 -1.93074897e-01
  5.54465234e-01 -5.83100438e-01 -1.64526939e-01  2.44374663e-01
  1.01743609e-01  3.04367840e-01 -5.18845022e-01  5.34954309e-01
  4.69525963e-01  4.52823520e-01  3.19316894e-01 -5.60575053e-02
  3.76580536e-01 -3.59677076e-01 -1.72183365e-02 -3.61181617e-01
 -1.84914738e-01  1.47586882e-01 -4.37162668e-01  5.86758733e-01
 -5.69869280e-01  1.26908749e-01 -2.58271575e-01 -1.97092146e-01
  2.64441103e-01  3.35692883e-01  1.46393284e-01  1.58659462e-03
  1.19868197e-01  2.59564370e-02  4.52067196e-01  2.35472210e-02
  3.35816056e-01 -1.22160472e-01  7.68257901e-02  2.17928186e-01
  3.00899781e-02 -6.77596450e-01 -1.22589678e-01  3.07592154e-01
 -2.56667018e-01  1.90273657e-01 -4.67127934e-03  1.11456200e-01
 -2.17076331e-01 -3.29144001e-02 -1.76007986e-01 -9.05948281e-02
 -3.51213396e-01  3.18195879e-01  4.27634120e-01 -1.56980470e-01
  1.52178138e-01  7.92588890e-02  4.38471735e-01 -1.68580428e-01
  8.48930627e-02 -1.96514606e-01 -1.34950224e-02 -1.80318415e-01
 -4.15970311e-02  7.93768559e-03 -1.36557072e-01 -2.42792293e-01
  5.76825514e-02  2.94075489e-01  5.18254280e-01  2.15717852e-01
 -2.32589915e-02 -2.09433451e-01  1.31530523e-01  2.13888690e-01
  4.96246144e-02  2.35326082e-01  3.18460763e-01 -2.94512391e-01
 -4.43294466e-01 -2.32636511e-01  1.51619017e-01  2.66376764e-01
  2.16764566e-02  3.11119258e-01  6.72623888e-02  5.82037210e-01
  7.26691782e-02 -5.50139584e-02 -2.30221480e-01 -7.85277486e-01
  2.68079519e-01 -2.36928001e-01  5.11452615e-01 -3.33067060e-01
  2.36617476e-01  4.32617962e-03 -2.97173381e-01  7.83532858e-03
 -5.47968209e-01 -4.92826641e-01  5.46552360e-01  1.83825679e-02
 -2.04262156e-02  1.91256642e-01 -2.13860959e-01 -4.58826721e-01
  6.20749235e-01  1.27603812e-02 -1.49175763e-01 -2.41707452e-02
  3.25916648e-01  1.99204192e-01 -9.86497104e-02  8.99994150e-02
  5.73033154e-01  1.32616729e-01  3.25587541e-01  3.06711718e-02]"
Probability (TODO),"Probability ¶ Links Screenshots License Basic concepts in probability for machine learning. This cheatsheet is a 10-page reference in probability that covers a semester’s worth of introductory probability. The cheatsheet is based off of Harvard’s introductory probability course, Stat 110. It is co-authored by former Stat 110 Teaching Fellow William Chen and Stat 110 Professor Joe Blitzstein. Links ¶ [Probability Cheatsheet PDF]( http://www.wzchen.com/probability-cheatsheet/ ) Screenshots ¶ ![First Page]( http://i.imgur.com/Oa73huL.jpg ) ![Second Page]( http://i.imgur.com/dyvW2rB.jpg ) License ¶ This work is licensed under a [Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License.][by-nc-sa]. [![Creative Commons License][by-nc-sa-img]][by-nc-sa] References [1] Example","[ 8.62445831e-02 -1.67218149e-01 -9.28498209e-02  3.83014500e-01
  1.73868269e-01  3.65009367e-01 -7.19332397e-02  1.34255648e-01
  1.30132273e-01  1.98098384e-02 -5.28684407e-02  6.57107681e-02
  3.23951781e-01  4.79521632e-01  9.75900590e-02 -5.37594676e-01
 -6.23660624e-01  9.59113389e-02  1.89338960e-02 -8.92496943e-01
  1.05343387e-02  9.26702172e-02  1.12692192e-01 -6.50482357e-01
  2.44197667e-01  4.00226444e-01  5.43927886e-02 -1.85515255e-01
  3.92996788e-01 -5.67092776e-01  3.85203362e-02 -2.29315627e-02
  2.19157562e-02  4.24775571e-01  3.03179864e-02  4.62283343e-01
 -3.07368860e-02 -8.56015906e-02 -3.50889266e-01  1.55271962e-01
  2.48242557e-01  1.96390092e-01 -3.56418610e-01  1.03452533e-01
  2.51420677e-01 -6.80356100e-02 -3.23867500e-01  3.39517951e-01
  3.31041142e-02  2.96011847e-02  3.37828755e-01 -1.05369970e-01
  2.40824416e-01  6.43891022e-02  1.58603519e-01  1.52694672e-01
  2.29450971e-01 -5.83622575e-01 -1.46112114e-01  3.34980130e-01
 -3.27076256e-01 -3.21323484e-01  2.66748480e-02  5.19277036e-01
  1.64117247e-01 -1.16293319e-01  2.52190977e-01  2.67761588e-01
  1.00014843e-02 -3.16365629e-01 -1.47566840e-01 -4.41702381e-02
 -3.06945711e-01 -3.48684281e-01 -3.08313280e-01 -7.87553549e-01
  1.55074457e-02 -1.20627493e-01 -3.19662467e-02  6.09055519e-01
 -2.57701457e-01  2.11125851e-01  8.11957344e-02  4.41766471e-01
  4.93118107e-01 -2.60383427e-01 -1.23551279e-01  4.39405560e-01
  3.41479957e-01  3.25702310e-01 -4.01743263e-01 -1.59003109e-01
 -4.07297239e-02 -1.41790822e-01 -2.99480021e-01  1.58084705e-01
 -2.88517237e-01  1.77935809e-01 -1.28038198e-01  4.49136615e-01
 -7.46020675e-02 -7.07520768e-02  3.55591476e-01 -4.17477667e-01
  3.12601268e-01  4.42313313e-01 -3.02274346e-01  2.16923326e-01
  1.01340756e-01 -2.32130233e-02 -3.31323832e-01  3.25416982e-01
 -9.04618204e-02 -2.63528943e-01 -7.29464740e-02 -9.15934741e-02
  1.33652076e-01  4.95645925e-02 -1.07512385e-01 -3.21556777e-01
 -1.05050355e-02  1.89679608e-01 -6.45788074e-01  9.87730920e-02
 -1.32686660e-01  3.46794724e-01  9.84056294e-02  1.11767277e-01
  1.50967702e-01  2.33298808e-01  2.12941170e-01 -8.35599542e-01
 -7.45422840e-02  5.05556241e-02 -3.80102932e-01 -4.30793650e-02
  3.63314785e-02  2.25873604e-01 -1.50718912e-01  3.19469243e-01
 -9.50758532e-02  1.45012885e-01 -1.35919839e-01  9.32123512e-03
  2.14001119e-01  1.49077356e-01 -5.63620627e-02  1.70649543e-01
  8.40904653e-01 -1.80846781e-01  2.35393479e-01  3.95777337e-02
  7.02360570e-02 -3.93388033e-01 -1.54702425e-01  1.01257987e-01
 -2.93524504e-01 -6.63920879e-01  2.39904404e-01  6.35980889e-02
  3.87763143e-01 -9.99683216e-02  3.54456365e-01 -7.39606768e-02
 -1.79757625e-01 -3.45704377e-01  5.08938869e-03 -4.36236203e-01
 -4.49304938e-01  1.51839197e-01 -4.80000615e-01  1.10617265e-01
  2.51928717e-01  3.45297940e-02 -4.02372539e-01  1.44280344e-02
 -4.38313819e-02 -1.83662117e-01 -3.38233829e-01  8.16933066e-02
  6.71411231e-02  1.17497005e-01  5.53280339e-02  2.84842461e-01
  4.76226449e-01  1.39048353e-01 -2.03073204e-01  7.59685874e-01
 -1.46611005e-01 -4.19310749e-01  1.08081490e-01 -2.25990772e-01
 -1.87614590e-01  4.04670596e-01  8.09553117e-02  1.07993081e-01
 -3.00663672e-02  2.31253996e-01 -1.59140840e-01 -2.31493413e-01
 -1.50828928e-01  2.06452608e-03  2.86362618e-01 -2.20227033e-01
  3.00989330e-01 -2.93539643e-01 -2.85492331e-01  8.76356363e-02
  3.42421770e-01  8.91254693e-02 -3.24938118e-01  7.48905897e-01
 -1.32749870e-01  5.04509658e-02 -9.76971388e-02 -6.53033614e-01
 -1.76164001e-01  4.11931306e-01  2.49532223e-01 -3.07718098e-01
  3.71691048e-01  1.36827618e-01  6.20118082e-02 -3.97440106e-01
  4.11483765e-01 -3.43648762e-01  5.53745985e-01 -2.70552397e-01
 -4.15751673e-02 -3.38614106e-01  4.56976771e-01  7.63650179e-01
  6.22258037e-02 -2.51337886e-01 -4.82215509e-02 -4.09031868e-01
 -2.50358939e-01  2.41022035e-01 -9.39602926e-02 -9.55322534e-02
  4.08019006e-01 -1.04013324e-01  3.89910489e-01 -8.88383761e-02
  5.00098653e-02  1.03646845e-01 -2.50708759e-01  1.11048110e-02
  4.19351459e-01 -3.08995485e-01  3.55042040e-01  4.25189942e-01
 -1.07195571e-01  2.33937338e-01  5.13224721e-01 -2.12960422e-01
  2.44245231e-01 -5.07420182e-01 -2.14823127e-01  4.02353674e-01
 -1.46254748e-01 -1.24255665e-01  3.06481779e-01  2.99196392e-01
 -1.76363021e-01 -2.96889871e-01 -1.87865138e-01 -1.03544705e-02
  1.47350371e-01  8.87804478e-03  3.41582537e-01 -2.11429507e-01
  1.68691620e-01  1.11835033e-01 -1.79541960e-01  9.46476161e-02
 -3.41735721e-01 -2.59622633e-01 -2.49624640e-01  3.43606845e-02
  4.05953705e-01  7.39447325e-02  1.85306892e-01 -2.06262439e-01
  4.54739034e-01 -1.24774039e-01 -2.65461236e-01 -1.06943056e-01
  4.30144906e-01 -2.95843422e-01  2.91302651e-02  3.18923891e-02
  2.08945304e-01  2.52489328e-01  1.45173192e-01  1.93028301e-01
 -1.19064741e-01  2.96901435e-01  3.58756781e-01  2.79459685e-01
 -2.86030412e-01  9.47152972e-02  4.45631355e-01 -4.49108109e-02
 -2.48936594e-01 -1.40592337e-01 -5.43555498e-01  1.81989774e-01
 -1.05173540e+00 -6.81078613e-01 -1.72730416e-01  3.07039730e-02
  3.63794386e-01 -1.75162494e-01 -1.90322012e-01 -5.40980138e-02
  1.17403641e-01  9.40734670e-02 -3.57633799e-01  2.21100710e-02
 -1.05015412e-01  1.02700479e-03 -2.67457850e-02  3.23333889e-01
  5.03479719e-01 -3.82649392e-01  3.59161317e-01 -2.49434620e-01
  1.70471415e-01 -2.59608477e-01  6.02030158e-01 -1.81075558e-01
  1.83662042e-01  4.06031430e-01 -1.00977734e-01 -1.16685480e-01
  4.07253504e-02  2.70647928e-03 -5.59430085e-02  2.89971173e-01
  1.66975662e-01  2.47563854e-01 -8.09580445e-01  1.44024417e-01
  2.09187686e-01 -9.04914364e-02 -1.59185052e-01  3.72763097e-01
 -1.36721537e-01 -3.31911057e-01 -7.38214403e-02  1.60602722e-02
 -1.34117320e-01 -7.50090331e-02  4.08166647e-01 -8.52166295e-01
  3.70035879e-02  9.73454863e-02  2.14541763e-01  4.38800544e-01
  3.21068764e-01  2.92813256e-02  2.44477853e-01 -8.53419006e-02
  1.57687038e-01 -2.20077962e-01 -2.49307781e-01  2.03353137e-01
 -2.06238985e-01 -1.34438887e-01 -7.83846062e-03 -6.24064319e-02
  2.51612306e-01  1.25496075e-01 -5.97347468e-02 -1.49551719e-01
  3.82834613e-01 -4.99344319e-02 -1.36626199e-01  2.72458613e-01
 -8.54126066e-02  3.15538853e-01  3.28882724e-01  1.22412145e-02
 -3.13472509e-01 -5.65153584e-02 -1.27517015e-01 -1.13898054e-01
  1.85680598e-01 -1.95247561e-01  5.40522099e-01 -3.97851050e-01
 -5.16662478e-01 -3.21029089e-02  2.12457448e-01  7.27477893e-02
 -3.66009355e-01 -2.97939271e-01 -1.77939177e-01  3.20227265e-01
  4.05205265e-02 -2.72204399e-01  2.08127201e-01  8.41728225e-03
  2.85835713e-02  1.83116347e-01  2.10594218e-02 -1.86207183e-02
 -2.50399202e-01 -6.84650302e-01  2.12902769e-01  2.88493395e-01
  9.59412903e-02 -4.01794732e-01  1.77915812e-01 -1.38175756e-01
  4.51807797e-01 -1.20137759e-01 -6.09199814e-02 -2.00649530e-01
 -3.57966334e-01 -3.56409848e-01  7.62178004e-03  7.43219852e-02
 -2.10474178e-01  2.31029361e-01  5.69041148e-02  4.03265029e-01
 -1.83726490e-01 -1.07937463e-01  1.30714655e-01 -7.84237459e-02
 -1.54466584e-01 -2.56477259e-02  6.09055497e-02  2.78780878e-01
  8.35438743e-02  7.40641356e-02  1.80105373e-01 -1.59273744e-01
 -4.47118580e-01  1.93776742e-01 -2.33147874e-01  1.66545324e-02
 -2.86374427e-03  2.60023773e-01 -1.78617880e-01  3.54571529e-02
 -6.45642430e-02  1.72103904e-02  5.83509058e-02 -4.13809627e-01
 -5.62379122e-01 -1.57984570e-01  5.24188802e-02 -1.76138118e-01
 -1.94224447e-01  3.09105724e-01 -2.91989326e-01  2.38255933e-01
  1.84554994e-01 -7.27822557e-02 -3.33697677e-01  2.76676029e-01
 -3.86164010e-01 -1.53299928e-01  1.81232244e-01 -2.40458287e-02
 -7.41379382e-03  7.07093596e-01 -1.67498976e-01  5.14413118e-02
  1.04053110e-01  2.56396115e-01 -1.99513823e-01  2.91519463e-01
 -3.35454643e-01  4.70880151e-01 -4.54525091e-03  5.42602167e-02
  1.03473216e-01  1.67588778e-02  1.41913489e-01  4.08740267e-02
 -1.14864618e-01  3.23864609e-01  4.04835999e-01  4.31019723e-01
  2.21764803e-01  1.68785870e-01 -7.85113424e-02 -1.90791890e-01
 -4.36362326e-02  2.87702978e-02  3.05432260e-01 -2.51105070e-01
 -2.18638450e-01  5.82336962e-01 -4.77719843e-01 -1.08781839e-02
 -8.21463466e-02  1.54024422e-01  4.63592857e-02  4.06628102e-01
 -2.22309586e-02  1.75569892e-01  9.20492038e-02  3.73701513e-01
  2.01366290e-01 -3.70452315e-01 -2.83219337e-01 -2.28244260e-01
  2.85212815e-01  1.79065019e-01  4.94504571e-02  3.84993255e-01
  5.35878062e-01 -1.04153529e-01 -4.78040539e-02  4.53190297e-01
 -2.57571459e-01  3.09886158e-01  4.89373118e-01 -1.22787826e-01
 -2.51406431e-03  2.53747821e-01  1.69559985e-01  4.60487306e-02
 -2.35509112e-01 -1.20826691e-01 -3.60976577e-01 -5.09453297e-01
  1.84670329e-01 -1.81770667e-01  2.47293040e-01 -5.08601964e-01
  1.51361093e-01  3.10449630e-01  6.01805449e-01 -2.75723636e-01
  3.04487765e-01 -1.73559990e-02  2.91214675e-01 -2.53921688e-01
  1.06339976e-01 -2.77662039e-01  3.47701132e-01  2.07378298e-01
 -4.57395911e-02 -3.31295848e-01  2.26458773e-01  5.70845723e-01
 -1.60910904e-01  3.73674810e-01  4.91687626e-01 -8.04961473e-02
  1.91047847e-01 -3.98499250e-01  2.61992477e-02  1.41022936e-01
  1.42878115e-01  7.75204539e-01 -4.24730182e-01  4.00730446e-02
  1.05673872e-01  2.64156818e-01  2.09475905e-01 -2.41932660e-01
  2.36938745e-01 -4.34402935e-03 -2.81342059e-01  2.68986493e-01
 -2.04246074e-01  9.51716453e-02  1.77782983e-01 -1.44675240e-01
 -4.58943173e-02  1.24182448e-01 -2.78252244e-01 -1.22350633e-01
  8.08386356e-02  1.26337871e-01 -1.17139012e-01 -1.41140908e-01
 -1.86087638e-02  3.79194081e-01  7.21647665e-02  2.03690737e-01
  6.21655583e-03  2.40830913e-01  5.51905595e-02  2.85613716e-01
 -4.54112142e-01 -1.31250277e-01  2.50177205e-01  2.46939003e-01
  9.45928916e-02  2.55620386e-02  3.08517635e-01 -2.40425438e-01
 -1.47761524e-01  1.02284774e-02 -7.68345073e-02 -2.17542827e-01
 -3.66366543e-02  9.07955915e-02  1.15996741e-01  8.27520117e-02
 -5.56757212e-01 -5.30678749e-01  2.87982076e-02  3.20984125e-02
  6.13146722e-02  4.70598251e-01 -3.07505757e-01 -3.01418137e-02
 -1.19842753e-01  1.81153178e-01 -4.46450472e-01  2.98231512e-01
  2.26554647e-01  1.03138067e-01  3.02386731e-02  6.09674394e-01
 -8.40042308e-02 -2.34751165e-01 -1.44370154e-01  1.26748487e-01
 -2.49064893e-01 -3.05953383e-01  2.69047529e-01 -2.23044068e-01
 -1.23433962e-01 -5.59917577e-02  2.51518607e-01  2.70372868e-01
  7.37538263e-02  6.25376821e-01  1.85921639e-01  2.73071915e-01
  4.92184639e-01  1.46014035e-01  1.01569265e-01 -3.39986444e-01
 -3.97599548e-01  1.59804434e-01  1.95696294e-01 -3.47954094e-01
 -2.67258346e-01  2.16972247e-01  1.10405639e-01 -2.22301662e-01
  3.88195962e-01 -2.06823140e-01 -2.62997359e-01  3.60708714e-01
 -5.63995719e-01  2.07858354e-01  8.92372653e-02  2.60659456e-01
  3.19232583e-01  6.69669986e-01 -6.62687719e-02 -1.60087645e-01
  4.48571652e-01 -1.02503695e-01 -1.32721871e-01  8.14174116e-02
 -1.17152654e-01  7.32427165e-02 -1.08571760e-01  9.44087282e-03
  3.96232188e-01 -2.41345078e-01 -1.82540789e-01  1.21399149e-01
  3.79919946e-01 -1.48695454e-01  3.75991821e-01  2.06096828e-01
  1.10427879e-01 -2.49662042e-01 -3.97548676e-02 -6.78095967e-02
 -3.65065783e-01 -1.99957281e-01 -5.49000539e-02 -1.74260009e-02
  7.18673170e-02 -7.00374722e-01 -1.94845647e-01 -9.20415521e-02
  7.18308985e-02  2.97446907e-01 -5.88566780e-01  9.99394506e-02
 -1.31802917e-01  1.29764080e-01 -1.98268414e-01  3.84345531e-01
 -1.26336694e-01 -9.84734446e-02  3.27478200e-01  2.08449587e-01
  2.75566369e-01 -4.61352110e-01  1.22192197e-01 -3.68361741e-01
 -3.33148763e-02 -1.26228184e-02 -1.59609988e-01  2.97940552e-01
 -1.30134106e-01  1.91478446e-01  2.55111754e-01 -4.36570138e-01
 -5.64514160e-01  2.14387011e-02  1.60565615e-01  2.89373040e-01
  5.20977736e-01 -2.07880408e-01  5.75215369e-02 -1.16262913e-01
 -8.16626176e-02  2.29956567e-01  2.12248862e-01  7.02083856e-02
 -2.93915868e-01 -1.74178779e-01  3.16347599e-01  4.60542798e-01
  6.87094256e-02  6.74804449e-02  6.09809421e-02  3.84270586e-02
  4.09238338e-02 -8.80016834e-02 -3.46883327e-01 -3.23597491e-01
 -6.71844929e-03 -7.07874522e-02 -5.00059903e-01  5.07607758e-02
  1.69365220e-02 -1.49121448e-01 -3.59648317e-01 -1.89267784e-01
  4.53155935e-01  2.65534639e-01  4.70709532e-01  2.09028006e-01
  1.53442442e-01 -3.11671793e-02  4.71503496e-01 -3.84162404e-02
  4.62383568e-01 -1.60115123e-01  2.22779453e-01 -1.00721851e-01
 -2.65431367e-02 -4.33004737e-01 -4.06045556e-01  4.09500360e-01
 -1.88474283e-01 -4.99726236e-02  3.02520424e-01 -1.71675272e-02]"
Statistics (TODO),Statistics ¶ Basic concepts in statistics for machine learning. References [1] Example,"[-1.74132939e-02  8.03564563e-02  4.40717600e-02  1.37154102e-01
  2.43287250e-01  6.50432110e-02  1.73084244e-01  2.01862305e-01
  2.86303192e-01 -3.40096541e-02  1.55273944e-01  4.08633053e-01
  1.66604489e-01  6.51477456e-01 -1.53590277e-01 -4.37298089e-01
 -1.89244226e-01  6.75380975e-02 -2.18427852e-01 -3.08150023e-01
 -3.70898545e-02  4.90508348e-01 -6.20550327e-02 -6.74745560e-01
 -2.93862708e-02  3.90456080e-01  3.94300193e-01  3.22346747e-01
 -5.17243966e-02  1.63954481e-01 -8.74317288e-02  8.31765160e-02
  1.30736334e-02  6.50084466e-02 -3.81151191e-03  7.69343972e-02
  1.08417151e-02  1.81244180e-01 -3.56905252e-01  8.53648409e-02
  2.21776977e-01  2.07080990e-01 -5.12366354e-01  4.34310287e-01
  7.27624297e-02 -9.04226825e-02 -6.74282670e-01  1.16725303e-01
 -8.08702335e-02 -1.21375643e-01  1.32007077e-01  3.77079733e-02
  3.04136515e-01 -2.13539243e-01  2.42863625e-01  3.02701384e-01
  3.59241843e-01 -6.72137678e-01 -6.46903887e-02  1.61936283e-02
 -5.25621653e-01 -2.69256532e-01 -1.84365109e-01  7.98185319e-02
 -5.70387505e-02 -1.68325394e-01  2.43939012e-01  7.55131841e-02
  1.56421795e-01  2.09673032e-01 -4.04787630e-01 -3.07560414e-01
 -8.91162679e-02 -6.77179813e-01 -1.44223094e-01 -4.20424998e-01
 -2.35662520e-01 -2.46686772e-01 -1.19031794e-01  2.05452129e-01
 -1.61946535e-01  4.85962182e-01 -2.40721002e-01  4.20614451e-01
  6.81476891e-01  2.22062573e-01 -9.77330804e-02 -3.23242992e-02
 -3.45521467e-03  3.58813517e-02 -5.65546453e-02  5.38804941e-02
 -3.04759815e-02  8.05018902e-01 -2.22918928e-01  1.56692341e-01
  1.76556081e-01 -6.80449903e-02 -4.69244495e-02  1.77850664e-01
 -3.95454109e-01 -7.09731579e-02  6.10046804e-01  1.07253015e-01
  1.18961379e-01  2.94316053e-01 -6.51893904e-03  1.00504957e-01
 -1.01056434e-01  3.50628644e-01  1.88793652e-02  1.26240468e-02
 -1.03347398e-01 -1.00303993e-01 -2.76540458e-01  1.43754361e-02
  5.41645288e-01 -7.18557462e-02  1.27137201e-02  4.77548927e-01
 -4.03834991e-02  2.14075446e-01 -6.25001863e-02  3.03254724e-01
 -1.39026359e-01 -2.85086799e-02  2.04132318e-01  9.57901925e-02
 -1.24184228e-02  2.18337372e-01 -9.72916931e-02 -8.58926713e-01
  6.75244927e-02 -4.75277781e-01 -1.59313112e-01 -1.18366703e-01
 -2.78931484e-02 -5.74071612e-03  2.17789397e-01  2.44546533e-01
  1.03999980e-01 -4.22316790e-03 -6.21783733e-03  7.26143196e-02
  2.12862879e-01  2.15950355e-01 -3.25271599e-02  5.48188277e-02
  4.60513800e-01 -2.71736145e-01  2.55981684e-01  1.83149353e-01
  4.14642431e-02 -4.03670192e-01 -3.17463815e-01 -8.69800895e-02
 -2.49780715e-01 -4.50466812e-01  2.96514809e-01  2.00103551e-01
  1.24009818e-01  6.88460469e-02  2.53427684e-01  1.48492202e-01
  1.60966709e-01 -3.06060880e-01 -7.48257339e-02  1.06572680e-01
 -3.66698742e-01  2.93623328e-01 -1.87832072e-01 -2.97278970e-01
  1.78870291e-01  2.53210217e-02 -2.66808301e-01  3.24933171e-01
  1.00358568e-01  3.76568809e-02  4.94554043e-02  1.71805248e-01
 -1.78437114e-01  9.43803936e-02  2.78769404e-01  7.72909448e-02
  2.84851640e-01  5.86800396e-01  8.56765956e-02  1.47353739e-01
  4.24404964e-02 -1.17823042e-01 -3.45807858e-02 -4.45507467e-02
 -2.35788003e-01 -5.70238531e-02  4.68462855e-02  1.51752532e-01
  4.20651704e-01 -5.59386350e-02 -4.74132635e-02 -2.10446939e-01
  5.46254069e-02 -3.10576111e-01 -1.12857260e-02  3.04210603e-01
  1.24335118e-01 -4.22890842e-01 -6.13104403e-01  9.02743638e-02
  2.71033466e-01  2.50400752e-01 -2.97661591e-02  1.49522558e-01
 -2.37398505e-01  6.43626273e-01 -3.32483411e-01 -6.33851647e-01
  1.67783350e-01  3.85710955e-01  2.01467834e-02  1.27393857e-01
  3.72982115e-01  2.16689870e-01 -8.55884925e-02 -1.20511852e-01
  4.22456443e-01 -2.01455086e-01  8.37380718e-03 -2.79136412e-02
  1.34350732e-01  1.45614287e-02  3.37129593e-01  3.88446867e-01
 -1.01054609e-01  3.32871899e-02 -1.63192123e-01 -3.35247785e-01
  1.78699508e-01  1.89530656e-01 -3.34562138e-02  2.04451591e-01
  1.43304363e-01 -1.83698013e-02  2.02410474e-01  2.87850708e-01
 -1.04091624e-02 -2.36843303e-01 -2.02529237e-01  8.85140076e-02
  3.67424935e-02 -2.81929284e-01  4.65858698e-01  3.43410164e-01
  1.51656881e-01 -2.54581068e-02  1.96542025e-01 -2.59617448e-01
  1.29117206e-01 -5.75085938e-01 -4.55579698e-01  1.89619407e-01
  5.08051664e-02 -2.06495747e-01  5.95825687e-02  4.17678595e-01
  1.39710814e-01 -2.89689362e-01 -1.41253993e-01  1.96030572e-01
  9.58417058e-02 -1.58136338e-01  4.64674532e-02 -2.72526294e-01
  9.20697302e-02 -2.55140513e-01 -6.81336503e-03  7.05734566e-02
  3.87217343e-01  1.69489354e-01  2.51921475e-01  3.73605043e-01
  1.85597092e-01  9.87599865e-02 -1.92277297e-01 -2.83974499e-01
  1.25232369e-01  3.92716974e-01  5.37333712e-02 -1.60204008e-01
  4.73684192e-01  3.03542893e-02  5.55814579e-02 -4.30499971e-01
 -1.24800380e-03  4.48389471e-01 -1.27994925e-01  4.05324936e-01
  9.44990814e-02 -2.78694540e-01  6.52154312e-02  2.44363695e-01
 -8.17891732e-02 -2.15897679e-01  1.98743731e-01 -2.21545741e-01
 -1.66501358e-01 -2.42937848e-01 -5.49883485e-01  2.68779039e-01
 -4.73794609e-01 -7.62789786e-01 -9.29140151e-02 -3.48223746e-02
  3.42357874e-01 -5.63157303e-03  8.54840875e-02  1.42501771e-01
  1.34473428e-01  1.27839312e-01 -4.75504041e-01  6.25515506e-02
 -7.25267082e-02  3.09033871e-01 -4.85209003e-02  1.88997939e-01
 -3.21941711e-02 -1.22467235e-01 -1.60277054e-01 -4.20532107e-01
  1.48756757e-01 -2.11499885e-01  2.72299796e-01 -4.26513404e-01
  2.69853443e-01  1.35441527e-01  3.52898151e-01  3.48799467e-01
 -1.79847360e-01 -2.69011289e-01 -7.58587569e-02  8.61363858e-02
  4.22682524e-01  2.77115613e-01 -1.61666378e-01 -3.85366529e-02
  7.07584992e-03  9.40195248e-02 -5.44597208e-01  2.34842598e-01
 -8.59609097e-02  6.96559064e-03 -7.42078722e-02 -1.05617665e-01
 -3.42038333e-01  2.76822537e-01  7.72875622e-02 -3.96608979e-01
 -3.22206736e-01  1.86166316e-01  4.21303809e-02 -1.05781451e-01
  1.78577840e-01 -1.08614907e-01 -6.80950508e-02  4.82782200e-02
  2.25542784e-01 -3.22939366e-01 -3.43096197e-01  6.38231114e-02
 -1.07827768e-01 -1.52888119e-01  1.10331208e-01 -1.10533655e-01
  2.09959120e-01  4.68885200e-03  3.79515260e-01 -1.40445651e-02
  1.01540998e-01 -8.33837241e-02 -3.77353162e-01  3.95391397e-02
  6.41250908e-02  2.13516593e-01  1.98294178e-01 -7.83735886e-02
 -2.10287184e-01  2.21082076e-01 -2.69911259e-01 -5.12418211e-01
  2.24728972e-01  5.71097359e-02  3.67640615e-01 -2.63132781e-01
 -9.11816582e-02  9.78526622e-02  1.94536969e-01  2.03460336e-01
 -1.01791084e-01 -3.30629975e-01 -3.20131630e-01 -8.43943954e-02
 -1.91463038e-01 -9.20835063e-02  2.98613548e-01  3.34299147e-01
 -1.85687393e-02 -9.85274911e-02 -4.74003479e-02  1.79028377e-01
  4.64235544e-01 -5.01276791e-01  4.96440753e-02  3.29192340e-01
  2.96683032e-02 -2.96776682e-01  4.33784485e-01  7.63718486e-02
  2.62181401e-01 -1.97288528e-01 -5.36739647e-01 -2.28647292e-01
  2.97809131e-02 -1.71759665e-01 -6.31386936e-02  1.06466047e-01
 -9.74900275e-02  2.59954780e-01 -1.33857489e-01  3.68623644e-01
 -1.47547424e-01  2.44225189e-01  1.62576243e-01  9.44688618e-02
 -1.36940360e-01 -1.07667573e-01  2.19164103e-01  1.71619609e-01
  2.07645461e-01 -1.45574942e-01  1.63795859e-01 -2.35515721e-02
  2.99246341e-01  1.03763059e-01 -2.95459796e-02  1.95032850e-01
 -1.53550193e-01  3.99633497e-02 -4.97192368e-02  2.72860050e-01
 -4.01714891e-01 -8.18042308e-02  3.33803892e-01  1.09793171e-01
 -3.89993936e-01  5.94839752e-02 -1.73829999e-02 -2.03662276e-01
 -6.79695308e-02 -2.49116138e-01 -3.01536351e-01  7.22970814e-02
 -4.50012907e-02 -1.04213543e-01 -1.59777150e-01  1.11106098e-01
 -4.73024607e-01  1.23442300e-01 -1.89980164e-01  2.86338270e-01
 -4.53347087e-01  5.51776230e-01  6.57346845e-02  8.51637721e-02
 -2.64575392e-01  2.31328569e-02  1.02887690e-01  8.74130800e-02
 -7.33652413e-02 -1.24549471e-01  1.43265530e-01 -3.85223329e-01
 -2.74679005e-01 -1.50892809e-01 -2.74772316e-01  1.77298307e-01
 -3.59712169e-02  1.64405629e-01  2.38454208e-01  5.47409542e-02
 -2.96758085e-01 -2.50891119e-01  3.17089818e-02  3.85344267e-01
 -4.86008786e-02 -1.21530509e-02 -9.62312818e-02 -1.04671083e-01
 -2.73305625e-01 -2.30361782e-02 -6.59913719e-02  4.97669689e-02
  1.27233341e-01  6.17047325e-02 -4.52194326e-02  3.71286064e-01
 -1.17133260e-01  3.86004448e-01 -1.01512671e-02 -8.60399380e-03
  1.83378756e-01 -1.80357583e-02  7.88158774e-02  8.98476243e-02
  1.77108139e-01  3.29775840e-01 -2.81720817e-01  4.90459837e-02
  1.29573479e-01  3.35955247e-02  2.50050783e-01  3.14620525e-01
 -4.32486497e-02  1.64695218e-01 -5.30545227e-02 -9.54131503e-03
  5.69738634e-02  4.05426100e-02  1.46716505e-01  3.21390212e-01
  6.63223937e-02 -6.05529785e-01 -3.49559397e-01 -2.47154236e-01
  2.36513004e-01  8.93689916e-02  1.59692883e-01  4.59918827e-02
 -2.21940175e-01  1.84924185e-01 -5.76343313e-02 -2.44229704e-01
  8.18993092e-01 -6.30559996e-02  3.77399415e-01  1.57398731e-01
 -6.79934248e-02  1.42440483e-01  1.52524099e-01  7.22207204e-02
 -1.15479445e-02 -1.92581415e-02  3.01934868e-01  2.32938036e-01
 -1.17262863e-02 -6.74149320e-02  5.44501543e-01 -2.85472751e-01
 -5.20315729e-02 -1.68699771e-01 -8.86759013e-02 -1.28921689e-02
  1.16578571e-01  6.49758399e-01 -1.40453860e-01  2.24746123e-01
 -6.11457415e-02  1.57215111e-02  6.40560165e-02 -3.11682492e-01
  2.42861241e-01 -2.77713276e-02  1.17808901e-01 -9.57705155e-02
 -2.62679666e-01 -3.27041149e-02 -2.83334464e-01  2.46918932e-01
 -2.85612829e-02  1.61540747e-01  4.31953818e-01  1.80847510e-05
 -6.27669394e-02 -1.30611345e-01  8.58014002e-02  2.73474663e-01
  1.33031392e-02  2.76664674e-01 -5.46844006e-01  1.06409788e-02
 -1.75581817e-02  1.86730966e-01  1.05380863e-02  5.36698811e-02
 -4.45437312e-01 -4.87053365e-01  1.53219849e-01  8.67415890e-02
  7.44498223e-02  2.12485880e-01  3.79636437e-01 -5.72952814e-02
  1.80679232e-01  1.03980839e-01  6.65706992e-02  1.04882801e-02
  6.40243888e-02 -4.87092584e-02 -8.20916519e-02  1.96502119e-01
 -3.72360885e-01  1.65967748e-01  1.07745521e-01  2.73724914e-01
 -1.05531648e-01 -5.82350157e-02 -1.60479575e-01  1.83113292e-01
 -1.60877094e-01  1.33652026e-02 -2.69330323e-01  1.52879104e-01
  2.02364504e-01 -9.44727510e-02 -1.89965684e-02  2.36893773e-01
 -2.13027507e-01  1.48225203e-01 -1.94498897e-01  1.68570310e-01
 -1.09260067e-01 -1.14673980e-01  1.16418831e-01 -1.71577439e-01
 -2.78052717e-01 -1.01609997e-01 -5.32602191e-01  7.62097239e-02
  2.00138658e-01  3.40781778e-01  3.56836379e-01  1.58721671e-01
  3.12749803e-01 -4.39561129e-01  3.90547454e-01 -1.00783676e-01
  1.35067344e-01  1.87183768e-01  3.56606811e-01  3.04031298e-02
 -2.77597100e-01  4.12918389e-01  7.46403337e-02 -1.92647934e-01
  5.49115002e-01 -3.50079775e-01 -1.60856098e-02  3.22666876e-02
 -5.15706003e-01 -1.41504794e-01 -6.41159341e-02  1.44569427e-01
  3.41614962e-01  1.95266500e-01 -3.12455088e-01  2.92883196e-04
  4.39267933e-01 -3.60811025e-01  5.20770252e-02  2.14558691e-01
 -2.70119905e-02  4.96017858e-02 -4.26005602e-01  3.64915341e-01
  1.26625568e-01  3.25824097e-02 -2.39836574e-01 -6.65819347e-02
 -4.13982391e-01 -3.32018733e-01  3.63479286e-01 -2.41306238e-03
 -2.04547629e-01  1.84497342e-01  6.12057149e-02  3.00093852e-02
  2.49041200e-01 -8.18939358e-02  1.59508973e-01 -1.74053982e-01
  6.64201006e-02 -7.84402966e-01 -2.27075577e-01  1.62454009e-01
  1.65750057e-01  3.11009079e-01 -1.67375311e-01  1.04046509e-01
 -8.24670214e-03  1.34610310e-01 -8.32274407e-02  1.44636497e-01
 -1.05619751e-01 -3.56600508e-02 -1.38665736e-01 -8.35166247e-06
  4.92878079e-01 -1.89134911e-01  5.40337227e-02 -1.25147343e-01
 -7.73328468e-02 -1.45803362e-01 -2.05908902e-02 -1.97193861e-01
 -6.16050884e-02  3.45395394e-02  2.10518748e-01 -4.87513095e-01
 -2.50086069e-01  1.62380025e-01 -3.02026242e-01 -2.68313326e-02
 -3.28739345e-01  1.68703750e-01 -1.64157629e-01  2.44410962e-01
 -1.66275017e-02  1.86550900e-01  2.94348598e-01 -1.14393502e-01
  3.15370038e-02  4.38338548e-01 -5.43893082e-03  4.86984700e-01
  8.55449513e-02  2.70687759e-01 -2.87064791e-01  7.14356601e-01
  1.84617430e-01 -1.99130610e-01 -2.39084080e-01 -5.34695864e-01
  1.00802913e-01 -2.40180016e-01  8.68972093e-02 -4.28259075e-01
  4.91539538e-02  1.70898482e-01 -2.33184129e-01 -2.76147962e-01
  6.48304969e-02 -3.84171642e-02  3.51282209e-01 -3.97118554e-02
  1.28238827e-01 -4.65824269e-02  2.40260065e-01 -1.84279487e-01
  6.49497434e-02  3.45197886e-01  2.59962797e-01  2.07990736e-01
  4.69647348e-01  5.64338788e-02 -1.51912525e-01 -7.29510188e-02
  4.24328804e-01  3.15242201e-01  3.18683349e-02  1.66931245e-02]"
Notation,"Notation ¶ Commonly used math symbols in machine learning texts. Algebra Calculus Linear algebra Probability Set theory Statistics Note Use the table generator to quickly add new symbols. Import current tables into tablesgenerator from figures/*.tgn . Export and save your changes. Also see helpful multiline editing in Sublime. Algebra ¶ Symbol Name Description Example \((f ∘ g)\) composite function a nested function (f ∘ g)(x) = f(g(x)) \(∆\) delta change / difference ∆x = x_1 - x_0 \(e\) Euler’s number e = 2.718281828 s = frac{1}{1+e^{-z}} \(\sum\) summation sum of all values ∑ x_i = x_1 + x_2 + x_3 \(\prod\) capital pi product of all values ∏ x_i = x_1∙x_2∙x_3 \(\epsilon\) epsilon tiny number near 0 lr = 1e-4 Calculus ¶ Symbol Name Description Example \(x'\) derivative first derivative (x^2)’ = 2x \(x''\) second derivative second derivative (x^2)’’ = 2 \(\lim\) limit function value as x approaches 0 \(∇\) nabla gradient ∇f(a,b,c) Linear algebra ¶ Symbol Name Description Example \([ ]\) brackets matrix or vector \(M = [1 3 5]\) \(\cdot\) dot dot product \((Z = X \cdot W\) \(\odot\) hadamard hadamard product \(A = B \odot C\) \(X^T\) transpose matrix transpose \(W^T \cdot X\) \(\vec x\) vector vector \(v = [1 2 3]\) \(X\) matrix capitalized variables are matrices \(X, W, B\) \(\hat x\) unit vector vector of magnitude 1 \(\hat x = [0.2 0.5 0.3]\) Probability ¶ Symbol Name Description Example \(P(A)\) probability probability of event A P(x=1) = 0.5 Set theory ¶ Symbol Name Description Example \({ }\) set list of distinct elements S = {1, 5, 7, 9} Statistics ¶ Symbol Name Description Example \(μ\) population mean mean of population values \(\bar x\) sample mean mean of subset of population \(σ^2\) population variance variance of population value \(s^2\) sample variance variance of subset of population \(σ_X\) standard deviation population standard deviation \(s\) sample std dev standard deviation of sample \(ρX\) correlation correlation of variables X and Y \(\tilde x\) median median value of variable x References [1] http://www.tablesgenerator.com/text_tables [2] http://www.rapidtables.com/math/symbols/Basic_Math_Symbols.htm","[ 3.29673141e-02  2.34936878e-01 -3.24244052e-02  2.94248372e-01
 -4.62953299e-02  8.08133304e-01  1.84454396e-01  1.44040763e-01
  1.93851605e-01 -4.53194529e-02  2.00195119e-01 -2.15404987e-01
  1.82219967e-03  3.85495275e-01  3.39822590e-01 -7.08072782e-01
 -1.58927903e-01  2.45313525e-01  2.54740894e-01  6.42049126e-03
  7.28708655e-02  7.96622038e-02  2.30966225e-01 -5.84679484e-01
 -5.02854288e-02  3.31588656e-01  8.15327987e-02  3.64844739e-01
 -2.09664091e-01 -3.68969947e-01 -3.04358035e-01 -1.94442078e-01
 -2.81236202e-01  3.81783366e-01 -1.70438424e-01 -5.54094464e-03
  9.47425440e-02 -1.02162302e-01 -4.85496432e-01  2.82347500e-01
  5.51438928e-01  2.13554010e-01 -1.96036339e-01  4.03123558e-01
 -4.05799821e-02 -2.80378878e-01 -1.37477785e-01  5.64217091e-01
  3.81185822e-02  1.12399459e-01  1.36989921e-01  2.07537606e-01
 -1.04385264e-01  3.34808826e-01  1.40065402e-01  4.50043269e-02
 -4.05365825e-01  1.41309202e-01  3.38624388e-01 -9.68407094e-03
 -1.76109508e-01 -3.00735712e-01 -2.79335976e-01  2.75269628e-01
  1.23024218e-01  1.39864534e-03  1.02728531e-01 -1.18279271e-03
  8.87911320e-02 -5.53805605e-02 -1.73701867e-01 -4.98160347e-02
 -8.94849747e-03 -4.17555392e-01 -1.11234590e-01 -3.90958399e-01
 -2.94100821e-01  7.69136846e-03 -1.10335857e-01  1.21544547e-01
  3.81009914e-02  3.31564903e-01  2.82226294e-01  3.00249644e-02
  2.61605531e-01  3.78629476e-01  1.63184702e-02 -4.72220480e-01
  1.03149220e-01 -7.87143558e-02 -1.59859091e-01 -7.83620104e-02
 -1.76011860e-01  3.38248909e-01 -1.32832915e-01  1.35123789e-01
 -1.11848652e-01 -9.09387827e-01 -3.37120742e-02 -4.83859152e-01
  1.69033676e-01 -4.20442000e-02  3.10072929e-01 -4.32384461e-02
  2.30438590e-01  1.69923574e-01  6.40896410e-02 -1.56515568e-01
 -1.40674800e-01 -1.85169980e-01 -1.39669597e-01  1.87475175e-01
 -3.16375680e-02 -2.49433666e-01 -1.38106793e-01 -3.87120605e-01
  1.90299600e-01  5.18094636e-02 -2.16919988e-01 -2.69780457e-01
 -3.74533981e-01  2.42008150e-01 -6.82361245e-01  4.70772415e-01
 -4.06849623e-01  7.25278735e-01 -1.21358112e-01  2.99096584e-01
  1.80680454e-01  2.36994147e-01 -2.66027629e-01  3.51780117e-01
 -1.74939007e-01 -7.89092064e-01 -9.48962346e-02 -2.86002457e-02
 -1.18441127e-01  1.98661208e-01  4.79588807e-01  2.05743387e-02
 -8.75374675e-02  3.02909315e-01 -1.25325069e-01  2.30245799e-01
  4.04401660e-01  5.24244666e-01 -2.51410138e-02  1.38447881e-02
  3.38582173e-02  2.79067874e-01  8.83943290e-02  1.91379469e-02
  2.88017333e-01 -7.58732185e-02 -1.35037333e-01  8.39739591e-02
  1.93776503e-01 -4.03739721e-01  2.15780914e-01  8.83382112e-02
  2.40422130e-01  3.40659082e-01  3.19004685e-01 -3.16527367e-01
  7.02291578e-02 -9.29123312e-02  2.76795805e-01  4.61373895e-01
 -3.41326773e-01  1.29012838e-01 -1.68135911e-01  2.58078605e-01
  4.91292030e-02  2.07783192e-01 -6.72051966e-01  1.38880029e-01
  8.09190050e-02 -1.58544123e-01  9.44035649e-02  1.50435969e-01
 -8.15807283e-02 -4.13196534e-02  4.26911265e-01  3.79357040e-01
  2.60937512e-01 -2.21108854e-01 -7.29605332e-02  4.02966738e-01
  1.21499546e-01 -4.64068502e-02 -1.56137437e-01 -1.18353084e-01
 -9.23054740e-02  3.77133518e-01  5.94627380e-01 -5.40073365e-02
  4.59365308e-01  3.91633436e-02 -6.94459528e-02 -2.80535102e-01
 -2.47051883e-02  4.76166964e-01 -2.83947140e-02  3.00411761e-01
 -5.12224317e-01 -2.39617184e-01  2.42819190e-01  1.07708387e-02
  1.58799544e-01  1.43907480e-02  1.15714915e-01  8.80393386e-01
 -7.38375187e-02  4.68036115e-01 -2.78348893e-01 -4.99857575e-01
  4.07899916e-03  6.51406646e-01 -2.42548883e-01 -4.79153767e-02
  1.45840123e-01  6.04337081e-02  9.47706550e-02  2.99295366e-01
  3.18639070e-01  6.34030253e-02  1.63236752e-01 -8.48591551e-02
 -5.12601137e-02 -9.27798375e-02  5.98525181e-02  1.28368050e-01
  3.51753026e-01 -5.32887354e-02 -4.77675125e-02  2.84795731e-01
  1.02113336e-01  2.37332597e-01 -2.43351549e-01  7.27659464e-03
  3.67153376e-01 -4.65798154e-02 -9.87487286e-03  3.10483575e-01
 -2.19919831e-01  1.36661246e-01 -2.11078703e-01  7.16957822e-02
  7.57187977e-03 -5.27946830e-01  3.28664273e-01  2.32513025e-01
  2.36136653e-02  5.76376095e-02  3.87813807e-01 -2.42407531e-01
  1.11559346e-01 -8.84163231e-02 -4.03399244e-02  3.16759348e-01
  1.58975478e-02  9.83291939e-02  1.03788063e-01  3.48557740e-01
 -1.24397434e-01 -2.82335073e-01 -1.45293593e-01 -1.97914839e-01
  2.28050083e-01 -1.41644984e-01  2.54797228e-02 -4.65412401e-02
  4.23881710e-01 -9.21307951e-02  5.24611101e-02  1.52219221e-01
 -8.54485035e-02  2.53771216e-01  4.02112007e-01  2.22210094e-01
  6.56691864e-02 -3.40984687e-02 -3.34243685e-01 -3.38715166e-01
  4.59468335e-01  2.25025654e-01  1.02544822e-01  2.51464427e-01
  7.50007480e-02 -5.30806407e-02  4.30568010e-02 -3.44924301e-01
  9.49547067e-02  2.95396060e-01 -2.97223151e-01  9.54820067e-02
  7.40242377e-02 -4.33520637e-02 -1.84604481e-01  8.08036551e-02
  5.38727194e-02 -1.18078634e-01  1.40035257e-01  2.65164703e-01
 -1.70797601e-01  6.04647920e-02 -4.43159759e-01  2.21920237e-01
 -5.51111042e-01 -3.63236606e-01 -8.20356011e-02 -9.31718200e-03
  3.64188552e-01 -3.28811705e-01 -1.95459053e-02  1.29210845e-01
 -1.23489782e-01  1.46875866e-02 -1.81103587e-01 -8.75763670e-02
 -2.45126218e-01 -1.28911346e-01  7.69399330e-02  1.30299538e-01
 -1.95744440e-01  3.33120346e-01 -2.66739726e-01 -3.03481609e-01
  2.04837799e-01  7.71176070e-02  3.48552167e-01 -1.12119541e-01
  1.24432415e-01 -4.65685308e-01  2.07189098e-01 -3.25838596e-01
  2.46606395e-01 -1.14103094e-01 -1.08838156e-01  4.26076621e-01
  3.01704526e-01  3.67955029e-01 -4.61482704e-01  1.20950043e-01
 -1.56440377e-01 -2.00673118e-02 -9.81081277e-02  3.54722708e-01
  2.38543496e-01 -5.19152284e-01  4.45621274e-03 -2.19654944e-02
  1.35112971e-01  3.14539909e-01 -1.97672963e-01  1.42297089e-01
 -3.36177826e-01  2.46341735e-01  1.94930211e-01  3.70792389e-01
  1.99208558e-01  2.30960935e-01  2.35455036e-01  6.24043494e-03
  4.16267902e-01 -5.43252155e-02  9.57680680e-03  2.04384886e-02
 -8.22928846e-02 -2.91418403e-01  7.74652362e-02 -1.64074600e-01
  2.21527830e-01 -1.51689038e-01  4.16291624e-01  7.77155086e-02
  3.41941118e-01  6.86520785e-02 -4.50425327e-01  4.33163196e-02
  1.71208888e-01  3.10088247e-01 -1.70112461e-01 -2.29825094e-01
  2.36220226e-01  3.88205498e-01  1.25031650e-01 -3.80332917e-01
  4.12624866e-01  1.47567943e-01  2.18334511e-01  7.10381791e-02
 -1.05026253e-01 -2.59735465e-01  2.86171064e-02  2.64356256e-01
 -1.46281123e-01  1.63988680e-01  6.83892593e-02  2.79955924e-01
 -3.01741064e-03 -3.81499767e-01 -8.31654519e-02 -2.62824774e-01
  4.56948653e-02 -2.78232515e-01  1.65796056e-02 -1.38877302e-01
 -3.43123108e-01 -2.05446005e-01  6.19208589e-02 -3.08240473e-01
 -1.95970923e-01 -1.09623685e-01 -2.20188275e-02  7.15569109e-02
  3.13674927e-01 -3.81229341e-01  2.77647600e-02 -1.95458263e-01
 -4.65238243e-01 -9.00738686e-02 -1.26875788e-01 -1.45935968e-01
 -3.00353229e-01  4.71403897e-02 -1.07443452e-01  1.44061536e-01
 -3.65799546e-01 -1.16602972e-01  2.84616239e-02 -1.36094689e-01
  8.79278108e-02 -1.35073110e-01  1.91246063e-01  3.46127629e-01
  6.47351891e-02 -5.71694374e-02 -7.03758001e-03 -1.10349447e-01
  5.93572631e-02  1.27819762e-01 -8.57863575e-03 -4.72218931e-01
  1.22046396e-01  2.38761678e-02 -2.31059283e-01  1.51775032e-01
 -8.01749825e-02  2.07747370e-02 -7.34310597e-04 -6.01191640e-01
 -1.96424827e-01 -7.46766329e-02 -3.13979447e-01 -1.56362191e-01
  2.46897832e-01 -1.13702014e-01 -7.09089264e-02 -3.48992869e-02
  2.51962751e-01 -2.59833150e-02 -1.78292468e-01  4.45757657e-01
 -5.62276095e-02  6.90399349e-01  2.28763893e-01  7.61039406e-02
 -1.86701119e-01  8.45603496e-02  4.04040188e-01 -4.93439659e-02
 -3.23931277e-02  2.66913772e-01  1.79774284e-01  2.94584185e-01
 -1.67589575e-01 -1.00066945e-01 -8.01527500e-03 -2.89019227e-01
  1.58857778e-01 -1.28222227e-01 -4.95624803e-02 -7.80721903e-02
 -1.82681769e-01  4.67661545e-02 -8.76654312e-02  1.04457915e-01
 -2.09759757e-01  9.30183008e-03 -2.35747755e-01  4.23561595e-03
  9.42456350e-02  1.70839727e-01  1.56085461e-01 -5.78369126e-02
 -5.34698367e-01 -1.25614524e-01  6.41990174e-03  3.84436920e-02
 -1.60892420e-02  1.10251762e-01 -4.59945947e-02  1.21714808e-01
 -6.10946976e-02  3.63178730e-01 -5.99116310e-02 -1.75777227e-02
  1.57702267e-01 -1.52709812e-01 -1.15810603e-01 -6.53646886e-02
  2.16268778e-01  3.04965228e-01  4.67233285e-02  4.13143456e-01
  7.05832765e-02  1.76740333e-01  7.86943808e-02  2.43090242e-01
 -1.33622766e-01  2.13581070e-01 -6.46648556e-02  2.80345753e-02
  2.64749050e-01 -1.92677230e-02 -2.05953307e-02  4.29236352e-01
  2.16788679e-01 -2.49090016e-01 -8.06533098e-02 -1.08943090e-01
 -6.52537197e-02 -2.27442890e-01 -1.16088286e-01 -4.98792708e-01
 -5.59782889e-03  3.22006345e-02 -1.69937879e-01 -5.84666468e-02
  1.36940911e-01  5.50865382e-02  6.12422884e-01 -2.55940884e-01
 -5.64597361e-02 -9.01599675e-02  6.48311973e-01  8.72380584e-02
  1.25423923e-01  4.38357890e-01  1.93430543e-01  4.79038775e-01
 -9.87101570e-02 -5.15859053e-02  9.04352739e-02 -1.73680604e-01
 -2.01101974e-02 -1.20087013e-01 -5.24368361e-02  3.23574305e-01
 -2.02529296e-01  4.03333962e-01  2.50994563e-02 -4.64370102e-02
 -5.33435464e-01  9.02243108e-02 -1.85885847e-01 -2.93239951e-01
  1.86556593e-01  7.27714375e-02  4.16117191e-01  1.45592809e-01
 -5.37443519e-01 -2.44782940e-02 -4.57061976e-01  5.25031090e-02
 -2.84578279e-02  6.18677437e-01 -4.12999541e-01 -9.92585197e-02
 -7.50986487e-02 -3.80612582e-01 -1.80419922e-01  9.51323882e-02
  6.36856928e-02 -2.11528882e-01 -2.07219515e-02  2.70037860e-01
 -1.21638954e-01  1.55297667e-01 -6.91658854e-02  4.89862651e-01
 -5.26289582e-01 -4.83957499e-01  7.51942098e-02  3.66171360e-01
  8.12305510e-02 -3.22178394e-01  1.93456516e-01  4.10457581e-01
  2.13569954e-01  4.44923222e-01 -2.34182011e-02  1.96741670e-01
 -5.71079314e-01  3.72659750e-02  1.51535533e-02 -5.88467252e-03
 -1.27248198e-01  2.83907652e-01 -6.58954903e-02  1.86636180e-01
 -1.89872250e-01  7.93245658e-02 -2.87959754e-01 -1.75021499e-01
  6.53784871e-02  4.62026298e-02 -1.59718037e-01 -4.14852142e-01
  8.17982033e-02  4.39650528e-02 -2.66697228e-01 -6.84229657e-03
 -3.94856632e-02  6.07848130e-02  1.39822274e-01  2.24195182e-01
 -3.31713818e-02 -1.86505497e-01  7.92465508e-02 -3.62966806e-02
 -2.17764109e-01 -3.88848722e-01 -1.79789215e-01  1.97791129e-01
  4.59509492e-01  2.99418807e-01 -1.20765477e-01  2.50229329e-01
  3.32854331e-01 -5.57260454e-01  9.98128429e-02 -8.94165933e-02
 -1.86329093e-02 -1.12912096e-01  1.14382133e-01  8.44667777e-02
 -2.07026750e-01 -2.02505708e-01 -2.42139846e-02 -7.68317133e-02
  3.85829687e-01 -5.00984132e-01 -1.06176935e-01  4.02221307e-02
  6.17083088e-02  2.55185872e-01 -1.89340904e-01  4.04623866e-01
  7.34660476e-02  3.95673454e-01  3.15708160e-01  1.39474332e-01
  1.47190452e-01 -9.61203352e-02 -1.04761571e-01 -5.12230210e-03
 -2.18170688e-01  2.77987540e-01 -5.32123327e-01  1.57163739e-01
 -1.48733154e-01 -1.19580567e-01 -1.11912036e+00  6.29404634e-02
  5.67370534e-01  2.22190931e-01  2.45428868e-02  1.06451668e-01
  5.59879392e-02  2.00048238e-02  6.19525075e-01 -2.79950917e-01
  8.30056667e-02 -1.01979822e-01  3.76098193e-02  2.07834914e-01
 -2.12474793e-01 -9.97227252e-01  4.65939008e-02  2.77854800e-01
  6.83636516e-02 -1.68742165e-01 -2.26514220e-01 -1.65579677e-01
  1.82087898e-01  1.92270726e-02 -3.03173423e-01  1.66918576e-01
 -4.16777223e-01  5.75758874e-01  1.79978102e-01 -1.08357556e-01
  1.19115487e-02 -1.37978449e-01  1.76606387e-01  2.03955099e-01
  3.19143414e-01 -1.62241846e-01 -1.37815792e-02 -2.33998001e-01
 -4.05672267e-02 -5.48504405e-02  3.06396663e-01  1.21409059e-01
 -1.72086686e-01  2.81217128e-01  2.98388302e-01  2.29147300e-02
  6.11088753e-01  6.48425370e-02  5.71283400e-02  4.68676724e-02
 -2.16526851e-01 -3.11924573e-02 -3.40404004e-01 -3.81033063e-01
  1.11829512e-01 -2.22395122e-01 -5.94842248e-03  3.17387342e-01
 -1.54264152e-01  3.18645000e-01 -9.59148481e-02  2.90257454e-01
  1.56697214e-01 -3.31573695e-01 -3.77038643e-02 -3.21030736e-01
  2.92545855e-01 -3.02191675e-01  8.21035802e-02 -2.36538380e-01
  1.05316058e-01  3.25829953e-01 -1.63951650e-01 -1.04067653e-01
 -3.69009137e-01 -2.62314081e-01 -4.95833494e-02  5.70807606e-02
 -2.84534812e-01 -6.11083619e-02 -1.58467948e-01 -1.84023187e-01
  4.13187921e-01 -1.35135688e-02  5.77755809e-01 -1.76666588e-01
  5.60538769e-01  1.88213378e-01 -2.80664722e-03  2.64949888e-01
  1.10879196e-02  3.60808134e-01  5.23279086e-02  2.07782775e-01]"
Concepts,"Concepts ¶ Neural Network Neuron Synapse Weights Bias Layers Weighted Input Activation Functions Loss Functions Optimization Algorithms Gradient Accumulation Neural Network ¶ Neural networks are a class of machine learning algorithms used to model complex patterns in datasets using multiple hidden layers and non-linear activation functions. A neural network takes an input, passes it through multiple layers of hidden neurons (mini-functions with unique coefficients that must be learned), and outputs a prediction representing the combined input of all the neurons. Neural networks are trained iteratively using optimization techniques like gradient descent. After each cycle of training, an error metric is calculated based on the difference between prediction and target. The derivatives of this error metric are calculated and propagated back through the network using a technique called backpropagation. Each neuron’s coefficients (weights) are then adjusted relative to how much they contributed to the total error. This process is repeated iteratively until the network error drops below an acceptable threshold. Neuron ¶ A neuron takes a group of weighted inputs, applies an activation function, and returns an output. Inputs to a neuron can either be features from a training set or outputs from a previous layer’s neurons. Weights are applied to the inputs as they travel along synapses to reach the neuron. The neuron then applies an activation function to the “sum of weighted inputs” from each incoming synapse and passes the result on to all the neurons in the next layer. Synapse ¶ Synapses are like roads in a neural network. They connect inputs to neurons, neurons to neurons, and neurons to outputs. In order to get from one neuron to another, you have to travel along the synapse paying the “toll” (weight) along the way. Each connection between two neurons has a unique synapse with a unique weight attached to it. When we talk about updating weights in a network, we’re really talking about adjusting the weights on these synapses. Weights ¶ Weights are values that control the strength of the connection between two neurons. That is, inputs are typically multiplied by weights, and that defines how much influence the input will have on the output. In other words: when the inputs are transmitted between neurons, the weights are applied to the inputs along with an additional value (the bias) Bias ¶ Bias terms are additional constants attached to neurons and added to the weighted input before the activation function is applied. Bias terms help models represent patterns that do not necessarily pass through the origin. For example, if all your features were 0, would your output also be zero? Is it possible there is some base value upon which your features have an effect? Bias terms typically accompany weights and must also be learned by your model. Layers ¶ Input Layer Holds the data your model will train on. Each neuron in the input layer represents a unique attribute in your dataset (e.g. height, hair color, etc.). Hidden Layer Sits between the input and output layers and applies an activation function before passing on the results. There are often multiple hidden layers in a network. In traditional networks, hidden layers are typically fully-connected layers — each neuron receives input from all the previous layer’s neurons and sends its output to every neuron in the next layer. This contrasts with how convolutional layers work where the neurons send their output to only some of the neurons in the next layer. Output Layer The final layer in a network. It receives input from the previous hidden layer, optionally applies an activation function, and returns an output representing your model’s prediction. Weighted Input ¶ A neuron’s input equals the sum of weighted outputs from all neurons in the previous layer. Each input is multiplied by the weight associated with the synapse connecting the input to the current neuron. If there are 3 inputs or neurons in the previous layer, each neuron in the current layer will have 3 distinct weights — one for each each synapse. Single Input \[\begin{split}Z &= Input \cdot Weight \\ &= X W\end{split}\] Multiple Inputs \[\begin{split}Z &= \sum_{i=1}^{n}x_i w_i \\ &= x_1 w_1 + x_2 w_2 + x_3 w_3\end{split}\] Notice, it’s exactly the same equation we use with linear regression! In fact, a neural network with a single neuron is the same as linear regression! The only difference is the neural network post-processes the weighted input with an activation function. Activation Functions ¶ Activation functions live inside neural network layers and modify the data they receive before passing it to the next layer. Activation functions give neural networks their power — allowing them to model complex non-linear relationships. By modifying inputs with non-linear functions neural networks can model highly complex relationships between features. Popular activation functions include relu and sigmoid . Activation functions typically have the following properties: Non-linear - In linear regression we’re limited to a prediction equation that looks like a straight line. This is nice for simple datasets with a one-to-one relationship between inputs and outputs, but what if the patterns in our dataset were non-linear? (e.g. \(x^2\) , sin, log). To model these relationships we need a non-linear prediction equation.¹ Activation functions provide this non-linearity. Continuously differentiable — To improve our model with gradient descent, we need our output to have a nice slope so we can compute error derivatives with respect to weights. If our neuron instead outputted 0 or 1 (perceptron), we wouldn’t know in which direction to update our weights to reduce our error. Fixed Range — Activation functions typically squash the input data into a narrow range that makes training the model more stable and efficient. Loss Functions ¶ A loss function, or cost function, is a wrapper around our model’s predict function that tells us “how good” the model is at making predictions for a given set of parameters. The loss function has its own curve and its own derivatives. The slope of this curve tells us how to change our parameters to make the model more accurate! We use the model to make predictions. We use the cost function to update our parameters. Our cost function can take a variety of forms as there are many different cost functions available. Popular loss functions include: MSE (L2) and Cross-entropy Loss . Optimization Algorithms ¶ Be the first to contribute! Gradient Accumulation ¶ Gradient accumulation is a mechanism to split the batch of samples—used for training a neural network—into several mini-batches of samples that will be run sequentially. This is used to enable using large batch sizes that require more GPU memory than available. Gradient accumulation helps in doing so by using mini-batches that require an amount of GPU memory that can be satisfied. Gradient accumulation means running all mini-batches sequentially (generally on the same GPU) while accumulating their calculated gradients and not updating the model variables - the weights and biases of the model. The model variables must not be updated during the accumulation in order to ensure all mini-batches use the same model variable values to calculate their gradients. Only after accumulating the gradients of all those mini-batches will we generate and apply the updates for the model variables. This results in the same updates for the model parameters as if we were to use the global batch. More details, a technical and algorithmical deep-dive, how-to tutorials, and examples can be found at [2]. References [1] http://sebastianruder.com/optimizing-gradient-descent/ [2] https://github.com/run-ai/runai/tree/master/runai/ga/","[ 2.32046068e-01  1.50997251e-01 -2.01483145e-02  2.05206662e-01
  6.31301880e-01  1.07600600e-01  2.56673932e-01  2.37123668e-01
  2.47500420e-01 -9.58767906e-02 -7.47866184e-02  2.88500637e-01
  2.13911802e-01  2.03884378e-01 -5.25429785e-01 -7.70747423e-01
 -2.08791226e-01 -1.11434376e-02 -2.36409485e-01 -1.12524919e-01
 -1.37115955e-01 -8.31920281e-02 -7.47967362e-01 -2.28223860e-01
  3.45528759e-02  4.26931642e-02  3.08579534e-01  1.80424944e-01
 -1.73805237e-01  3.24288607e-01 -2.13268042e-01  5.81772625e-02
 -1.90772787e-02  2.42185116e-01  7.28770271e-02 -2.33605672e-02
  2.07924902e-01  2.82297581e-01 -2.07734019e-01 -1.88472345e-01
 -3.19521353e-02  5.85392296e-01 -1.58693373e-01  3.13365102e-01
 -8.57979283e-02 -1.19761303e-01 -4.39882696e-01  3.66227686e-01
  2.13249847e-01  4.40126471e-02  3.05998266e-01  1.59339398e-01
 -1.30437955e-01 -1.15773201e-01  1.18853882e-01 -8.53423849e-02
  2.00800952e-02  2.36592039e-01  2.34613240e-01 -1.50586903e-01
  2.09712937e-01 -1.92666426e-01  6.93040937e-02  4.27977115e-01
 -1.47407413e-01 -2.76328564e-01  2.42412031e-01  2.87741333e-01
  2.60579884e-01  1.37974098e-01 -4.57697481e-01 -3.20169389e-01
  3.06077987e-01 -7.64201164e-01 -9.01206210e-03 -3.63936961e-01
 -1.51633158e-01 -8.66689608e-02 -2.31161967e-01  2.51356959e-01
  7.66889900e-02  1.58267617e-01  2.14624822e-01  1.05820045e-01
  2.36738175e-01 -1.49618924e-01  1.71985373e-01 -2.90626317e-01
  5.66406623e-02 -1.08297445e-01 -5.75193405e-01 -2.34126151e-01
 -3.21575642e-01  1.71452790e-01 -1.48305595e-01 -2.16357470e-01
 -3.90865467e-02 -6.08405411e-01  2.86066495e-02  3.89855027e-01
  2.37538964e-02 -1.34925991e-01  5.89905441e-01 -3.92230824e-02
 -5.16120344e-02  5.00336289e-01 -5.65882698e-02  1.38270324e-02
 -1.59466177e-01 -1.56534314e-01 -3.09490234e-01 -8.73327255e-02
 -2.54205257e-01  5.30417785e-02  1.31888539e-01 -3.37768435e-01
  7.58488625e-02  3.31443101e-02 -1.08159214e-01  3.78194362e-01
 -1.18507206e-01  2.21757330e-02 -4.90920842e-01  1.17046051e-01
  1.57641284e-02  3.29826586e-02  1.51056014e-02  1.63664073e-01
 -6.26233518e-02  7.80651197e-02 -5.74823022e-02  3.11729554e-02
 -3.17555070e-01 -6.39602900e-01 -8.05961415e-02 -2.80244797e-02
  4.32523899e-04  2.72711158e-01 -9.80824605e-02  7.40690231e-02
 -2.42535174e-01  6.18467107e-02  3.20139021e-01 -2.08436653e-01
  1.60954714e-01 -9.56227258e-02  2.50099778e-01 -1.68274611e-01
 -3.81266288e-02 -1.20865919e-01 -1.08278424e-01  3.55060309e-01
  1.57932281e-01 -2.26825178e-01  3.47942114e-03  1.14442870e-01
  5.07469773e-01 -9.29707885e-02  3.73029053e-01 -4.63480026e-01
  2.07821280e-02  3.03729951e-01 -2.23319768e-03  9.20695625e-03
  1.97978392e-02 -2.78235003e-02 -3.33133906e-01  8.34266692e-02
 -3.14638913e-01  3.79237175e-01 -3.05924863e-02  4.58993375e-01
 -2.33797014e-01  1.11041576e-01 -1.59570605e-01  3.00922096e-01
 -2.19708383e-01  2.64719427e-02  1.01162270e-02 -1.15288496e-01
  1.89237803e-01 -1.06054530e-01  1.69922203e-01  3.91171500e-02
  1.04928061e-01  2.76602685e-01 -7.16143250e-02  3.08315277e-01
  3.41707647e-01 -3.91332693e-02 -9.54030827e-03  3.68489102e-02
 -1.10697635e-01  8.39892402e-02  1.13739587e-01 -2.77518749e-01
  2.11999208e-01  1.05568767e-01  6.15722910e-02 -4.56373215e-01
  1.41082942e-01 -3.13201994e-01  7.63265565e-02 -2.35313371e-01
  7.52276555e-02 -1.48680627e-01 -2.60119468e-01  2.07844824e-01
  1.81125402e-01 -7.01244026e-02  1.66608602e-01  8.89517292e-02
 -2.05426797e-01  2.97409892e-01 -1.73772529e-01 -2.05640703e-01
 -2.54236996e-01  8.72299433e-01 -5.60877919e-02  1.47341534e-01
  2.02785403e-01  9.86991152e-02  4.38515663e-01 -8.25272352e-02
  8.26303005e-01 -3.85864228e-01 -1.69395119e-01  4.14226055e-02
 -2.44463325e-01 -6.45933628e-01  1.37790710e-01  8.55568945e-02
 -6.13958716e-01  1.35631293e-01 -3.35916281e-02  8.42586718e-03
  1.85986489e-01  1.54970944e-01 -1.87779561e-01 -1.22147605e-01
 -4.30591851e-02 -2.67823935e-01  2.80819952e-01 -2.93004096e-01
  1.60138011e-02  2.38146812e-01  2.29440153e-01 -2.30294526e-01
 -1.46196514e-01 -2.89209217e-01  7.18106478e-02 -3.28731984e-01
  9.11385268e-02  1.78989209e-03 -5.51368706e-02 -5.93934432e-02
 -2.55127728e-01 -4.12200391e-01 -5.96576810e-01  4.99351323e-01
 -1.95434332e-01 -2.83064008e-01 -4.36276123e-02  1.29897088e-01
  1.58851847e-01 -2.81406015e-01  1.28184766e-01 -1.79702133e-01
  1.00740850e-01  9.18091759e-02 -5.08924127e-02 -2.49713346e-01
  1.96239993e-01 -2.55399704e-01  1.54700577e-01 -1.10384420e-01
  8.84822756e-02 -7.40394369e-02 -4.56821173e-04  1.52624696e-01
 -1.67133600e-01  3.43187630e-01 -7.05290064e-02 -4.93616909e-01
  2.43731216e-03 -1.09909117e-01  2.11204499e-01 -4.99067962e-01
  1.95365563e-01  3.89516115e-01 -6.95835985e-03 -2.49845251e-01
 -1.55567348e-01  3.76625478e-01 -8.32610391e-03  2.01099217e-01
  4.80320722e-01 -3.01060498e-01 -1.21954419e-02 -1.05732158e-01
  1.10171728e-01  2.30478108e-01  1.81665361e-01  3.67727697e-01
  9.55402479e-02 -2.69738972e-01 -1.68722004e-01  2.59345680e-01
 -6.16442263e-02 -4.99900699e-01 -1.49116397e-01  1.11155160e-01
  3.67337704e-01  6.97220415e-02 -6.65022433e-02  5.92393756e-01
  3.96907628e-01  8.67619887e-02 -9.61555839e-02 -7.87638128e-04
  1.67425573e-01 -8.27941224e-02 -6.89814538e-02  6.11981452e-02
  1.67631924e-01 -1.31741568e-01  9.27722305e-02 -1.06360912e-01
  4.15473700e-01 -3.11892450e-01  1.12272024e-01  1.46658212e-01
 -3.88732031e-02  2.70454288e-01  1.08937591e-01 -1.96626961e-01
 -2.32846081e-01 -4.31019291e-02 -2.82896250e-01  1.24484509e-01
  5.36651134e-01  4.23769146e-01 -1.16578728e-01 -6.01588301e-02
 -2.92671144e-01  2.18306661e-01 -1.74096689e-01  8.02469924e-02
  3.92579347e-01  1.09656468e-01  2.53687590e-01 -1.97248429e-01
  1.97699934e-01  5.35652280e-01 -2.12789357e-01 -1.34728193e-01
 -1.75392970e-01 -4.40758653e-02 -1.06712645e-02  4.27060276e-01
 -4.76507768e-02  3.85947227e-02  1.16133280e-01  1.28110394e-01
  2.04115808e-01 -8.89256597e-02 -2.77585596e-01  1.80368692e-01
  3.73455174e-02 -8.15992653e-02  2.20575444e-02 -1.73296154e-01
  7.26925433e-02  1.33034930e-01  4.06982869e-01 -5.23762703e-02
  3.17446828e-01 -1.84348211e-01  2.01075837e-01  3.17310393e-01
 -1.94090739e-01  1.34863943e-01 -2.17899144e-01 -1.27676159e-01
 -1.21549912e-01 -4.99161892e-03  1.40908301e-01  2.40735948e-01
  2.57915795e-01 -8.38662386e-02 -8.75907615e-02  1.53153259e-02
 -4.41658556e-01  1.21218398e-01  1.64763615e-01 -2.07543999e-01
 -1.53234631e-01 -4.28554893e-01 -3.79167199e-01  3.47097725e-01
  6.23809639e-03 -3.33074898e-01  1.79480672e-01  5.10611236e-01
 -6.89720362e-02  5.04207574e-02  3.48428607e-01  1.91965193e-01
  1.31211087e-01  6.41851544e-01  1.24528296e-01 -1.72092035e-01
  2.17273206e-01 -1.29171774e-01  3.94167125e-01 -1.27990335e-01
 -5.33867627e-04  1.68997273e-01 -5.14011830e-02 -1.90917835e-01
 -5.09437174e-02 -4.00534749e-01  4.55614105e-02 -7.64351040e-02
  2.82820404e-01  2.08344400e-01  1.30330473e-01  2.01748520e-01
 -6.56743884e-01  2.60922462e-01 -4.32998613e-02 -2.51542866e-01
  3.37326415e-02 -7.62924878e-03  1.13583812e-02 -3.22790086e-01
  2.06447750e-01 -1.45214602e-01 -1.87218666e-01 -4.26723808e-02
  5.08904457e-01  3.17565233e-01  8.12154040e-02  3.23369280e-02
 -7.23194052e-03 -5.89385927e-02 -2.57521898e-01  1.08871937e-01
 -5.88041395e-02  2.15223074e-01  9.20993909e-02 -1.63948894e-01
  5.28419018e-03  4.30275500e-02 -1.35742545e-01 -2.66087025e-01
  6.22255355e-03  2.62035895e-03 -2.79647022e-01 -1.59796327e-02
  8.87642205e-02  1.63897306e-01 -1.50494650e-01  2.58649886e-03
 -3.10782403e-01  1.02305852e-01  2.62818523e-02 -6.82405084e-02
 -4.71779287e-01 -1.54179066e-01 -3.86762679e-01 -1.33316413e-01
 -7.41188601e-02  2.07413971e-01 -1.61098652e-02  2.25553200e-01
 -6.18773028e-02 -1.80268794e-01  1.87202781e-01 -1.94446430e-01
 -1.02092966e-01  7.41920620e-02 -1.43332466e-01  4.02443483e-03
 -3.14747766e-02  3.55888009e-01  1.15984693e-01 -1.50729835e-01
 -1.88798919e-01  3.29989418e-02 -1.76446974e-01  2.25462258e-01
  2.63989195e-02  8.58096406e-02  3.63154173e-01 -9.34803337e-02
 -2.61800170e-01  2.16562569e-01 -2.86126196e-01  1.21763587e-01
 -7.35653713e-02  4.50705290e-02  1.24737620e-01  1.15886569e-01
  2.13105474e-02  3.84237230e-01 -2.06151634e-01 -5.74028753e-02
  1.96247086e-01  3.70254874e-01 -1.42710090e-01  3.94445598e-01
  2.01266706e-01  2.39977062e-01  6.11571968e-02  6.22991562e-01
  3.40204120e-01 -5.25248311e-02 -1.23280227e-01  2.31539041e-01
  1.22540314e-02  4.98521402e-02 -8.76333863e-02  2.53970772e-01
  4.35513146e-02 -1.53916195e-01  1.20536357e-01  1.55268610e-01
  2.77834386e-03 -5.96307576e-01 -3.89647663e-01  2.00561672e-01
  3.22471112e-02 -6.59711137e-02  3.96977246e-01 -1.18759207e-01
 -1.87022053e-02 -1.23248398e-01  3.99013981e-02 -1.22937143e-01
 -6.17002770e-02 -2.44281933e-01  3.32955092e-01 -9.51378345e-02
 -5.16433418e-02  1.31445127e-02 -3.38953853e-01  7.64452666e-02
  2.39345692e-02  1.41927510e-01 -2.89154816e-02  8.02178741e-01
 -1.04493350e-01  9.43478122e-02  3.76650989e-01  2.99447596e-01
 -1.97133005e-01 -2.39973694e-01 -6.74549341e-02 -9.63480696e-02
  1.60554707e-01 -1.39584258e-01 -5.52055463e-02 -1.35964043e-02
 -2.91524678e-01  9.29726660e-03  1.31020263e-01  7.48697370e-02
  2.52924323e-01  3.47846597e-01  4.39900637e-01  1.25391841e-01
 -1.66499734e-01 -5.67743063e-01  5.32902181e-01  3.75718996e-03
 -5.63549176e-02  2.73542583e-01 -5.77025935e-02 -2.94657886e-01
 -2.14990914e-01 -8.96132141e-02  2.69856423e-01 -6.21435307e-02
  3.50921035e-01  2.74404109e-01 -4.45520699e-01 -8.41443762e-02
 -2.62400359e-02 -1.13441266e-01 -5.60265817e-02  2.35078812e-01
 -2.15927780e-01 -7.72883147e-02 -1.00945756e-01  1.22399755e-01
  1.77268893e-01  2.72451006e-02  1.78343296e-01 -6.00890070e-02
  2.29400575e-01 -1.29644766e-01  5.44762388e-02 -1.26059532e-01
 -5.12999967e-02 -2.71471351e-01 -1.91294029e-01 -5.30734770e-02
 -2.01734990e-01  5.91306016e-03  8.60568807e-02  6.66916966e-01
  8.39403123e-02 -3.42621878e-02 -1.96443886e-01  2.73771398e-02
 -3.61559950e-02 -2.72242595e-02 -1.97102889e-01  2.30260007e-02
  3.34426850e-01 -5.13439178e-01  1.71939164e-01  3.31143618e-01
 -1.37156427e-01 -2.09199354e-01  3.17639373e-02  2.12086052e-01
 -3.34500968e-02 -3.85067225e-01  7.07205683e-02 -2.21757233e-01
  1.96103886e-01 -1.80836231e-01 -3.09729010e-01  1.54655963e-01
  3.55135143e-01  2.28198543e-01  4.13092375e-02  7.39069581e-02
  1.01964802e-01 -4.82936800e-01  6.99938238e-02  6.93038628e-02
  1.19824231e-01  1.71763361e-01  2.72332489e-01  3.58425468e-01
  1.04551330e-01 -2.95198206e-02  2.46108845e-01 -5.62992841e-02
  1.70429319e-01 -4.22822088e-01  9.84859616e-02  1.30536973e-01
 -1.63666792e-02 -3.52122456e-01  1.62841938e-02 -3.22763808e-02
  4.08902705e-01  4.10285443e-01 -1.69342905e-01  1.87515259e-01
  6.60334408e-01 -3.12828124e-02  3.73587757e-03 -9.73109007e-02
 -9.72260162e-02  2.13703245e-01 -3.30928445e-01  3.00998390e-01
  2.05421492e-01  3.12216759e-01  2.17666954e-01  5.26697412e-02
  4.89405960e-01  3.89757246e-01 -2.99671173e-01  8.10580105e-02
 -8.21508914e-02  1.97043836e-01  4.06509519e-01  2.84231722e-01
  1.56535864e-01  1.41268969e-03  1.43056542e-01  1.30491992e-02
  4.72286455e-02 -4.10369396e-01 -1.02979459e-01  3.96316163e-02
  2.08724365e-01  5.12111187e-02  5.89343421e-02 -2.76765466e-01
 -1.21030152e-01  1.49615541e-01 -8.29414278e-02 -5.22709250e-01
 -6.21944256e-02  2.50519186e-01  5.19825697e-01 -2.08535194e-01
 -1.85718745e-01 -3.84917706e-02  1.22408599e-01 -2.42090762e-01
 -2.35197823e-02 -1.62391990e-01 -1.52724832e-01 -7.87092559e-03
  1.47220835e-01  2.18738258e-01 -1.38507813e-01 -1.12408236e-01
  2.55263299e-01 -4.63629365e-02  4.29847807e-01  1.56465247e-01
  3.52155901e-02 -3.82407546e-01  3.73956621e-01  1.78969428e-02
 -1.07826293e-03 -4.12262753e-02  4.89823334e-03  2.29273379e-01
 -8.05037558e-01 -4.24590111e-01 -2.49656022e-01  8.51568699e-01
  1.98262438e-01  1.42278790e-01  2.04785615e-01  3.50814193e-01
  2.77682453e-01  1.14705518e-01 -6.10174835e-02 -3.20121467e-01
  2.06981659e-01 -5.01703024e-01  2.31417060e-01 -1.84493184e-01
  3.12298179e-01 -2.61468709e-01  3.61729600e-02 -1.30744442e-01
 -4.38013792e-01 -2.74545178e-02  2.55749375e-01  3.14497590e-01
 -1.03860833e-01 -1.56548381e-01  3.93609345e-01 -1.88175559e-01
  2.70963073e-01  1.40662432e-01  6.30476773e-02  8.70436989e-03
  5.00299335e-01 -1.36804968e-01 -3.53017688e-01 -4.82003018e-02
  9.23583925e-01 -4.93700542e-02  1.75953358e-01  5.50634414e-02]"
Forwardpropagation,"Forwardpropagation ¶ Simple Network Steps Code Larger Network Architecture Weight Initialization Bias Terms Working with Matrices Dynamic Resizing Refactoring Our Code Final Result Simple Network ¶ Forward propagation is how neural networks make predictions. Input data is “forward propagated” through the network layer by layer to the final layer which outputs a prediction. For the toy neural network above, a single pass of forward propagation translates mathematically to: \[Prediction = A(\;A(\;X W_h\;)W_o\;)\] Where \(A\) is an activation function like ReLU , \(X\) is the input and \(W_h\) and \(W_o\) are weights. Steps ¶ Calculate the weighted input to the hidden layer by multiplying \(X\) by the hidden weight \(W_h\) Apply the activation function and pass the result to the final layer Repeat step 2 except this time \(X\) is replaced by the hidden layer’s output, \(H\) Code ¶ Let’s write a method feed_forward() to propagate input data through our simple network of 1 hidden layer. The output of this method represents our model’s prediction. def relu ( z ): return max ( 0 , z ) def feed_forward ( x , Wh , Wo ): # Hidden layer Zh = x * Wh H = relu ( Zh ) # Output layer Zo = H * Wo output = relu ( Zo ) return output x is the input to the network, Zo and Zh are the weighted inputs and Wo and Wh are the weights. Larger Network ¶ The simple network above is helpful for learning purposes, but in reality neural networks are much larger and more complex. Modern neural networks have many more hidden layers, more neurons per layer, more variables per input, more inputs per training set, and more output variables to predict. Here is a slightly larger network that will introduce us to matrices and the matrix operations used to train arbitrarily large neural networks. Architecture ¶ To accomodate arbitrarily large inputs or outputs, we need to make our code more extensible by adding a few parameters to our network’s __init__ method: inputLayerSize, hiddenLayerSize, outputLayerSize. We’ll still limit ourselves to using one hidden layer, but now we can create layers of different sizes to respond to the different inputs or outputs. INPUT_LAYER_SIZE = 1 HIDDEN_LAYER_SIZE = 2 OUTPUT_LAYER_SIZE = 2 Weight Initialization ¶ Unlike last time where Wh and Wo were scalar numbers, our new weight variables will be numpy arrays. Each array will hold all the weights for its own layer — one weight for each synapse. Below we initialize each array with the numpy’s np.random.randn(rows, cols) method, which returns a matrix of random numbers drawn from a normal distribution with mean 0 and variance 1. def init_weights (): Wh = np . random . randn ( INPUT_LAYER_SIZE , HIDDEN_LAYER_SIZE ) * \ np . sqrt ( 2.0 / INPUT_LAYER_SIZE ) Wo = np . random . randn ( HIDDEN_LAYER_SIZE , OUTPUT_LAYER_SIZE ) * \ np . sqrt ( 2.0 / HIDDEN_LAYER_SIZE ) Here’s an example calling random.randn() : arr = np . random . randn ( 1 , 2 ) print ( arr ) >> [[ - 0.36094661 - 1.30447338 ]] print ( arr . shape ) >> ( 1 , 2 ) As you’ll soon see, there are strict requirements on the dimensions of these weight matrices. The number of rows must equal the number of neurons in the previous layer. The number of columns must match the number of neurons in the next layer. A good explanation of random weight initalization can be found in the Stanford CS231 course notes [1] chapter on neural networks. Bias Terms ¶ Bias terms allow us to shift our neuron’s activation outputs left and right. This helps us model datasets that do not necessarily pass through the origin. Using the numpy method np.full() below, we create two 1-dimensional bias arrays filled with the default value 0.2 . The first argument to np.full is a tuple of array dimensions. The second is the default value for cells in the array. def init_bias (): Bh = np . full (( 1 , HIDDEN_LAYER_SIZE ), 0.1 ) Bo = np . full (( 1 , OUTPUT_LAYER_SIZE ), 0.1 ) return Bh , Bo Working with Matrices ¶ To take advantage of fast linear algebra techniques and GPUs, we need to store our inputs, weights, and biases in matrices. Here is our neural network diagram again with its underlying matrix representation. What’s happening here? To better understand, let’s walk through each of the matrices in the diagram with an emphasis on their dimensions and why the dimensions are what they are. The matrix dimensions above flow naturally from the architecture of our network and the number of samples in our training set. Matrix dimensions Var Name Dimensions Explanation X Input (3, 1) Includes 3 rows of training data, and each row has 1 attribute (height, price, etc.) Wh Hidden weights (1, 2) These dimensions are based on number of rows equals the number of attributes for the observations in our training set. The number columns equals the number of neurons in the hidden layer. The dimensions of the weights matrix between two layers is determined by the sizes of the two layers it connects. There is one weight for every input-to-neuron connection between the layers. Bh Hidden bias (1, 2) Each neuron in the hidden layer has is own bias constant. This bias matrix is added to the weighted input matrix before the hidden layer applies ReLU. Zh Hidden weighted input (1, 2) Computed by taking the dot product of X and Wh. The dimensions (1,2) are required by the rules of matrix multiplication. Zh takes the rows of in the inputs matrix and the columns of weights matrix. We then add the hidden layer bias matrix Bh. H Hidden activations (3, 2) Computed by applying the Relu function to Zh. The dimensions are (3,2) — the number of rows matches the number of training samples and the number of columns equals the number of neurons. Each column holds all the activations for a specific neuron. Wo Output weights (2, 2) The number of rows matches the number of hidden layer neurons and the number of columns equals the number of output layer neurons. There is one weight for every hidden-neuron-to-output-neuron connection between the layers. Bo Output bias (1, 2) There is one column for every neuron in the output layer. Zo Output weighted input (3, 2) Computed by taking the dot product of H and Wo and then adding the output layer bias Bo. The dimensions are (3,2) representing the rows of in the hidden layer matrix and the columns of output layer weights matrix. O Output activations (3, 2) Each row represents a prediction for a single observation in our training set. Each column is a unique attribute we want to predict. Examples of two-column output predictions could be a company’s sales and units sold, or a person’s height and weight. Dynamic Resizing ¶ Before we continue I want to point out how the matrix dimensions change with changes to the network architecture or size of the training set. For example, let’s build a network with 2 input neurons, 3 hidden neurons, 2 output neurons, and 4 observations in our training set. Now let’s use same number of layers and neurons but reduce the number of observations in our dataset to 1 instance : As you can see, the number of columns in all matrices remains the same. The only thing that changes is the number of rows the layer matrices, which fluctuate with the size of the training set. The dimensions of the weight matrices remain unchanged. This shows us we can use the same network, the same lines of code, to process any number of observations. Refactoring Our Code ¶ Here is our new feed forward code which accepts matrices instead of scalar inputs. def feed_forward ( X ): ''' X - input matrix Zh - hidden layer weighted input Zo - output layer weighted input H - hidden layer activation y - output layer yHat - output layer predictions ''' # Hidden layer Zh = np . dot ( X , Wh ) + Bh H = relu ( Zh ) # Output layer Zo = np . dot ( H , Wo ) + Bo yHat = relu ( Zo ) return yHat Weighted input The first change is to update our weighted input calculation to handle matrices. Using dot product, we multiply the input matrix by the weights connecting them to the neurons in the next layer. Next we add the bias vector using matrix addition. Zh = np . dot ( X , Wh ) + Bh The first column in Bh is added to all the rows in the first column of resulting dot product of X and Wh . The second value in Bh is added to all the elements in the second column. The result is a new matrix, Zh which has a column for every neuron in the hidden layer and a row for every observation in our dataset. Given all the layers in our network are fully-connected , there is one weight for every neuron-to-neuron connection between the layers. The same process is repeated for the output layer, except the input is now the hidden layer activation H and the weights Wo . ReLU activation The second change is to refactor ReLU to use elementwise multiplication on matrices. It’s only a small change, but its necessary if we want to work with matrices. np.maximum() is actually extensible and can handle both scalar and array inputs. def relu ( Z ): return np . maximum ( 0 , Z ) In the hidden layer activation step, we apply the ReLU activation function np.maximum(0,Z) to every cell in the new matrix. The result is a matrix where all negative values have been replaced by 0. The same process is repeated for the output layer, except the input is Zo . Final Result ¶ Putting it all together we have the following code for forward propagation with matrices. INPUT_LAYER_SIZE = 1 HIDDEN_LAYER_SIZE = 2 OUTPUT_LAYER_SIZE = 2 def init_weights (): Wh = np . random . randn ( INPUT_LAYER_SIZE , HIDDEN_LAYER_SIZE ) * \ np . sqrt ( 2.0 / INPUT_LAYER_SIZE ) Wo = np . random . randn ( HIDDEN_LAYER_SIZE , OUTPUT_LAYER_SIZE ) * \ np . sqrt ( 2.0 / HIDDEN_LAYER_SIZE ) def init_bias (): Bh = np . full (( 1 , HIDDEN_LAYER_SIZE ), 0.1 ) Bo = np . full (( 1 , OUTPUT_LAYER_SIZE ), 0.1 ) return Bh , Bo def relu ( Z ): return np . maximum ( 0 , Z ) def relu_prime ( Z ): ''' Z - weighted input matrix Returns gradient of Z where all negative values are set to 0 and all positive values set to 1 ''' Z [ Z < 0 ] = 0 Z [ Z > 0 ] = 1 return Z def cost ( yHat , y ): cost = np . sum (( yHat - y ) ** 2 ) / 2.0 return cost def cost_prime ( yHat , y ): return yHat - y def feed_forward ( X ): ''' X - input matrix Zh - hidden layer weighted input Zo - output layer weighted input H - hidden layer activation y - output layer yHat - output layer predictions ''' # Hidden layer Zh = np . dot ( X , Wh ) + Bh H = relu ( Zh ) # Output layer Zo = np . dot ( H , Wo ) + Bo yHat = relu ( Zo ) References [1] http://cs231n.github.io/neural-networks-2/#init","[ 6.41646236e-02 -3.17992382e-02 -1.17557354e-01  2.26824824e-02
  4.32891905e-01  3.69250119e-01  1.67009085e-01  4.31095600e-01
  2.68607855e-01 -4.73610573e-02 -3.98909301e-02 -6.03836365e-02
  1.61210626e-01 -2.43415713e-01 -7.02999949e-01 -1.52071685e-01
 -2.36968473e-02 -3.71538103e-01 -1.66783974e-01 -1.43072546e-01
 -2.49227315e-01 -1.77951455e-01 -4.40786242e-01 -2.74439994e-02
 -1.05847970e-01  2.12509900e-01 -1.37164488e-01  1.90140739e-01
 -5.42033911e-02 -2.05407977e-01 -5.46060316e-02 -3.11030820e-03
  1.79833978e-01  3.61900449e-01  4.38183665e-01 -1.03437811e-01
  2.87195016e-03  3.00886184e-01 -5.46350479e-01 -1.21837899e-01
 -4.97926742e-01  7.07526326e-01 -2.65942931e-01  2.95196176e-01
 -4.53864038e-02 -2.66457170e-01 -4.84820515e-01 -2.32597906e-02
  3.48596573e-02 -1.16365924e-01  3.23037028e-01  7.09130988e-02
 -6.23733439e-02 -1.05999514e-01  1.92044258e-01 -6.97367191e-02
 -3.52712125e-02 -4.24683169e-02 -1.21937096e-01 -6.12199157e-02
  1.79235622e-01 -8.17838609e-02 -1.85751915e-01  2.90009439e-01
  8.84462893e-02 -1.42171070e-01  3.52073282e-01  5.87083459e-01
 -1.76972836e-01  2.95398772e-01 -1.90195411e-01 -3.02165180e-01
  1.19877890e-01 -3.55857015e-01 -2.59028748e-03  1.19786218e-01
 -5.56564927e-02  5.47287241e-02 -3.72382939e-01  4.71406102e-01
 -3.05513591e-02  2.59266138e-01  1.95729226e-01 -7.31148347e-02
 -1.01116069e-01  1.89369261e-01  6.82345480e-02 -4.32775430e-02
 -3.43444124e-02 -7.80945644e-03 -6.26727939e-01 -3.49145055e-01
 -4.85459745e-01  1.28301412e-01 -2.51714349e-01 -2.56205022e-01
 -2.65245102e-02 -3.75840604e-01  1.04518920e-01  1.63631588e-01
  1.47104889e-01 -4.33806516e-02  3.13415796e-01 -3.57289135e-01
  1.14597633e-01  5.57309031e-01 -4.33874205e-02  1.00751534e-01
 -1.02484025e-01 -7.50869215e-02 -1.49140865e-01  2.69332111e-01
 -1.09009989e-01  1.75142482e-01 -2.17593480e-02 -4.99813676e-01
  3.96948814e-01  1.06483541e-01  1.59235120e-01  3.06078315e-01
 -5.92921153e-02  4.07202721e-01  3.71038586e-01  5.39674342e-01
 -5.66475429e-02  1.58116639e-01  2.61776686e-01  1.07139699e-01
 -3.25953782e-01  3.03613633e-01 -3.10739242e-02 -1.02052964e-01
 -1.22106537e-01 -2.41110072e-01 -1.16809204e-01 -9.88864452e-02
  2.52120793e-01  1.81341380e-01  2.60258857e-02  2.02808112e-01
 -1.93253174e-01  1.88409120e-01  6.02592602e-02 -6.26277328e-02
 -2.87104875e-01  1.90026700e-01  9.37983543e-02 -1.30315512e-01
  6.86183721e-02 -7.43794739e-02 -7.07211643e-02  1.52821720e-01
 -3.41254883e-02 -1.39894679e-01  3.80142182e-02 -4.36487123e-02
 -3.58873904e-01 -3.60575110e-01  3.62833701e-02 -3.60107064e-01
  1.33141562e-01  4.10136014e-01  2.11916640e-01  3.11327856e-02
  1.59131974e-01 -4.14492935e-03  1.94538325e-01 -1.03684813e-01
 -3.62620234e-01  3.89369801e-02 -3.34266841e-01  4.02241766e-01
 -8.77202153e-02  4.32506204e-01 -3.80987525e-01  4.16640863e-02
 -3.56903732e-01 -2.51084089e-01 -1.64447516e-01 -3.90123576e-03
 -1.81415200e-01 -2.47386724e-01  3.44725430e-01 -1.03483394e-01
  1.48283213e-01  4.51187313e-01  2.79759139e-01 -1.13636762e-01
 -1.33656919e-01 -6.94583654e-02 -1.75782591e-01  1.44379854e-01
 -7.26282299e-02  4.57443982e-01  1.24367103e-01 -1.70103520e-01
  2.02446520e-01  1.92699134e-02  8.08026046e-02 -1.85454652e-01
  2.38229051e-01 -3.54168057e-01  2.89507776e-01 -1.54864872e-02
 -5.98862529e-01 -3.35777581e-01 -4.37421143e-01  2.83431083e-01
  1.34074986e-01  1.82024688e-01  9.18200053e-03  3.30415666e-01
 -1.56647474e-01  5.71471334e-01  7.31651038e-02 -3.84362817e-01
 -2.61238158e-01  3.61581832e-01  6.71654716e-02 -3.33887398e-01
  3.31352472e-01  2.04815000e-01  1.53566003e-01 -3.04529481e-02
  7.48092413e-01 -1.79784626e-01  1.51731521e-01 -8.99435580e-03
 -4.32447046e-02 -2.29966715e-01  8.67295191e-02  1.77741081e-01
  1.03568658e-02  8.39698464e-02  6.26459997e-03  2.09432676e-01
 -1.18088625e-01 -1.39936298e-01 -1.83734059e-01 -1.56073764e-01
 -3.02387662e-02 -3.05406362e-01  1.44103402e-02  1.44629195e-01
  1.72810674e-01 -2.18591150e-02 -1.85354486e-01 -6.48541212e-01
 -1.68322995e-01 -9.98825952e-02  1.12085640e-01 -7.05100372e-02
 -7.97131285e-02 -1.33857071e-01  2.17531174e-01 -1.42389521e-01
 -2.06910595e-01 -2.35461742e-01 -3.04657459e-01  1.23222187e-01
 -7.44020492e-02 -4.32474136e-01  3.66671622e-01  9.90319923e-02
  6.03755973e-02 -4.24085200e-01  7.85961002e-02  2.55091488e-01
 -9.36649293e-02 -7.56318420e-02 -1.31440625e-01 -8.17462876e-02
  2.79953957e-01 -9.35463756e-02 -2.00959906e-01 -1.15558594e-01
  2.22830608e-01 -1.74513102e-01  2.96746254e-01  9.98577476e-02
  2.13466272e-01  4.69940245e-01 -2.14953423e-01 -4.14691210e-01
  2.41586551e-01  1.15736328e-01 -1.98076680e-01 -5.82711339e-01
  1.91825166e-01  2.08184421e-01 -9.63957533e-02 -4.22698110e-02
 -9.17714536e-02 -3.26103792e-02 -2.33170658e-01  1.00892588e-01
  2.27253914e-01 -9.62858349e-02 -4.28513512e-02 -2.03089789e-01
 -1.37691066e-01 -1.50047898e-01  5.63453794e-01  1.44281030e-01
  2.45734714e-02  3.69478539e-02 -9.54313129e-02  2.56510019e-01
 -1.48737982e-01  7.26021305e-02 -2.00568005e-01 -9.23916548e-02
  4.54912066e-01 -3.53565097e-01 -5.37042469e-02  3.44957054e-01
  1.23472713e-01  5.44152930e-02 -7.01546669e-02 -1.18018307e-01
  8.21240470e-02  9.15995240e-02 -1.36078775e-01  2.08986431e-01
  4.52225506e-01 -4.32148874e-01 -6.65857196e-02 -2.61395633e-01
  2.40705848e-01 -3.45411420e-01  6.80480361e-01  1.60420895e-01
 -9.69680324e-02  7.49787390e-01  1.09091654e-01 -2.71138176e-02
  3.11663508e-01 -2.29333282e-01 -3.95743251e-01  5.48939168e-01
  4.30296302e-01  1.74035281e-01 -2.31271595e-01 -6.41482621e-02
 -3.69928241e-01  2.72182435e-01 -2.25337967e-01  3.18969727e-01
  2.96477340e-02 -1.33591086e-01 -2.16279715e-01 -2.89690137e-01
 -1.07764885e-01  4.75760937e-01 -3.36863659e-02  1.44010320e-01
 -1.89254612e-01 -1.51854202e-01 -2.99478531e-01  4.58909199e-03
 -1.22630984e-01 -9.56650972e-02  1.82496950e-01  1.03802167e-01
 -4.66513224e-02 -1.23883197e-02 -5.93023658e-01  5.08970678e-01
  1.75206423e-01 -1.22088678e-01  2.99523830e-01 -1.28708715e-02
  9.32096466e-02 -9.62477848e-02  8.17842484e-02  5.00996411e-03
  2.73318112e-01 -1.57129735e-01 -2.69137919e-01  2.76987672e-01
 -2.31838733e-01  3.30744445e-01 -2.23527342e-01 -1.82197466e-01
  1.91119742e-02  3.81628722e-02  1.44908428e-01  1.11688167e-01
  3.00240964e-01  1.79746017e-01  2.91496396e-01 -1.97840601e-01
 -2.16396928e-01  2.18993966e-02 -1.16624326e-01 -2.43423507e-01
  7.64536262e-02 -2.72044390e-01  3.11538339e-01  2.45987102e-01
  1.15370989e-01  1.43714435e-03  1.73128769e-01  3.37600112e-01
 -1.28634900e-01  4.86817598e-01  6.64569065e-03 -4.08370271e-02
 -8.51585567e-02 -1.13136813e-01 -2.30681226e-01 -1.48510814e-01
  2.41089389e-01 -7.14879632e-02  4.94998902e-01 -2.10874170e-01
  1.14562050e-01 -3.16145092e-01 -2.67520905e-01  1.32788597e-02
 -2.50389993e-01 -3.97242010e-01 -2.73165584e-01  8.64173472e-02
 -7.36871809e-02  1.48700759e-01 -2.24626303e-01  3.12269926e-01
 -4.44530308e-01 -2.38654912e-02 -7.72239827e-03 -2.28471532e-01
  1.16244599e-01 -1.32564843e-01  5.88472746e-03  1.12604737e-01
  2.05632135e-01 -1.16385529e-02  6.82720393e-02 -1.10650361e-02
  9.59066525e-02  1.25168726e-01 -1.78104192e-01 -1.60086676e-01
 -1.25965625e-01 -1.13334447e-01 -1.48843929e-01  2.89658725e-01
  2.11218745e-01  1.61575466e-01  2.26656631e-01 -1.62534803e-01
 -9.52867325e-03 -8.80283304e-03 -2.80700512e-02 -2.65647411e-01
 -1.63238958e-01  1.89443752e-01  1.54029563e-01  9.81288776e-02
  2.25646675e-01  3.00374985e-01  1.51062086e-02  1.05154201e-01
 -4.15914729e-02  2.34294325e-01  2.24496290e-01  1.97578967e-01
 -6.54473066e-01  1.46157533e-01 -2.97139063e-02  5.69680296e-02
  8.25558901e-02  1.49646208e-01 -9.96355638e-02 -5.82297407e-02
 -1.83810946e-03 -7.99566209e-02  1.15045682e-01 -6.36588410e-02
  4.78911437e-02  6.75910860e-02  5.32437600e-02  1.47333920e-01
  8.81047398e-02  3.14186841e-01  1.16865508e-01 -9.00245011e-02
  8.09943303e-02  1.55403400e-02  1.34934545e-01 -3.31288353e-02
  1.57233566e-01  3.66076231e-02  7.74721861e-01  1.17572963e-01
 -3.95431638e-01 -4.51009832e-02  6.36798739e-02 -4.79146130e-02
  5.83882630e-03 -4.21545655e-03  1.19035214e-01 -2.09417894e-01
  1.03365049e-01  3.64307106e-01 -5.28144762e-02  8.41875523e-02
  1.52562171e-01  7.13459849e-02 -2.35739425e-01  3.07423294e-01
  2.36539580e-02  5.62879257e-03 -3.61251496e-02  5.67620516e-01
  3.05692047e-01 -2.40105674e-01 -3.35327357e-01  4.67669308e-01
 -1.60129994e-01  8.86580348e-02  3.14535871e-02  1.75793529e-01
  9.80945900e-02 -4.42467690e-01  2.42992654e-01  1.39278635e-01
  1.45661414e-01 -5.97630978e-01 -2.82172084e-01 -1.60204411e-01
  1.26360223e-01 -2.04753727e-01 -5.38316108e-02  7.30201006e-02
 -2.46479586e-01  1.50490357e-02 -3.87689143e-01 -6.19816557e-02
  4.35050488e-01 -2.77275085e-01  5.58585703e-01 -1.02887586e-01
 -6.50338531e-02 -9.61145237e-02  1.45205379e-01 -5.67201898e-02
  4.74169478e-02  1.48601860e-01 -1.04018897e-01  5.98333120e-01
  4.56758291e-02  6.29310757e-02  1.46262437e-01  1.79324389e-01
  2.78692655e-02  1.14502579e-01 -5.15460894e-02 -6.02747388e-02
 -3.02280691e-02  2.87830830e-01 -1.78011954e-01  1.53281420e-01
  2.07404315e-01  1.37745500e-01  1.19115129e-01 -2.30783552e-01
  4.02339518e-01  1.52567893e-01 -4.42050323e-02  8.12644586e-02
 -3.36999595e-01 -8.81407738e-01  1.66161507e-01  7.38097876e-02
  1.73174277e-01  3.67462933e-01 -2.80929238e-01 -3.30436319e-01
  2.06830248e-01  4.31483388e-02 -1.76751077e-01 -4.42661703e-01
  2.27385700e-01  3.31744477e-02 -3.72825623e-01 -5.69860227e-02
 -5.38875014e-02  5.81380539e-02 -3.84041257e-02  1.20567724e-01
 -5.92973232e-02 -1.54941499e-01  9.06201452e-02  9.13057625e-02
  2.99502343e-01  1.36486888e-02  1.98091984e-01 -1.68905370e-02
 -4.66256812e-02 -1.96594611e-01 -1.26555366e-02  2.13494495e-01
  2.63488851e-03 -2.08520219e-01 -5.50269149e-02  2.14724466e-02
 -2.72472560e-01 -2.70140767e-01 -1.12125322e-01  4.16463256e-01
  3.13582122e-02  2.24812508e-01 -1.13069326e-01 -2.83493042e-01
 -3.88494909e-01 -7.23532587e-03 -5.51897705e-01 -5.22841692e-01
  3.09475243e-01 -2.46978819e-01  1.46806985e-03  3.25392604e-01
  2.84550339e-03 -3.87932956e-01  3.51300538e-02  2.55225629e-01
 -1.00117303e-01 -2.49209702e-01 -1.97334550e-02 -1.13802947e-01
 -2.42766682e-02 -1.11639336e-01 -9.62879062e-02  1.65620267e-01
  4.78686780e-01  2.05439150e-01  8.92702192e-02  1.94182038e-01
  2.53769517e-01  1.63190037e-01 -4.03620750e-02 -2.08663821e-01
 -2.53406346e-01  3.76714945e-01  5.05100489e-02 -1.78983435e-01
 -7.56340027e-02 -3.90831940e-02  1.04059435e-01 -2.80310452e-01
  2.60189492e-02 -3.12305540e-01  2.66231485e-02 -6.78205304e-03
 -4.20186937e-01 -3.21869135e-01  1.46271139e-01  2.92128086e-01
  3.84932756e-01  4.53061879e-01  4.52211976e-01 -6.42951578e-04
  3.90597761e-01 -1.28446043e-01 -1.85101200e-02 -8.17434043e-02
  5.06053492e-02 -1.49623835e-02 -3.97311211e-01  2.25483440e-02
  4.34547782e-01  2.04599217e-01  2.00076401e-01  1.35746628e-01
  8.24404597e-01  1.82032317e-01  2.31379956e-01 -3.40233207e-01
  5.39961234e-02  2.92771846e-01  2.13527113e-01  4.12093475e-02
  2.19253212e-01  9.16383937e-02  3.32267582e-02 -8.59364197e-02
  5.33704981e-02 -6.11578941e-01  1.33035645e-01 -1.01123057e-01
  9.89851654e-02  1.46639377e-01 -2.15628192e-01 -7.38631114e-02
 -6.19630218e-02 -3.03630456e-02 -6.45179451e-02 -2.79647529e-01
 -2.67991155e-01  1.44166648e-01  2.83327430e-01 -2.43887722e-01
 -3.95618007e-03 -1.74531519e-01  1.88414216e-01 -1.62655339e-01
  1.50329843e-01 -1.65689468e-01 -1.59350008e-01  1.58268750e-01
  8.98338109e-02 -1.26956999e-01  1.22497633e-01  1.76743776e-01
  1.80517659e-01  2.96114266e-01  1.46445967e-02  2.38169819e-01
  3.80009294e-01 -1.71354756e-01  2.73970783e-01 -1.10995591e-01
  1.12237044e-01  7.95210376e-02 -3.25320922e-02  2.74802387e-01
 -2.14246154e-01 -3.93287033e-01  3.66525769e-01  2.57654190e-01
  9.59776342e-02  1.54519126e-01  2.52328336e-01 -2.10362017e-01
  2.46072426e-01  1.59956619e-01 -2.43770123e-01 -5.77991664e-01
  1.28607184e-01  1.36877626e-01  3.01000983e-01 -3.77366468e-02
  3.23706865e-03  1.02327177e-02 -1.26909927e-01 -8.14216435e-02
 -3.31444323e-01 -1.51347965e-01  3.84554327e-01  1.46601349e-01
 -7.11679235e-02 -1.45676017e-01  1.97754234e-01 -1.92132011e-01
  3.06870997e-01  2.13379383e-01  4.57435280e-01  7.93013722e-02
  4.35695529e-01  7.69346207e-02 -2.99724936e-01  9.12618637e-02
  6.09500051e-01 -1.82166845e-01  1.07894182e-01  1.47489130e-01]"
Backpropagation,"Backpropagation ¶ Chain rule refresher Applying the chain rule Saving work with memoization Code example The goals of backpropagation are straightforward: adjust each weight in the network in proportion to how much it contributes to overall error. If we iteratively reduce each weight’s error, eventually we’ll have a series of weights that produce good predictions. Chain rule refresher ¶ As seen above, foward propagation can be viewed as a long series of nested equations. If you think of feed forward this way, then backpropagation is merely an application of Chain rule to find the Derivatives of cost with respect to any variable in the nested equation. Given a forward propagation function: \[f(x) = A(B(C(x)))\] A, B, and C are activation functions at different layers. Using the chain rule we easily calculate the derivative of \(f(x)\) with respect to \(x\) : \[f'(x) = f'(A) \cdot A'(B) \cdot B'(C) \cdot C'(x)\] How about the derivative with respect to B? To find the derivative with respect to B you can pretend \(B(C(x))\) is a constant, replace it with a placeholder variable B, and proceed to find the derivative normally with respect to B. \[f'(B) = f'(A) \cdot A'(B)\] This simple technique extends to any variable within a function and allows us to precisely pinpoint the exact impact each variable has on the total output. Applying the chain rule ¶ Let’s use the chain rule to calculate the derivative of cost with respect to any weight in the network. The chain rule will help us identify how much each weight contributes to our overall error and the direction to update each weight to reduce our error. Here are the equations we need to make a prediction and calculate total error, or cost: Given a network consisting of a single neuron, total cost could be calculated as: \[Cost = C(R(Z(X W)))\] Using the chain rule we can easily find the derivative of Cost with respect to weight W. \[\begin{split}C'(W) &= C'(R) \cdot R'(Z) \cdot Z'(W) \\ &= (\hat{y} -y) \cdot R'(Z) \cdot X\end{split}\] Now that we have an equation to calculate the derivative of cost with respect to any weight, let’s go back to our toy neural network example above What is the derivative of cost with respect to \(W_o\) ? \[\begin{split}C'(W_O) &= C'(\hat{y}) \cdot \hat{y}'(Z_O) \cdot Z_O'(W_O) \\ &= (\hat{y} - y) \cdot R'(Z_O) \cdot H\end{split}\] And how about with respect to \(W_h\) ? To find out we just keep going further back in our function applying the chain rule recursively until we get to the function that has the Wh term. \[\begin{split}C'(W_h) &= C'(\hat{y}) \cdot O'(Z_o) \cdot Z_o'(H) \cdot H'(Z_h) \cdot Z_h'(W_h) \\ &= (\hat{y} - y) \cdot R'(Z_o) \cdot W_o \cdot R'(Z_h) \cdot X\end{split}\] And just for fun, what if our network had 10 hidden layers. What is the derivative of cost for the first weight \(w_1\) ? \[\begin{split}C'(w_1) = \frac{dC}{d\hat{y}} \cdot \frac{d\hat{y}}{dZ_{11}} \cdot \frac{dZ_{11}}{dH_{10}} \cdot \\ \frac{dH_{10}}{dZ_{10}} \cdot \frac{dZ_{10}}{dH_9} \cdot \frac{dH_9}{dZ_9} \cdot \frac{dZ_9}{dH_8} \cdot \frac{dH_8}{dZ_8} \cdot \frac{dZ_8}{dH_7} \cdot \frac{dH_7}{dZ_7} \cdot \\ \frac{dZ_7}{dH_6} \cdot \frac{dH_6}{dZ_6} \cdot \frac{dZ_6}{dH_5} \cdot \frac{dH_5}{dZ_5} \cdot \frac{dZ_5}{dH_4} \cdot \frac{dH_4}{dZ_4} \cdot \frac{dZ_4}{dH_3} \cdot \\ \frac{dH_3}{dZ_3} \cdot \frac{dZ_3}{dH_2} \cdot \frac{dH_2}{dZ_2} \cdot \frac{dZ_2}{dH_1} \cdot \frac{dH_1}{dZ_1} \cdot \frac{dZ_1}{dW_1}\end{split}\] See the pattern? The number of calculations required to compute cost derivatives increases as our network grows deeper. Notice also the redundancy in our derivative calculations. Each layer’s cost derivative appends two new terms to the terms that have already been calculated by the layers above it. What if there was a way to save our work somehow and avoid these duplicate calculations? Saving work with memoization ¶ Memoization is a computer science term which simply means: don’t recompute the same thing over and over. In memoization we store previously computed results to avoid recalculating the same function. It’s handy for speeding up recursive functions of which backpropagation is one. Notice the pattern in the derivative equations below. Each of these layers is recomputing the same derivatives! Instead of writing out long derivative equations for every weight, we can use memoization to save our work as we backprop error through the network. To do this, we define 3 equations (below), which together encapsulate all the calculations needed for backpropagation. The math is the same, but the equations provide a nice shorthand we can use to track which calculations we’ve already performed and save our work as we move backwards through the network. We first calculate the output layer error and pass the result to the hidden layer before it. After calculating the hidden layer error, we pass its error value back to the previous hidden layer before it. And so on and so forth. As we move back through the network we apply the 3rd formula at every layer to calculate the derivative of cost with respect that layer’s weights. This resulting derivative tells us in which direction to adjust our weights to reduce overall cost. Note The term layer error refers to the derivative of cost with respect to a layer’s input . It answers the question: how does the cost function output change when the input to that layer changes? Output layer error To calculate output layer error we need to find the derivative of cost with respect to the output layer input, \(Z_o\) . It answers the question — how are the final layer’s weights impacting overall error in the network? The derivative is then: \[C'(Z_o) = (\hat{y} - y) \cdot R'(Z_o)\] To simplify notation, ml practitioners typically replace the \((\hat{y}-y) * R'(Zo)\) sequence with the term \(E_o\) . So our formula for output layer error equals: \[E_o = (\hat{y} - y) \cdot R'(Z_o)\] Hidden layer error To calculate hidden layer error we need to find the derivative of cost with respect to the hidden layer input, Zh. \[C'(Z_h) = (\hat{y} - y) \cdot R'(Z_o) \cdot W_o \cdot R'(Z_h)\] Next we can swap in the \(E_o\) term above to avoid duplication and create a new simplified equation for Hidden layer error: \[E_h = E_o \cdot W_o \cdot R'(Z_h)\] This formula is at the core of backpropagation. We calculate the current layer’s error, and pass the weighted error back to the previous layer, continuing the process until we arrive at our first hidden layer. Along the way we update the weights using the derivative of cost with respect to each weight. Derivative of cost with respect to any weight Let’s return to our formula for the derivative of cost with respect to the output layer weight \(W_o\) . \[C'(W_O) = (\hat{y} - y) \cdot R'(Z_O) \cdot H\] We know we can replace the first part with our equation for output layer error \(E_o\) . H represents the hidden layer activation. \[C'(W_o) = E_o \cdot H\] So to find the derivative of cost with respect to any weight in our network, we simply multiply the corresponding layer’s error times its input (the previous layer’s output). \[C'(w) = CurrentLayerError \cdot CurrentLayerInput\] Note Input refers to the activation from the previous layer, not the weighted input, Z. Summary Here are the final 3 equations that together form the foundation of backpropagation. Here is the process visualized using our toy neural network example above. Code example ¶ def relu_prime ( z ): if z > 0 : return 1 return 0 def cost ( yHat , y ): return 0.5 * ( yHat - y ) ** 2 def cost_prime ( yHat , y ): return yHat - y def backprop ( x , y , Wh , Wo , lr ): yHat = feed_forward ( x , Wh , Wo ) # Layer Error Eo = ( yHat - y ) * relu_prime ( Zo ) Eh = Eo * Wo * relu_prime ( Zh ) # Cost derivative for weights dWo = Eo * H dWh = Eh * x # Update weights Wh -= lr * dWh Wo -= lr * dWo References [1] Example","[-6.96051419e-02  2.32520103e-01 -4.61346768e-02  6.60215974e-01
  4.48199272e-01  4.58281130e-01  2.56439865e-01  3.17272782e-01
  2.65640020e-01  2.15104908e-01  2.67844617e-01 -1.40728951e-01
 -3.95488217e-02 -4.70648780e-02 -2.91458964e-01  3.79764251e-02
  1.12938404e-01 -1.61198914e-01 -8.42826366e-02  2.20847458e-01
  2.71559320e-02 -1.26905471e-01 -1.61299184e-02 -1.56324759e-01
  1.93402231e-01 -1.04366452e-01 -6.31979555e-02  8.60201046e-02
  9.56557095e-02 -7.43015766e-01 -1.07525840e-01  1.09663084e-01
  1.76839959e-02  4.93680954e-01  1.77097604e-01 -9.17957276e-02
 -2.38491103e-01  1.26829803e-01 -4.25760388e-01 -2.27746740e-01
 -6.84750795e-01  4.53908324e-01 -1.03094004e-01  3.68745267e-01
 -1.21006705e-01 -1.22978345e-01 -1.98708564e-01  3.34067285e-01
 -1.18398674e-01 -2.78799862e-01 -6.21999949e-02  2.46788606e-01
 -1.91278718e-02  7.31592029e-02  5.45274764e-02 -1.07064947e-01
 -4.19070907e-02 -2.36091744e-02 -2.72329211e-01  9.93284397e-03
  1.79335009e-03 -3.66220266e-01  1.16419405e-01  9.29815888e-01
 -3.36893231e-01 -7.09168538e-02  2.79119194e-01 -4.46489640e-02
 -1.66558951e-01  3.07893097e-01 -3.25839102e-01 -4.33109164e-01
  1.72680318e-01 -8.53871033e-02  1.35684341e-01 -2.40916371e-01
  2.06893273e-02  2.80552208e-01 -3.28299612e-01 -7.58740678e-03
 -1.16689399e-01 -5.58704250e-02  1.67095989e-01  1.96881533e-01
  1.16783105e-01  5.46809673e-01 -8.28016251e-02 -5.67487240e-01
  1.56973094e-01 -2.72454917e-02 -4.64032829e-01  1.59709945e-01
 -2.49003857e-01  3.23609114e-01 -1.46840513e-01 -1.38923049e-01
 -8.17415938e-02 -2.41563201e-01 -1.33920789e-01 -2.49737874e-01
  2.17086762e-01  3.85257155e-02 -4.63816524e-03 -8.26244503e-02
  1.26993105e-01  1.63305476e-01  1.59300074e-01  1.02504477e-01
  1.53085500e-01 -2.43690625e-01 -2.83397496e-01  2.80244023e-01
 -2.72691429e-01 -9.88759920e-02  1.51685745e-01 -3.79552245e-01
  2.38923430e-01 -1.80297762e-01  2.36816496e-01  2.35539183e-01
 -7.20731914e-02  3.03883404e-01 -1.96599200e-01  3.64919633e-01
 -4.48337734e-01  2.23475974e-02  2.81627238e-01 -9.71126370e-03
 -2.93131530e-01  9.65816677e-02 -1.86283350e-01 -1.54822439e-01
 -1.69247389e-01 -3.96026790e-01 -1.71352357e-01 -9.12144929e-02
  1.14642136e-01  2.02922806e-01 -4.18112315e-02  2.25679636e-01
 -1.67658538e-01  1.64447159e-01 -1.63788229e-01 -2.27258727e-03
 -5.43842793e-01  2.47595102e-01 -1.66872501e-01  3.87671649e-01
  4.54441726e-01  6.32817671e-02 -2.77099341e-01  1.61334381e-01
  3.14986855e-01 -1.86699003e-01  1.73825383e-01 -1.71342984e-01
  5.09995110e-02 -2.85472155e-01  1.24138989e-01 -4.62676078e-01
  1.15837969e-01  3.23391974e-01 -5.18117137e-02 -1.32803470e-01
  2.27927193e-02 -6.59937412e-02  3.24942470e-01 -1.49562940e-01
 -1.69418544e-01  1.94261163e-01 -5.67750216e-01  1.50776476e-01
  4.16778289e-02  2.08446339e-01 -2.00777754e-01  2.24609271e-01
 -2.08164454e-01 -2.23875940e-01  1.21775381e-01  6.49359301e-02
 -1.87324345e-01 -2.11535513e-01  3.41133416e-01  4.34077054e-01
  1.30886257e-01  3.01734030e-01  2.48169765e-01  7.65145898e-01
 -8.08065385e-02 -2.70484000e-01 -8.80241841e-02  1.54326305e-01
 -5.13409637e-03  5.54559350e-01 -1.06899753e-01  3.04144248e-03
  5.23192771e-02 -1.55466991e-02  3.62083435e-01 -1.39675930e-01
  3.56575370e-01 -1.16030555e-02  1.98471136e-02 -1.20266620e-03
 -9.10043418e-01 -3.47803533e-01 -6.23769760e-02  3.25783670e-01
  2.68404901e-01  1.98898554e-01 -5.06664217e-02  4.07798886e-01
 -1.95743427e-01  5.65395057e-01  2.68602282e-01 -4.91832107e-01
  1.46175936e-01  5.54053426e-01 -2.05246508e-01 -2.77902126e-01
  2.27237672e-01  1.53300002e-01  3.29595029e-01 -1.89583842e-02
  4.70876515e-01 -3.26634943e-01 -8.90528485e-02  1.18400753e-01
  1.30086049e-01 -7.18850344e-02  6.10819571e-02  2.10045055e-01
 -7.17047900e-02  1.50216937e-01  4.55877818e-02  2.19360813e-01
  6.90345168e-02 -2.09167898e-01 -1.03595071e-01  2.96045661e-01
 -1.99298590e-01 -2.12498352e-01  7.06092119e-02  8.37057307e-02
  2.29289353e-01  3.04388732e-01 -1.11441851e-01 -1.28312409e-01
  1.12617865e-01 -1.41105533e-01  3.40087175e-01 -8.28385502e-02
  1.03554204e-01  4.61361632e-02  4.12196279e-01 -5.15676796e-01
 -4.29748952e-01 -2.93098927e-01 -3.22255969e-01 -2.05160752e-01
 -5.77723943e-02 -3.46649736e-01  4.22208719e-02  1.80480570e-01
  4.58683595e-02 -1.09664775e-01 -7.37185590e-03  1.41037732e-01
 -1.43452674e-01 -7.80967027e-02  2.06511959e-01 -9.77762640e-02
  2.77697444e-01 -3.98762524e-04 -1.54154748e-01 -1.19733028e-01
  2.72288620e-01 -3.54430407e-01  3.35311055e-01  1.72708571e-01
  2.42206350e-01  9.97148454e-02  9.86679718e-02 -3.40045631e-01
  7.73854554e-02  3.91300619e-01 -1.47943497e-01 -1.79459900e-01
 -1.57196112e-02  1.91856831e-01  2.21830662e-02 -4.99897599e-01
  8.78718570e-02 -2.79141571e-02 -8.10061246e-02  1.43315166e-01
  1.96177602e-01 -5.35037994e-01  1.45491883e-01  1.84684321e-01
 -1.47866338e-01  1.20566174e-01  3.06637108e-01  3.03408593e-01
 -1.81965441e-01  2.64947891e-01 -5.01063645e-01  2.14389190e-01
 -2.23626569e-01 -3.80792379e-01 -3.06892902e-01 -2.76670098e-01
  3.63667428e-01  4.87841442e-02  1.14298105e-01  2.97083378e-01
  1.26347035e-01 -2.08195150e-01 -2.82916337e-01 -2.38687322e-02
  2.32264429e-01  1.61234885e-02  9.53858644e-02  6.21743407e-03
  4.90609884e-01 -6.22442007e-01 -4.47245419e-01 -2.48373836e-01
  3.39774728e-01 -4.24704432e-01  5.64249277e-01  4.72336486e-02
 -2.00970694e-01  4.48330522e-01  1.11139975e-01 -3.52329127e-02
  4.12927046e-02  1.52155101e-01 -4.76269200e-02  4.41802680e-01
  7.73727536e-01  3.25397193e-01 -1.36082321e-01 -4.33675349e-02
 -2.42963135e-01 -1.56964049e-01 -4.64217830e-03  3.79834682e-01
  3.12116593e-01  2.93463981e-03  8.54847673e-03 -6.35522678e-02
  9.14469361e-04  2.85224542e-02 -1.54279888e-01  1.51589751e-01
 -2.44429648e-01  3.97886515e-01 -3.51471931e-01  1.79204494e-01
 -2.24249601e-01 -6.79724455e-01  3.85270953e-01  3.34226996e-01
  3.63959253e-01 -9.26398486e-02  5.68819530e-02  1.27851501e-01
  2.66830437e-02 -2.51383960e-01  3.82741868e-01 -4.23133910e-01
  1.13312732e-02  3.67090344e-01  2.06984833e-01  1.98596776e-01
  1.89461455e-01  3.90174612e-02 -5.31648278e-01  1.75189227e-01
  6.58512414e-02 -1.13391355e-02 -3.85344923e-02  5.16617298e-02
 -2.23207444e-01 -1.07082352e-01 -2.47149020e-01  2.43935406e-01
 -3.91256630e-01 -1.53862201e-02  3.85218084e-01 -1.14875197e-01
 -4.17657733e-01 -5.79292104e-02  7.65833408e-02  7.29931816e-02
 -3.13618392e-01  1.09170884e-01 -1.16452195e-01  1.48467630e-01
  3.04109920e-02 -2.39726156e-01  1.13014787e-01  4.42646801e-01
 -2.27110647e-03  3.59970868e-01 -6.43432140e-04  2.54466474e-01
  3.00227582e-01 -2.57202446e-01 -3.08221936e-01 -1.31416708e-01
  3.09570074e-01  2.16973811e-01  1.50205761e-01  3.80084068e-02
 -3.10310334e-01  8.06662366e-02 -5.96720636e-01  2.82176524e-01
 -3.75475466e-01 -4.09453332e-01 -7.92624950e-02  4.08968180e-02
  1.51700703e-02  3.72326195e-01 -1.93661362e-01  3.14014554e-01
  3.71723473e-01 -6.16188757e-02 -7.09033757e-02 -1.09627001e-01
  2.40525693e-01 -1.40709296e-01  5.66536114e-02  9.00368840e-02
  1.60271391e-01  4.84543554e-02 -6.11002222e-02  2.14896590e-01
 -1.83765411e-01  2.80026793e-02 -1.18193537e-01  2.30456948e-01
  1.15287617e-01  1.96230143e-01 -6.39538765e-01  1.99895531e-01
  4.79686111e-01  5.30836917e-02  1.27775809e-02  7.42565021e-02
 -5.48994839e-01 -2.08400879e-02 -1.70158714e-01 -8.18104595e-02
 -8.90298039e-02  2.60593772e-01 -2.14533567e-01  3.29585016e-01
 -5.07399477e-02  2.54364103e-01 -1.61019281e-01  3.00817370e-01
 -4.61987734e-01  2.53150344e-01  2.05300242e-01  3.04752469e-01
 -8.19760859e-01  2.93031726e-02 -2.17251062e-01  3.68493736e-01
 -2.51473308e-01  2.76963443e-01  1.06672801e-01  2.83213913e-01
  1.44637609e-02 -2.10547626e-01 -3.01649660e-01 -7.20924884e-02
 -5.15320972e-02 -9.41241235e-02 -6.68609887e-02 -1.57422051e-01
  1.40636861e-01  1.83144927e-01  2.15024501e-01  3.22211444e-01
  4.32598330e-02 -3.32967415e-02  6.51658773e-02  3.83974314e-01
 -3.71838421e-01 -7.32268393e-02  6.31220341e-01 -8.22551996e-02
 -5.23871660e-01 -2.05511391e-01  1.72311738e-01 -1.23678237e-01
  6.04986027e-03 -2.06708796e-02  9.13044065e-02  1.91808403e-01
  4.49331626e-02  4.43890870e-01 -8.93753096e-02  1.45667151e-01
  2.43837237e-01 -4.44857180e-02 -2.48881668e-01  1.92838818e-01
  1.15226127e-01  2.99638420e-01 -3.33584696e-02  5.79565704e-01
  2.91065257e-02 -1.44616261e-01  8.80646408e-02  1.67628944e-01
  1.91790640e-01  4.24050502e-02  9.49335750e-03  6.31687194e-02
  1.20864697e-01 -3.53363454e-01  1.15195498e-01 -8.39202106e-02
  1.67926639e-01 -7.33537018e-01 -6.72014356e-01 -2.42162406e-01
 -8.29960555e-02 -1.38130486e-01  2.65249968e-01 -3.47502828e-01
  4.79916558e-02 -2.42791958e-02 -3.12352359e-01 -2.62641013e-01
  1.13149896e-01  2.68911481e-01  6.35435581e-01 -2.80212849e-01
 -5.72892651e-02 -3.67580093e-02 -1.33680612e-01  1.24603257e-01
  6.58469349e-02 -2.31288686e-01 -1.83695883e-01  1.67724371e-01
 -2.91272793e-02  3.24176205e-03  2.55502582e-01  6.25728667e-02
  1.52678326e-01  1.15570165e-01 -2.67704371e-02  2.80963898e-01
 -2.16223031e-01  4.06621993e-01  7.37175196e-02  8.11459795e-02
 -4.40084100e-01 -2.54279356e-02  6.84769005e-02 -2.99298108e-01
  8.95064473e-02  1.27372324e-01 -2.24009395e-01  1.81462124e-01
 -2.43817836e-01 -4.38132077e-01  1.65413693e-01  2.86528200e-01
  3.03474605e-01  7.92653859e-02  1.58464551e-01 -2.78283119e-01
  3.03890467e-01  3.21465731e-01 -2.81417370e-01 -3.77520740e-01
 -4.41328622e-03  3.00407827e-01 -2.08345383e-01  2.38319203e-01
  2.03497067e-01  5.56702256e-01 -1.70744076e-01  1.24277145e-01
  2.40154058e-01 -4.04278152e-02 -1.79961547e-02  1.07042380e-02
 -9.42102820e-02  9.07072872e-02  1.52383044e-01  1.21148199e-01
 -1.83298111e-01  1.06601104e-01  8.11614171e-02 -1.83213092e-02
 -6.08860612e-01 -4.58898157e-01 -9.24000740e-02 -8.97280052e-02
 -4.07480001e-01 -3.95976245e-01 -2.58444577e-01 -8.38847607e-02
 -1.35737151e-01  9.69925821e-02 -1.61665291e-01 -5.37822306e-01
 -3.00738096e-01 -1.04107857e-01 -4.99705046e-01 -5.13642907e-01
  4.03149903e-01  2.36679949e-02 -1.60879977e-02  4.54714954e-01
 -9.99035463e-02 -6.19734824e-01 -5.31454384e-02  2.70955324e-01
 -2.93578923e-01 -1.22579552e-01  1.89221501e-01 -1.30826309e-01
 -2.41164833e-01  1.42024877e-02 -7.09259093e-01 -5.01632616e-02
  2.65040636e-01  3.44320178e-01  9.35272276e-02  1.83209270e-01
  2.15600133e-01 -1.03259459e-01  1.34356692e-01 -2.05420390e-01
 -3.77614535e-02  4.11364526e-01  9.58989188e-02 -4.55413014e-01
 -7.08750114e-02  2.60076523e-01  2.33777553e-01 -5.26680946e-01
 -4.77074645e-03 -2.59303242e-01 -2.32662052e-01  3.87072206e-01
 -4.74601477e-01 -9.29667950e-02 -1.73873287e-02  2.87371099e-01
  4.45419431e-01  3.64773214e-01  3.01925182e-01 -4.24665183e-01
  1.68248773e-01 -8.91761482e-02 -4.45796512e-02  6.79429471e-02
  1.11053705e-01  1.17042378e-01 -3.70641798e-01  3.33067775e-03
  7.73793086e-02  1.67410344e-01  2.39375010e-01 -2.92708814e-01
  8.86881769e-01  4.35937762e-01  4.32744533e-01 -2.57210523e-01
 -3.51147801e-02  4.73256409e-01  3.20249021e-01 -9.63059813e-03
  4.90813762e-01 -3.16105559e-02  1.25985891e-01 -2.10859686e-01
  2.65547007e-01 -7.82879770e-01  3.51078734e-02  6.60536066e-02
 -6.25851229e-02 -2.65441928e-03  2.83419192e-01 -1.08629957e-01
 -8.98153055e-03 -7.57793412e-02  1.36061519e-01 -5.82368076e-01
 -3.77514899e-01  7.43875861e-01  3.57305557e-01 -3.01881373e-01
  7.97135383e-02 -4.47791442e-02  1.05775334e-01  1.42603993e-01
  1.41980261e-01 -5.37839122e-02 -1.53939366e-01  3.24638128e-01
  3.64151984e-01  6.48233369e-02 -3.37266456e-03  1.75120831e-01
 -4.01480675e-01  2.12360501e-01  7.50137925e-01  2.70107955e-01
  7.57683516e-01 -1.71986043e-01  2.77551860e-01  8.01148545e-03
 -2.60242790e-01  2.61677325e-01 -1.59951791e-01 -3.29028629e-03
 -6.53161854e-02 -3.08900356e-01  5.08621782e-02  2.91195512e-02
 -1.16898403e-01 -4.11616936e-02  1.04810130e-02  2.10845754e-01
 -3.17683369e-02 -3.20620716e-01  3.86107676e-02 -7.42430806e-01
  5.76038286e-02 -2.40676463e-01  2.83708423e-01 -2.56251037e-01
  2.61442453e-01  4.10430998e-01  2.02650111e-02 -1.22116178e-01
 -1.06654435e-01 -8.96877050e-01  7.30277419e-01 -1.01589330e-01
 -3.90180469e-01  4.79161888e-02  3.55875134e-01 -1.74435854e-01
  5.27814388e-01  1.14454977e-01  3.01473200e-01 -2.35155255e-01
  7.39623308e-02  6.68411553e-02 -1.74798712e-01 -2.25056902e-01
  5.63091159e-01 -1.88719079e-01  1.14776783e-01  2.62386322e-01]"
Activation Functions,"Activation Functions ¶ Linear ELU ReLU LeakyReLU Sigmoid Tanh Softmax Linear ¶ A straight line function where activation is proportional to input ( which is the weighted sum from neuron ). Function Derivative \[\begin{split}R(z,m) = \begin{Bmatrix} z*m \\ \end{Bmatrix}\end{split}\] \[\begin{split}R'(z,m) = \begin{Bmatrix} m \\ \end{Bmatrix}\end{split}\] def linear ( z , m ): return m * z def linear_prime ( z , m ): return m Pros It gives a range of activations, so it is not binary activation. We can definitely connect a few neurons together and if more than 1 fires, we could take the max ( or softmax) and decide based on that. Cons For this function, derivative is a constant. That means, the gradient has no relationship with X. It is a constant gradient and the descent is going to be on constant gradient. If there is an error in prediction, the changes made by back propagation is constant and not depending on the change in input delta(x) ! ELU ¶ Exponential Linear Unit or its widely known name ELU is a function that tend to converge cost to zero faster and produce more accurate results. Different to other activation functions, ELU has a extra alpha constant which should be positive number. ELU is very similiar to RELU except negative inputs. They are both in identity function form for non-negative inputs. On the other hand, ELU becomes smooth slowly until its output equal to -α whereas RELU sharply smoothes. Function Derivative \[\begin{split}R(z) = \begin{Bmatrix} z & z > 0 \\ α.( e^z – 1) & z <= 0 \end{Bmatrix}\end{split}\] \[\begin{split}R'(z) = \begin{Bmatrix} 1 & z>0 \\ α.e^z & z<0 \end{Bmatrix}\end{split}\] def elu ( z , alpha ): return z if z >= 0 else alpha * ( e ^ z - 1 ) def elu_prime ( z , alpha ): return 1 if z > 0 else alpha * np . exp ( z ) Pros ELU becomes smooth slowly until its output equal to -α whereas RELU sharply smoothes. ELU is a strong alternative to ReLU. Unlike to ReLU, ELU can produce negative outputs. Cons For x > 0, it can blow up the activation with the output range of [0, inf]. ReLU ¶ A recent invention which stands for Rectified Linear Units. The formula is deceptively simple: \(max(0,z)\) . Despite its name and appearance, it’s not linear and provides the same benefits as Sigmoid (i.e. the ability to learn nonlinear functions), but with better performance. Function Derivative \[\begin{split}R(z) = \begin{Bmatrix} z & z > 0 \\ 0 & z <= 0 \end{Bmatrix}\end{split}\] \[\begin{split}R'(z) = \begin{Bmatrix} 1 & z>0 \\ 0 & z<0 \end{Bmatrix}\end{split}\] def relu ( z ): return max ( 0 , z ) def relu_prime ( z ): return 1 if z > 0 else 0 Pros It avoids and rectifies vanishing gradient problem. ReLu is less computationally expensive than tanh and sigmoid because it involves simpler mathematical operations. Cons One of its limitations is that it should only be used within hidden layers of a neural network model. Some gradients can be fragile during training and can die. It can cause a weight update which will makes it never activate on any data point again. In other words, ReLu can result in dead neurons. In another words, For activations in the region (x<0) of ReLu, gradient will be 0 because of which the weights will not get adjusted during descent. That means, those neurons which go into that state will stop responding to variations in error/ input (simply because gradient is 0, nothing changes). This is called the dying ReLu problem. The range of ReLu is \([0, \infty)\) . This means it can blow up the activation. Further reading Deep Sparse Rectifier Neural Networks Glorot et al., (2011) Yes You Should Understand Backprop , Karpathy (2016) LeakyReLU ¶ LeakyRelu is a variant of ReLU. Instead of being 0 when \(z < 0\) , a leaky ReLU allows a small, non-zero, constant gradient \(\alpha\) (Normally, \(\alpha = 0.01\) ). However, the consistency of the benefit across tasks is presently unclear. [1] Function Derivative \[\begin{split}R(z) = \begin{Bmatrix} z & z > 0 \\ \alpha z & z <= 0 \end{Bmatrix}\end{split}\] \[\begin{split}R'(z) = \begin{Bmatrix} 1 & z>0 \\ \alpha & z<0 \end{Bmatrix}\end{split}\] def leakyrelu ( z , alpha ): return max ( alpha * z , z ) def leakyrelu_prime ( z , alpha ): return 1 if z > 0 else alpha Pros Leaky ReLUs are one attempt to fix the “dying ReLU” problem by having a small negative slope (of 0.01, or so). Cons As it possess linearity, it can’t be used for the complex Classification. It lags behind the Sigmoid and Tanh for some of the use cases. Further reading Delving Deep into Rectifiers: Surpassing Human-Level Performance on ImageNet Classification , Kaiming He et al. (2015) Sigmoid ¶ Sigmoid takes a real value as input and outputs another value between 0 and 1. It’s easy to work with and has all the nice properties of activation functions: it’s non-linear, continuously differentiable, monotonic, and has a fixed output range. Function Derivative \[S(z) = \frac{1} {1 + e^{-z}}\] \[S'(z) = S(z) \cdot (1 - S(z))\] def sigmoid ( z ): return 1.0 / ( 1 + np . exp ( - z )) def sigmoid_prime ( z ): return sigmoid ( z ) * ( 1 - sigmoid ( z )) Pros It is nonlinear in nature. Combinations of this function are also nonlinear! It will give an analog activation unlike step function. It has a smooth gradient too. It’s good for a classifier. The output of the activation function is always going to be in range (0,1) compared to (-inf, inf) of linear function. So we have our activations bound in a range. Nice, it won’t blow up the activations then. Cons Towards either end of the sigmoid function, the Y values tend to respond very less to changes in X. It gives rise to a problem of “vanishing gradients”. Its output isn’t zero centered. It makes the gradient updates go too far in different directions. 0 < output < 1, and it makes optimization harder. Sigmoids saturate and kill gradients. The network refuses to learn further or is drastically slow ( depending on use case and until gradient /computation gets hit by floating point value limits ). Further reading Yes You Should Understand Backprop , Karpathy (2016) Tanh ¶ Tanh squashes a real-valued number to the range [-1, 1]. It’s non-linear. But unlike Sigmoid, its output is zero-centered. Therefore, in practice the tanh non-linearity is always preferred to the sigmoid nonlinearity. [1] Function Derivative \[tanh(z) = \frac{e^{z} - e^{-z}}{e^{z} + e^{-z}}\] \[tanh'(z) = 1 - tanh(z)^{2}\] def tanh ( z ): return ( np . exp ( z ) - np . exp ( - z )) / ( np . exp ( z ) + np . exp ( - z )) def tanh_prime ( z ): return 1 - np . power ( tanh ( z ), 2 ) Pros The gradient is stronger for tanh than sigmoid ( derivatives are steeper). Cons Tanh also has the vanishing gradient problem. Softmax ¶ Softmax function calculates the probabilities distribution of the event over ‘n’ different events. In general way of saying, this function will calculate the probabilities of each target class over all possible target classes. Later the calculated probabilities will be helpful for determining the target class for the given inputs. References [1] ( 1 , 2 ) http://cs231n.github.io/neural-networks-1/","[ 2.98869200e-02  4.60709520e-02 -1.87576041e-01  5.86969018e-01
 -4.98455644e-01  3.62012923e-01  3.02942276e-01  1.22345023e-01
  8.88471976e-02  7.68425316e-03 -9.71227139e-02 -3.29776943e-01
 -8.76393914e-02 -5.99352829e-02  4.77913767e-02 -3.64764035e-01
 -3.91623437e-01  4.16230798e-01 -1.89424306e-01 -1.76711194e-02
 -5.78995347e-02 -4.25155878e-01 -4.19066489e-01  6.89250082e-02
  3.75942767e-01  1.58491731e-03 -2.35950842e-01  1.31898910e-01
 -2.23498672e-01  5.89046836e-01  9.24879834e-02 -4.51228097e-02
 -2.44007975e-01  2.36222968e-01  1.72952533e-01 -1.53294355e-01
  2.90163040e-01  1.16400979e-01 -3.74357283e-01 -4.88348678e-02
 -2.95822531e-01  1.45508070e-02  1.17536090e-01  3.57212454e-01
  1.98323965e-01 -1.66475862e-01  1.17112547e-01 -2.27060080e-01
  7.06433132e-02 -3.54083300e-01  5.28236628e-01  1.09216589e-02
  1.10868499e-01 -1.56559944e-01  1.45132929e-01  1.64977282e-01
 -1.45270124e-01 -1.91840738e-01  1.36869326e-01 -8.57432783e-02
  3.14746112e-01 -3.02994639e-01 -4.83642697e-01  2.29660273e-01
  2.23042339e-01  8.90501738e-02  2.28460073e-01  5.23024976e-01
  2.99512863e-01  1.03931315e-01 -1.62413567e-01  1.95633665e-01
  1.14168197e-01 -8.90521556e-02 -2.90537924e-01 -3.48127633e-02
 -5.89325190e-01  3.80831420e-01 -6.55717969e-01  1.55763477e-01
  2.16001034e-01  2.13107288e-01 -6.80416673e-02 -2.59867400e-01
 -1.75266355e-01 -2.45667905e-01  3.42627876e-02 -4.39968109e-01
  1.18344679e-01  2.27860034e-01  3.15582722e-01 -3.40763450e-01
 -2.33420223e-01 -3.02990854e-01  9.96145457e-02 -5.11437617e-02
 -9.23283920e-02 -4.88615811e-01  4.25535962e-02  2.81004399e-01
 -3.52800451e-02  1.21726170e-02  2.27321208e-01 -3.68045792e-02
  1.37067825e-01  3.69739652e-01 -2.27450907e-01 -3.21218967e-01
 -4.27895010e-01 -1.06347717e-01 -4.03649360e-02 -3.39485705e-01
  4.40956801e-02  9.85671654e-02  9.03421789e-02 -1.66828394e-01
  1.44532785e-01  3.26328933e-01 -1.16325855e-01  4.69367564e-01
  2.99081374e-02  4.58078504e-01  3.21349204e-01  9.40085724e-02
 -6.62924767e-01  2.64316499e-01  4.19253409e-01  2.62719691e-02
 -1.09063551e-01  3.13713908e-01 -2.00466767e-01  4.53572154e-01
 -1.10560738e-01 -6.03761554e-01  2.29992151e-01 -5.92475012e-02
  2.71286875e-01 -2.03138292e-01  2.06730366e-01  1.33841172e-01
  1.32780047e-02  2.15307802e-01  8.80975425e-02  1.83618784e-01
  3.38541195e-02  7.50902146e-02 -1.03825472e-01 -2.23547265e-01
  8.04732591e-02 -7.11173266e-02 -7.27037042e-02 -1.43228844e-01
 -1.42530277e-01 -1.05742909e-01  3.02282780e-01 -5.99404573e-02
  1.45685986e-01  5.63071370e-02  1.97939038e-01 -3.12175065e-01
 -3.57591771e-02  5.39315522e-01  2.08336771e-01  6.32332638e-02
  2.81642675e-01 -2.27956921e-01  1.24982864e-01  1.35243118e-01
 -2.77690113e-01  1.13264248e-01 -1.56729996e-01  3.18062603e-01
 -1.50422558e-01  7.59870261e-02 -3.61629456e-01  5.22299558e-02
 -1.39915794e-01 -1.49357066e-01 -1.68900892e-01 -5.08196540e-02
 -7.43602868e-03 -8.68386328e-02  2.64831483e-01 -1.38059212e-02
  1.96470082e-01  4.33824398e-03  1.78009182e-01 -2.18612283e-01
 -3.50535870e-01  1.38880581e-01  1.01824418e-01  1.92410827e-01
 -1.68666214e-01  1.66696347e-02  5.27372241e-01 -7.23605394e-01
  1.44045919e-01  1.46563679e-01 -1.85624391e-01 -1.40137561e-02
  7.86036700e-02 -1.37562364e-01  8.18616271e-01  3.43994379e-01
  2.65491545e-01 -1.14761077e-01 -6.72082484e-01  2.09687889e-01
 -3.17984074e-02  8.39531869e-02 -5.60423583e-02  4.82749581e-01
 -2.10940912e-02  1.49497509e-01 -5.18006384e-02 -1.45298138e-01
 -2.97308087e-01  2.57175326e-01  3.99635956e-02 -4.00499940e-01
  2.75705218e-01  1.60800993e-01  1.37955472e-01  3.82549584e-01
  5.32175183e-01 -1.76253974e-01 -6.33856431e-02  3.30098942e-02
 -2.14925438e-01 -5.88817477e-01  1.37925237e-01 -1.42710090e-01
  3.20496619e-01  2.59007692e-01 -1.31955400e-01 -2.97024935e-01
 -2.37894773e-01 -1.52533621e-01 -2.63416171e-01 -3.16134512e-01
  7.73022622e-02 -1.64893180e-01 -1.27686620e-01  1.34367585e-01
  1.51607603e-01  3.87008697e-01  2.89234757e-01 -3.40241082e-02
 -1.55673504e-01 -2.49218464e-01  1.65231794e-01  2.34384403e-01
 -2.20118910e-01  1.29707754e-01  9.16342854e-01 -8.04892834e-03
 -4.51601684e-01 -1.95343979e-02 -6.73702359e-02 -4.93902862e-02
  8.13806579e-02 -7.52477571e-02 -1.94368482e-01  2.78804719e-01
  1.90986007e-01  5.84258847e-02  1.26627889e-02 -2.45084111e-02
 -2.47082300e-02  8.32482129e-02  1.57792822e-01  1.08066097e-01
  3.86563599e-01 -8.02768469e-02 -6.96962327e-02  1.88796282e-01
  1.72138304e-01 -1.52398180e-02  3.59000474e-01 -2.92097088e-02
 -4.83313873e-02  5.45753241e-01  4.31962237e-02 -2.99117774e-01
  1.90248206e-01  9.22329649e-02 -2.08437983e-02  2.65287757e-01
  1.81377351e-01  2.72835679e-02 -2.77131610e-03  1.80349015e-02
  5.49984127e-02  1.70921221e-01 -1.63355976e-01 -1.34305388e-01
  3.63771766e-01 -4.67347726e-02 -3.92265499e-01  4.18114141e-02
  4.50036168e-01  6.77122176e-02  5.94216764e-01  1.44089237e-01
 -9.75988507e-02 -7.67992809e-04  3.07385504e-01  1.17177606e-01
 -6.79011941e-02 -2.90130794e-01 -2.26940691e-01  1.31602615e-01
  1.99303612e-01 -2.99816191e-01  2.01659709e-01  3.28344375e-01
  1.71713620e-01  6.95930570e-02 -1.02115422e-01  3.22076738e-01
 -1.58324279e-02  2.54087806e-01 -1.20244576e-02  9.15477574e-02
 -1.28562972e-01 -7.25712255e-02  8.39846134e-02 -1.23897746e-01
  5.56885302e-01 -1.34508610e-01  2.81638622e-01 -2.71128416e-02
  2.95837879e-01 -2.21603960e-01  3.71668935e-01 -2.41801456e-01
  2.16846362e-01 -8.46641362e-02 -3.63981903e-01  6.70982003e-01
  1.97724044e-01  1.46606728e-01 -2.45388865e-01 -7.58296698e-02
 -3.12926710e-01  1.80934191e-01 -2.26607800e-01  5.39353192e-02
  2.66670525e-01  4.71957847e-02 -2.41102144e-01 -1.75748169e-01
 -3.45910788e-01  2.30572149e-01 -2.22457677e-01  1.66342109e-01
 -2.52238721e-01 -3.24226320e-02 -3.64423275e-01  8.15757364e-02
 -8.87881368e-02 -2.32356310e-01  2.08085515e-02  1.98133588e-01
  2.19296440e-01 -4.05834079e-01 -5.36987305e-01 -7.72017706e-03
 -5.13924100e-02 -1.65992826e-01  1.89779550e-01 -4.63872254e-02
  2.32283786e-01 -3.32253203e-02  1.48085445e-01 -2.06838578e-01
  1.15768373e-01 -2.53498554e-04  3.67984250e-02 -1.76395327e-01
 -1.44905765e-02  1.98783934e-01  6.68884143e-02 -1.67723835e-01
 -1.66013092e-02  3.61329049e-01  1.77729458e-01  4.37754281e-02
  2.50577629e-01  9.55962092e-02  7.33110681e-02  7.05762729e-02
  2.72846110e-02 -3.32612693e-01 -4.09071259e-02  1.02365136e-01
  3.30494195e-01  7.75426030e-02 -2.43759662e-01  2.13530958e-01
  2.13527121e-02 -9.60276462e-04  1.49323896e-01 -2.90108565e-03
 -1.11870959e-01  4.01851952e-01  3.73491287e-01 -1.58956438e-01
 -6.75521642e-02 -2.44642437e-01 -2.72798717e-01 -7.27670074e-01
  1.78723112e-01  4.12453860e-01  1.21927872e-01 -1.17633842e-01
 -8.98401588e-02  1.21873200e-01 -5.61240725e-02 -1.60465598e-01
 -3.77907157e-01 -2.75000095e-01 -1.56916514e-01 -2.24368930e-01
 -4.83827367e-02 -1.80149257e-01 -3.01348902e-02  1.55951202e-01
 -3.82093579e-01  1.04041733e-02  1.87800359e-03 -1.02840021e-01
 -2.38851935e-01 -3.59384120e-01  2.02624142e-01  3.63203108e-01
  6.81128055e-02  1.93405505e-02  2.03302890e-01  1.96426675e-01
  2.65861720e-01  1.06849797e-01 -7.78706148e-02 -2.47084469e-01
  1.82610840e-01 -3.93601805e-02 -7.39176869e-02  9.51643139e-02
 -1.56243399e-01 -2.68527389e-01  1.20717183e-01 -1.89719200e-01
  3.37981768e-02  2.10897118e-01 -5.90148754e-02  5.61105646e-03
 -3.07805017e-02  9.26611051e-02  5.28214574e-01  6.42627627e-02
  2.01842487e-01 -9.54897422e-03  9.66781750e-03  1.03911959e-01
 -3.72416861e-02  5.81287267e-03 -4.27452177e-02  6.38513565e-02
 -6.42206430e-01 -5.38576208e-02 -6.38676807e-02 -2.53270101e-03
  3.99644114e-03  2.22807288e-01 -7.32840076e-02  4.86248769e-02
  1.19658969e-01 -3.90781879e-01  1.68232229e-02  1.96618307e-03
 -1.90594316e-01  1.49537772e-02 -1.63112789e-01  2.39204429e-02
 -9.37163644e-03  3.13004330e-02  1.15857877e-01  8.21497589e-02
  3.00020695e-01 -2.77750567e-02  1.44824475e-01 -2.64031529e-01
  2.57784188e-01  2.72023857e-01  3.87075126e-01  1.50182009e-01
 -5.77175140e-01 -6.42034635e-02 -2.51498431e-01 -1.09794818e-01
  2.74724036e-01 -3.92932585e-03 -7.07983896e-02 -6.64075539e-02
  2.79356502e-02  3.47157776e-01 -3.58486593e-01 -1.02664798e-01
  1.53847888e-01  1.68901682e-01  1.06798381e-01 -8.81560743e-02
  3.42476666e-01  5.71867824e-03 -9.78972614e-02  3.07087332e-01
  3.30847800e-01 -1.26158103e-01 -4.84628975e-01  1.72177747e-01
 -1.84602201e-01 -1.69312209e-02  4.97906059e-02  1.25147551e-01
 -3.64641324e-02 -2.26972073e-01  2.37577111e-01  1.80796131e-01
  1.21438734e-01 -2.35910878e-01  8.44888985e-02 -1.86278582e-01
 -6.42840564e-02 -1.55463845e-01 -6.62262440e-02  2.15660289e-01
 -9.02208090e-02 -3.30464661e-01 -5.71096480e-01 -5.90129085e-02
 -2.28887454e-01 -2.87287176e-01  4.28399444e-01 -1.97895229e-01
 -3.61021459e-01 -1.59790311e-02 -1.55347297e-02  3.78255732e-02
  1.15445880e-02  2.25969657e-01 -2.92970836e-01  3.45356822e-01
  1.55905992e-01  2.26891488e-01  3.92663360e-01  3.47554952e-01
  1.09272145e-01 -9.42357481e-02 -5.38048521e-02 -1.51970331e-03
 -1.74415767e-01 -8.71922076e-01  7.65218586e-02 -6.45096414e-04
 -4.27712321e-01  8.16043317e-02 -3.59760284e-01 -5.73302507e-02
  3.78252000e-01 -1.82700545e-01  1.89264596e-01  2.15133131e-01
 -3.60719740e-01 -3.91543388e-01 -2.32943803e-01  6.80489093e-03
  9.24112499e-02  6.00868225e-01 -8.05644035e-01  6.07952103e-02
  1.31782383e-01  2.98955053e-01 -1.79672867e-01 -5.39923310e-01
  1.85121924e-01 -5.37603915e-01 -2.49265805e-01 -1.28544625e-02
  3.82393211e-01 -2.72178322e-01 -1.85974658e-01  5.34568071e-01
  1.59661934e-01 -6.51764274e-02  1.69065371e-02 -7.00141042e-02
  2.09706262e-01 -5.58835492e-02  3.57365847e-01  2.56026685e-01
  3.00644767e-02 -1.42511688e-02 -1.14086971e-01  1.24528512e-01
 -1.37023449e-01  2.30561167e-01 -3.05108130e-01 -2.00653821e-03
 -2.43358478e-01  1.04650319e-01  9.21282694e-02  1.78580612e-01
  1.12946823e-01  1.03287384e-01  1.40619695e-01 -5.57534061e-02
 -1.88522875e-01  7.30719939e-02 -6.00648999e-01 -1.21628605e-01
  2.38968521e-01 -7.44159296e-02 -1.85477883e-01 -2.22968832e-01
 -1.08438887e-01 -2.00140953e-01 -1.45139759e-02  1.88247055e-01
  3.05710509e-02 -4.16491628e-01  9.52317715e-02 -3.68762672e-01
 -1.85438301e-02 -2.38033980e-01  3.02223861e-01 -7.20560104e-02
  2.82329679e-01 -6.06171926e-03  2.70297527e-01  1.17592834e-01
  3.47523302e-01 -1.18116200e-01  2.89041579e-01  3.58126778e-03
 -5.12935370e-02  9.02066976e-02 -5.84620722e-02  3.02635670e-01
  3.06528926e-01 -1.62156984e-01  2.19969615e-01 -1.77955568e-01
  2.10545138e-01 -4.40579712e-01  1.56135872e-01 -2.74824858e-01
  2.68564001e-02  6.93387240e-02  3.11563790e-01 -2.69342333e-01
  1.58141777e-01  5.06905377e-01  5.00314474e-01  3.57263386e-02
 -1.18136592e-02 -2.17247214e-02 -8.11662711e-03  2.81220466e-01
  9.71103013e-02 -2.08076209e-01 -2.70343244e-01  1.35316744e-01
  1.66477352e-01  4.83829230e-02 -3.09607089e-01  4.04735543e-02
  3.15823197e-01  1.25080496e-01 -3.11483651e-01  7.06885383e-02
 -1.04521543e-01 -2.27202140e-02  2.16329068e-01 -3.73588473e-01
  1.54605597e-01  4.48474109e-01 -1.12584502e-01  7.39946514e-02
  2.26024523e-01 -3.24169695e-01  1.98465828e-02  1.21828029e-02
  5.41795455e-02  3.86042237e-01  7.00666755e-02 -4.97836396e-02
 -2.20472440e-01 -1.35115236e-01  9.16047096e-02 -3.32423329e-01
 -8.09423998e-02 -8.75128880e-02  4.68282580e-01 -1.18809924e-01
  1.12193875e-01 -7.16265365e-02  2.23590165e-01 -8.08591172e-02
  1.23987339e-01 -6.52543157e-02  4.00143564e-02  5.98091632e-02
  1.53814107e-01 -1.09956982e-02  2.20119789e-01 -7.71825761e-02
  4.57206607e-01  5.25166616e-02  3.33845139e-01 -8.78333598e-02
  2.93577701e-01  1.36792898e-01  1.91218227e-01 -1.55465126e-01
  7.98442960e-02 -2.04982292e-02 -1.76495582e-01  2.18830742e-02
  3.97230387e-01 -1.68874264e-01  8.99442378e-03  3.00039560e-01
  1.55935302e-01  4.64771807e-01  9.85420793e-02 -5.04721664e-02
  2.15416357e-01 -2.24981397e-01 -1.01377070e-01 -2.37480447e-01
  1.43485785e-01  1.35019377e-01  3.81336093e-01 -2.94591844e-01
  1.19705133e-01 -4.31312397e-02 -1.91645607e-01 -8.74724053e-03
 -2.62074500e-01 -6.98816776e-01  2.17128992e-01 -7.66381264e-01
 -1.53131738e-01 -2.11264014e-01  3.14443111e-01  3.94104943e-02
  5.18848419e-01  3.61430556e-01  1.53223902e-01  6.29681498e-02
  5.54993749e-01  5.45966998e-02  2.09687263e-01 -1.96245313e-02
  2.02380866e-01  1.71696067e-01  2.18619823e-01 -1.05855502e-01]"
Layers,"Layers ¶ BatchNorm Convolution Dropout Pooling Fully-connected/Linear RNN GRU LSTM BatchNorm ¶ BatchNorm accelerates convergence by reducing internal covariate shift inside each batch. If the individual observations in the batch are widely different, the gradient updates will be choppy and take longer to converge. The batch norm layer normalizes the incoming activations and outputs a new batch where the mean equals 0 and standard deviation equals 1. It subtracts the mean and divides by the standard deviation of the batch. Code Code example from Agustinus Kristiadi Further reading Original Paper Implementing BatchNorm in Neural Net Understanding the backward pass through Batch Norm Convolution ¶ In CNN, a convolution is a linear operation that involves multiplication of weight (kernel/filter) with the input and it does most of the heavy lifting job. Convolution layer consists of 2 major component 1. Kernel(Filter) 2. Stride Kernel (Filter): A convolution layer can have more than one filter. The size of the filter should be smaller than the size of input dimension. It is intentional as it allows filter to be applied multiple times at difference point (position) on the input.Filters are helpful in understanding and identifying important features from given input. By applying different filters (more than one filter) on the same input helps in extracting different features from given input. Output from multiplying filter with the input gives Two dimensional array. As such, the output array from this operation is called “Feature Map”. Stride: This property controls the movement of filter over input. when the value is set to 1, then filter moves 1 column at a time over input. When the value is set to 2 then the filer jump 2 columns at a time as filter moves over the input. Code # this code demonstate on how Convolution works # Assume we have a image of 4 X 4 and a filter fo 2 X 2 and Stride = 1 def conv_filter_ouput ( input_img_section , filter_value ): # this method perfromas the multiplication of input and filter # returns singular value value = 0 for i in range ( len ( filter_value )): for j in range ( len ( filter_value [ 0 ])): value = value + ( input_img_section [ i ][ j ] * filter_value [ i ][ j ]) return value img_input = [[ 260.745 , 261.332 , 112.27 , 262.351 ], [ 260.302 , 208.802 , 139.05 , 230.709 ], [ 261.775 , 93.73 , 166.118 , 122.847 ], [ 259.56 , 232.038 , 262.351 , 228.937 ]] filter = [[ 1 , 0 ], [ 0 , 1 ]] filterX , filterY = len ( filter ), len ( filter [ 0 ]) filtered_result = [] for i in range ( 0 , len ( img_mx ) - filterX + 1 ): clm = [] for j in range ( 0 , len ( img_mx [ 0 ]) - filterY + 1 ): clm . append ( conv_filter_ouput ( img_mx [ i : i + filterX , j : j + filterY ], filter )) filtered_result . append ( clm ) print ( filtered_result ) Further reading cs231n reference Dropout ¶ A dropout layer takes the output of the previous layer’s activations and randomly sets a certain fraction (dropout rate) of the activatons to 0, cancelling or ‘dropping’ them out. It is a common regularization technique used to prevent overfitting in Neural Networks. The dropout rate is the tunable hyperparameter that is adjusted to measure performance with different values. It is typically set between 0.2 and 0.5 (but may be arbitrarily set). Dropout is only used during training; At test time, no activations are dropped, but scaled down by a factor of dropout rate. This is to account for more units being active during test time than training time. For example: A layer in a neural net outputs a tensor (matrix) A of shape (batch_size, num_features). The dropout rate of the layer is set to 0.5 (50%). A random 50% of the values in A will be set to 0. These will then be multiplied with the weight matrix to form the inputs to the next layer. The premise behind dropout is to introduce noise into a layer in order to disrupt any interdependent learning or coincidental patterns that may occur between units in the layer, that aren’t significant. Code # layer_output is a 2D numpy matrix of activations layer_output *= np . random . randint ( 0 , high = 2 , size = layer_output . shape ) # dropping out values # scaling up by dropout rate during TRAINING time, so no scaling needs to be done at test time layer_output /= 0.5 # OR layer_output *= 0.5 # Scaling down during TEST time. [2] This results in the following operation. All reference, images and code examples, unless mentioned otherwise, are from section 4.4.3 of Deep Learning for Python by François Chollet. [2] Pooling ¶ Pooling layers often take convolution layers as input. A complicated dataset with many object will require a large number of filters, each responsible finding pattern in an image so the dimensionally of convolutional layer can get large. It will cause an increase of parameters, which can lead to over-fitting. Pooling layers are methods for reducing this high dimensionally. Just like the convolution layer, there is kernel size and stride. The size of the kernel is smaller than the feature map. For most of the cases the size of the kernel will be 2X2 and the stride of 2. There are mainly two types of pooling layers. The first type is max pooling layer. Max pooling layer will take a stack of feature maps (convolution layer) as input. The value of the node in the max pooling layer is calculated by just the maximum of the pixels contained in the window. The other type of pooling layer is the Average Pooling layer. Average pooling layer calculates the average of pixels contained in the window. Its not used often but you may see this used in applications for which smoothing an image is preferable. Code def max_pooling ( feature_map , size = 2 , stride = 2 ): """""" :param feature_map: Feature matrix of shape (height, width, layers) :param size: size of kernal :param stride: movement speed of kernal :return: max-pooled feature vector """""" pool_shape = ( feature_map . shape [ 0 ] // stride , feature_map . shape [ 1 ] // stride , feature_map . shape [ - 1 ]) #shape of output pool_out = numpy . zeros ( pool_shape ) for layer in range ( feature_map . shape [ - 1 ]): #for each layer row = 0 for r in numpy . arange ( 0 , feature_map . shape [ 0 ], stride ): col = 0 for c in numpy . arange ( 0 , feature_map . shape [ 1 ], stride ): pool_out [ row , col , layer ] = numpy . max ([ feature_map [ c : c + size , r : r + size , layer ]]) col = col + 1 row = row + 1 return pool_out Fully-connected/Linear ¶ In a neural network, a fully-connected layer , also known as linear layer, is a type of layer where all the inputs from one layer are connected to every activation unit of the next layer. In most popular machine learning models, the last few layers in the network are fully-connected ones. Indeed, this type of layer performs the task of outputting a class prediction, based on the features learned in the previous layers. Example of a fully-connected layer, with four input nodes and eight output nodes. Source [4]. The fully-connected layer receives in input a vector of nodes, activated in the previous convolutional layers. This vector passes through one or more dense layers, before being sent to the output layer. Before it reaches the output layer, an activation function is used for making a prediction. While the convolutional and pooling layers generally use a ReLU function, the fully-connected layer can use two types of activation functions, based on the type of the classification problem: Sigmoid: A logistic function, used for binary classification problems. Softmax: A more generalized logistic activation function, it ensures that the values in the output layer sum up to 1. Commonly used for multi-class classification. The activation function outputs a vector whose dimension is equal to the number of classes to be predicted. The output vector yields a probability from 1 to 0 for each class. RNN ¶ RNN (Recurrent Neural Network) is the neural network with hidden state, which captures the historical information up to current timestep. Because the hidden state of current state uses the same definition as that in previous timestep, which means the computation is recurrent, hence it is called recurrent neural network.(Ref 2) The structure is as follows: Code For detail code, refer to layers.py class RNN : def __init__ ( self , input_dim : int , hidden_dim : int , output_dim : int , batch_size = 1 ) -> None : self . input_dim = input_dim self . hidden_dim = hidden_dim self . out_dim = output_dim self . batch_size = batch_size # initialization self . params = self . _init_params () self . hidden_state = self . _init_hidden_state () def _init_params ( self ) -> List [ np . array ]: scale = 0.01 Waa = np . random . normal ( scale = scale , size = [ self . hidden_dim , self . hidden_dim ]) Wax = np . random . normal ( scale = scale , size = [ self . hidden_dim , self . input_dim ]) Wy = np . random . normal ( scale = scale , size = [ self . out_dim , self . hidden_dim ]) ba = np . zeros ( shape = [ self . hidden_dim , 1 ]) by = np . zeros ( shape = [ self . out_dim , 1 ]) return [ Waa , Wax , Wy , ba , by ] def _init_hidden_state ( self ) -> np . array : return np . zeros ( shape = [ self . hidden_dim , self . batch_size ]) def forward ( self , input_vector : np . array ) -> np . array : """""" input_vector: dimension: [num_steps, self.input_dim, self.batch_size] out_vector: dimension: [num_steps, self.output_dim, self.batch_size] """""" Waa , Wax , Wy , ba , by = self . params output_vector = [] for vector in input_vector : self . hidden_state = np . tanh ( np . dot ( Waa , self . hidden_state ) + np . dot ( Wax , vector ) + ba ) y = softmax ( np . dot ( Wy , self . hidden_state ) + by ) output_vector . append ( y ) return np . array ( output_vector ) if __name__ == ""__main__"" : input_data = np . array ([ [ [ 1 , 3 ] , [ 2 , 4 ] , [ 3 , 6 ] ] , [ [ 4 , 3 ] , [ 3 , 4 ] , [ 1 , 5 ] ] ]) batch_size = 2 input_dim = 3 output_dim = 4 hidden_dim = 5 time_step = 2 rnn = RNN ( input_dim = input_dim , batch_size = batch_size , output_dim = output_dim , hidden_dim = hidden_dim ) output_vector = rnn . forward ( input_vector = input_data ) print ( ""RNN:"" ) print ( f ""Input data dimensions: {input_data.shape} "" ) print ( f ""Output data dimensions {output_vector.shape} "" ) ## We will get the following output: ## RNN: ## Input data dimensions: (2, 3, 2) ## Output data dimensions (2, 4, 2) GRU ¶ GRU (Gated Recurrent Unit) supports the gating of hidden state: Reset gate controls how much of previous hidden state we might still want to remember Update gate controls how much of current hidden state is just a copy of previous state The structure and math are as follow: Code For detail code, refer to layers.py class GRU : def __init__ ( self , input_dim : int , hidden_dim : int , output_dim : int , batch_size = 1 ) -> None : self . input_dim = input_dim self . hidden_dim = hidden_dim self . out_dim = output_dim self . batch_size = batch_size # initialization self . params = self . _init_params () self . hidden_state = self . _init_hidden_state () def _init_params ( self ) -> List [ np . array ]: scale = 0.01 def param_single_layer (): w = np . random . normal ( scale = scale , size = ( self . hidden_dim , self . hidden_dim + input_dim )) b = np . zeros ( shape = [ self . hidden_dim , 1 ]) return w , b # reset, update gate Wr , br = param_single_layer () Wu , bu = param_single_layer () # output layer Wy = np . random . normal ( scale = scale , size = [ self . out_dim , self . hidden_dim ]) by = np . zeros ( shape = [ self . out_dim , 1 ]) return [ Wr , br , Wu , bu , Wy , by ] def _init_hidden_state ( self ) -> np . array : return np . zeros ( shape = [ self . hidden_dim , self . batch_size ]) def forward ( self , input_vector : np . array ) -> np . array : """""" input_vector: dimension: [num_steps, self.input_dim, self.batch_size] out_vector: dimension: [num_steps, self.output_dim, self.batch_size] """""" Wr , br , Wu , bu , Wy , by = self . params output_vector = [] for vector in input_vector : # expit in scipy is sigmoid function reset_gate = expit ( np . dot ( Wr , np . concatenate ([ self . hidden_state , vector ], axis = 0 )) + br ) update_gate = expit ( np . dot ( Wu , np . concatenate ([ self . hidden_state , vector ], axis = 0 )) + bu ) candidate_hidden = np . tanh ( reset_gate * self . hidden_state ) self . hidden_state = update_gate * self . hidden_state + ( 1 - update_gate ) * candidate_hidden y = softmax ( np . dot ( Wy , self . hidden_state ) + by ) output_vector . append ( y ) return np . array ( output_vector ) LSTM ¶ In order to address the long-term information preservation and shor-term skipping in latent variable model, we introduced LSTM. In LSTM, we introduce the memory cell that has the same shape as the hidden state, which is actually a fancy version of a hidden state, engineered to record additional information. The structure and math are as follow: Code For detail code, refer to layers.py class LSTM : def __init__ ( self , input_dim : int , hidden_dim : int , output_dim : int , batch_size = 1 ) -> None : self . input_dim = input_dim self . hidden_dim = hidden_dim self . out_dim = output_dim self . batch_size = batch_size # initialization self . params = self . _init_params () self . hidden_state = self . _init_hidden_state () self . memory_state = self . _init_hidden_state () def _init_params ( self ) -> List [ np . array ]: scale = 0.01 def param_single_layer (): w = np . random . normal ( scale = scale , size = ( self . hidden_dim , self . hidden_dim + input_dim )) b = np . zeros ( shape = [ self . hidden_dim , 1 ]) return w , b # forget, input, output gate + candidate memory state Wf , bf = param_single_layer () Wi , bi = param_single_layer () Wo , bo = param_single_layer () Wc , bc = param_single_layer () # output layer Wy = np . random . normal ( scale = scale , size = [ self . out_dim , self . hidden_dim ]) by = np . zeros ( shape = [ self . out_dim , 1 ]) return [ Wf , bf , Wi , bi , Wo , bo , Wc , bc , Wy , by ] def _init_hidden_state ( self ) -> np . array : return np . zeros ( shape = [ self . hidden_dim , self . batch_size ]) def forward ( self , input_vector : np . array ) -> np . array : """""" input_vector: dimension: [num_steps, self.input_dim, self.batch_size] out_vector: dimension: [num_steps, self.output_dim, self.batch_size] """""" Wf , bf , Wi , bi , Wo , bo , Wc , bc , Wy , by = self . params output_vector = [] for vector in input_vector : # expit in scipy is sigmoid function foget_gate = expit ( np . dot ( Wf , np . concatenate ([ self . hidden_state , vector ], axis = 0 )) + bf ) input_gate = expit ( np . dot ( Wi , np . concatenate ([ self . hidden_state , vector ], axis = 0 )) + bi ) output_gate = expit ( np . dot ( Wo , np . concatenate ([ self . hidden_state , vector ], axis = 0 )) + bo ) candidate_memory = np . tanh ( np . dot ( Wc , np . concatenate ([ self . hidden_state , vector ], axis = 0 )) + bc ) self . memory_state = foget_gate * self . memory_state + input_gate * candidate_memory self . hidden_state = output_gate * np . tanh ( self . memory_state ) y = softmax ( np . dot ( Wy , self . hidden_state ) + by ) output_vector . append ( y ) return np . array ( output_vector ) References [1] http://www.deeplearningbook.org/contents/convnets.html [2] “4.4.3, Fundamentals of Machine Learning: Adding Dropout.” Deep Learning for Python , by Chollet, François. Manning Publications Co., 2018, pp. 109–110. [3] `Dive into Deep Learning https://d2l.ai/index.html`_ , by Zhang, Aston and Lipton, Zachary C. and Li, Mu and Smola, Alexander J. [4] https://docs.nvidia.com/deeplearning/performance/dl-performance-fully-connected/index.html#fullyconnected-layer","[ 1.10246390e-01  2.25988567e-01 -6.73986971e-03  2.90506423e-01
  1.81899026e-01  7.89795399e-01  1.29008606e-01  2.92401940e-01
  1.39548868e-01  1.64193660e-01  6.53142154e-01 -6.34051412e-02
  6.14934377e-02 -7.85524957e-03 -1.19884014e-01 -1.17336735e-01
  1.88052118e-01 -4.07510251e-01 -2.74684094e-02 -1.18961297e-01
 -5.80932945e-02 -2.03506231e-01 -1.13684535e-01 -2.98778981e-01
  1.12293914e-01 -1.52863741e-01 -4.74340439e-01 -2.14251895e-02
 -1.01449832e-01 -1.47389129e-01 -1.69472232e-01  4.83231246e-02
 -1.82326715e-02  3.14807713e-01 -2.33780161e-01 -9.48923528e-02
  2.45241761e-01  1.75902367e-01 -4.87125635e-01 -2.53756233e-02
 -1.15866289e-01  7.59087443e-01  7.68515840e-03  4.70724553e-01
 -4.63253073e-02 -2.04961330e-01 -5.22788346e-01  1.72220528e-01
  1.53437644e-01  9.29671451e-02  6.89663291e-02  4.75044549e-01
  4.31684125e-03  1.15776479e-01 -1.86518326e-01 -3.90039027e-01
 -1.26366377e-01  3.23945940e-01 -5.04737534e-02 -5.58074452e-02
  4.95901331e-03  8.24092478e-02  2.14481100e-01  4.01635140e-01
  8.30331743e-02 -1.07166871e-01  1.22148499e-01  4.94891167e-01
 -2.88701475e-01  2.43636385e-01 -4.42037284e-01 -4.20927346e-01
  8.77674147e-02 -5.98871827e-01 -1.04619443e-01  5.07345080e-01
  3.66505623e-01  4.96917032e-02  3.77653450e-01  1.57989442e-01
 -1.31858557e-01 -1.03126802e-02  1.69928625e-01  1.12970792e-01
  5.74228406e-01  4.01331246e-01 -1.84728444e-01 -1.65928781e-01
  5.98124489e-02 -1.41871393e-01 -4.80123430e-01  3.98805737e-01
 -3.43697250e-01 -2.00719118e-01 -2.27310449e-01  3.08297008e-01
  3.72530483e-02 -7.07016647e-01 -4.10129204e-02  1.55454218e-01
  1.57138228e-01  3.83148268e-02  2.50253916e-01  1.60115540e-01
 -7.09703937e-02  1.60483599e-01 -2.39076968e-02 -1.10044658e-01
  6.97317123e-02 -3.97654176e-01 -1.77805871e-01  2.76946545e-01
 -6.98688269e-01  4.23673093e-02  1.21565752e-01 -6.23510480e-01
  1.82500198e-01 -1.15905702e-01 -3.79682519e-02  4.46627475e-02
 -4.24453765e-02  1.41909003e-01 -1.49597585e-01  2.59511739e-01
 -1.23754730e-02  4.36692357e-01 -2.47788310e-01  1.51559561e-01
 -2.20807105e-01  2.95730174e-01  6.99178549e-03 -2.44176865e-01
 -2.14804143e-01 -4.84580368e-01  1.71615750e-01  1.51815817e-01
  1.86747432e-01  3.82452071e-01  8.35383236e-02  7.74704292e-03
 -2.57516243e-02  4.27210182e-02 -7.22772926e-02  5.43326065e-02
 -2.38761395e-01  8.27311575e-02  1.57096386e-02  2.78775655e-02
  2.75973588e-01  7.52994418e-02  2.90590599e-02  2.78833568e-01
  3.26182902e-01 -2.72241414e-01  1.42893732e-01  1.14003442e-01
  3.04680109e-01 -1.99438512e-01 -9.68760401e-02 -4.98436801e-02
  2.80891240e-01  9.14782658e-02 -2.18134493e-01 -1.02265604e-01
 -6.05152324e-02  1.31219447e-01  3.53332341e-01 -3.34890038e-01
 -4.32607353e-01 -2.52800137e-01 -3.05093944e-01  1.62671357e-01
 -7.67362043e-02 -4.90617193e-03 -3.89427468e-02  2.84085333e-01
 -2.04282701e-01 -3.07018310e-02 -6.43666014e-02  2.19955623e-01
  2.95541286e-01 -7.65184462e-02  3.23767848e-02 -1.05584443e-01
  3.11953783e-01  9.19424370e-02  5.62608913e-02  8.95634592e-01
 -1.50061727e-01 -9.54725593e-03 -1.69368148e-01  3.24156463e-01
 -2.43607704e-02  2.97548115e-01  1.37249872e-01  2.83490181e-01
 -1.97231527e-02  9.01056826e-02  4.90117252e-01 -1.95795700e-01
  1.34464398e-01 -1.34755656e-01  4.04801488e-01  2.27908939e-01
 -9.93520096e-02 -2.19009474e-01 -4.90723938e-01  2.13324159e-01
  1.57081798e-01  3.97769101e-02  1.18852332e-01  3.96309316e-01
 -1.33502074e-02  7.57160783e-01  1.66290313e-01 -2.23049089e-01
  2.19127581e-01  6.28890991e-01 -5.08973241e-01 -3.48662198e-01
  2.29240984e-01  7.34801777e-03  8.48091990e-02  1.75112963e-01
  1.69686705e-01  1.11660220e-01  1.28439829e-01  1.27467066e-01
 -9.03123915e-02 -3.85303646e-01  1.69236958e-01  1.17757112e-01
 -1.55660927e-01  2.83140063e-01 -2.90731154e-03 -2.75522888e-01
  4.12676744e-02  9.47381705e-02  1.71768606e-01  7.15282187e-02
  3.60401645e-02 -2.34274194e-01  2.28388131e-01 -1.45007566e-01
  1.06359527e-01  8.23758692e-02 -1.42314762e-01 -8.12123775e-01
  7.65279680e-02 -2.35204518e-01  1.50653645e-01 -4.60996985e-01
  2.99017906e-01  8.13027322e-02  6.18459702e-01 -6.41973615e-01
 -2.49354929e-01 -2.66656399e-01 -1.27979726e-01  2.45919943e-01
 -1.17487423e-01 -3.73335302e-01  1.75097764e-01  1.15822600e-02
  3.26321244e-01 -4.42049652e-01  6.09818436e-02 -2.72683464e-02
  3.38745594e-01 -4.90602441e-02  1.27307519e-01 -7.44422823e-02
  2.10902214e-01 -4.92777564e-02 -1.59957930e-01  2.46417880e-01
 -1.35999233e-01  6.82061613e-02  2.95071691e-01 -8.07559192e-02
 -2.15704203e-01  5.48603758e-03 -1.51734516e-01 -1.53494120e-01
 -2.90620685e-01  2.08668500e-01  3.18991572e-01 -3.35604191e-01
  2.98301429e-01  6.57371655e-02 -1.40921563e-01 -3.66742015e-01
 -1.51238590e-01  2.07828447e-01 -3.54870260e-01  1.38381511e-01
  2.37700611e-01  9.56289768e-02 -8.79963934e-02  3.07074971e-02
 -4.10273403e-01 -1.02912143e-01  7.00203106e-02  4.88641411e-01
 -1.35413334e-02  1.17666572e-01 -1.85391083e-01  1.89163655e-01
  1.06839072e-02 -6.57263324e-02 -3.45129877e-01 -1.38227850e-01
  2.96070695e-01 -2.53775626e-01  2.71756090e-02  3.46327156e-01
  1.20606616e-01  1.84550613e-01  3.11982539e-02  1.84288621e-01
 -4.25235666e-02 -1.89390302e-01  5.24154454e-02 -2.87953794e-01
  4.37346399e-01 -1.70317024e-01 -5.89573503e-01 -6.95311964e-01
  2.18879029e-01 -3.42929304e-01  6.21036053e-01 -1.98353250e-02
 -1.09982014e-01  4.90876079e-01 -3.07270706e-01 -4.37068343e-01
  1.53019622e-01 -1.47623777e-01 -1.73884392e-01  2.79670835e-01
  7.77920723e-01  3.77961278e-01  3.70092802e-02 -3.71992320e-01
 -3.09870541e-02 -2.28508130e-01 -2.70036943e-02  3.23186368e-01
 -7.10371286e-02 -2.78737366e-01  6.11874554e-03 -2.77506471e-01
  8.53177458e-02  2.06945717e-01 -3.02597880e-01 -1.88432813e-01
  6.16294779e-02  2.01420531e-01  1.42597836e-02 -1.94266170e-01
 -3.57822478e-01  2.16113031e-01  1.97310403e-01  1.34655818e-01
  3.72842610e-01  1.57553881e-01  1.68446973e-01  3.77982296e-02
  5.83420917e-02  3.07743587e-02  9.48654190e-02 -3.25468481e-02
  6.84850886e-02  3.02314311e-01  4.13970709e-01  2.34293491e-01
  1.02499545e-01 -3.60627137e-02  1.35011002e-01  2.45824575e-01
 -1.80212423e-01  9.72716734e-02  3.64757106e-02 -1.02952324e-01
 -3.19442511e-01 -1.87579706e-01  2.32466497e-02  1.25379130e-01
  3.33474204e-02  3.10577512e-01  2.05025882e-01 -2.18930542e-01
 -2.57964790e-01  6.90371990e-02  2.38247551e-02  1.99976921e-01
 -8.10175180e-01 -3.55559886e-01 -3.63118052e-01  2.51141578e-01
 -1.33755237e-01 -1.45186543e-01  4.02577370e-02  2.81669617e-01
 -2.83025086e-01 -2.73236521e-02 -7.11822808e-02  1.05198007e-02
  2.57711709e-01  1.95785731e-01 -7.63563812e-02 -1.94686018e-02
  1.99636385e-01 -1.59164052e-03 -6.14314303e-02  1.18048728e-01
  1.95513014e-02  1.52686730e-01 -4.86024134e-02 -1.61599517e-01
 -2.05752365e-02 -4.41835403e-01 -2.06737429e-01  1.32976338e-01
  7.16150254e-02  5.13197541e-01 -1.14214838e-01  3.57955039e-01
 -2.66834423e-02  1.28223538e-01 -2.21337095e-01 -1.59960881e-01
 -3.78824711e-01  1.66435406e-01  1.04318418e-01  4.78911959e-02
  5.03348231e-01  1.08403787e-01 -2.30357170e-01  6.56155869e-04
  3.50957811e-01  1.26960635e-01  2.36355094e-03 -2.32265398e-01
 -6.03813902e-02  1.36225417e-01 -7.90852159e-02  1.22596174e-02
  1.77914575e-01  6.32750764e-02 -1.18810914e-01 -4.18855473e-02
 -6.12959266e-01 -3.69521417e-02 -4.40255582e-01 -3.51363420e-01
  2.33075581e-04  1.02678962e-01  3.59802414e-03 -2.30355456e-01
 -6.94800615e-01  1.07491463e-01 -2.30336905e-01  2.12247312e-01
 -3.30414593e-01  7.13262782e-02  9.79815945e-02  2.29942530e-01
 -1.52191609e-01  5.32984175e-02  2.47212276e-02  1.11731395e-01
 -1.87517196e-01  8.73738825e-02 -5.92688024e-02  1.56217366e-01
 -4.08939153e-01 -4.30462599e-01 -2.33173758e-01 -1.17329434e-01
 -5.89969382e-03 -9.40889120e-02 -1.50108367e-01 -2.52531171e-01
  1.25342049e-03  1.54328197e-01  4.33262110e-01  4.71334495e-02
 -1.92319497e-01 -2.22083330e-01  3.15144300e-01  6.40076101e-02
  2.48983532e-01 -1.68353654e-02  5.05687833e-01 -8.27481300e-02
 -4.99624431e-01  4.39355493e-01 -6.68468475e-02  1.51942536e-01
 -2.09719688e-01  2.43418850e-03 -1.40907794e-01 -1.51660681e-01
 -2.09512170e-02  1.48059309e-01 -3.73908699e-01  4.08745110e-01
  1.54850617e-01  1.66146249e-01 -1.73745841e-01  2.56088287e-01
  5.94070144e-02  2.71957636e-01 -1.26433939e-01  2.54654109e-01
  3.68137151e-01 -5.16208746e-02 -6.96490049e-01  6.70381665e-01
  2.47296542e-01  3.01425308e-01  7.69463256e-02 -1.22612119e-02
  1.62942812e-01 -3.24460328e-01 -2.02768445e-01 -1.52226239e-02
  1.90932035e-01 -8.13723505e-01 -5.75855196e-01 -1.98745787e-01
  8.00183415e-02 -1.03878468e-01  5.97446561e-02 -3.77870917e-01
  8.38984996e-02 -2.95924008e-01 -9.26141888e-02 -1.36710659e-01
  2.61442363e-01  2.18127102e-01  7.83791184e-01 -3.51822853e-01
  2.00985745e-01 -6.56434000e-02 -2.34332271e-02 -2.19590869e-02
 -2.86725283e-01  2.29358487e-03 -2.20813639e-02  6.72574818e-01
 -2.31253505e-01  2.17896923e-02  4.61388111e-01  9.41038728e-02
 -2.22145438e-01 -2.14339301e-01  5.89100979e-02  6.10763311e-01
  9.47340727e-02  1.47686660e-01  2.62567461e-01 -1.18088759e-01
 -8.08615208e-01  2.63016850e-01 -2.01412290e-03 -3.36968660e-01
  1.05667144e-01 -1.03475712e-01  7.15112835e-02  2.77490973e-01
 -4.93177801e-01 -1.21501550e-01  3.51272762e-01  9.65043008e-02
  3.69473755e-01  6.84961975e-02 -6.26307249e-01 -4.57292199e-01
  1.80109158e-01  2.67152309e-01 -6.80885315e-02 -2.99735904e-01
  1.62647307e-01  3.14281940e-01  2.69477397e-01  9.15151238e-02
  9.44729820e-02  1.89691499e-01 -1.58443794e-01  2.38203481e-01
  8.12992677e-02 -2.10909367e-01 -2.60940269e-02 -2.09684044e-01
  4.03356031e-02 -2.02854410e-01  2.20105499e-01  1.75747246e-01
  1.99127734e-01  9.20603648e-02  1.03047557e-01  1.00977279e-01
 -1.30718380e-01 -2.86680460e-01  1.13820285e-01  1.07707586e-02
 -2.69179851e-01  1.39649346e-01 -1.45111233e-01  7.23422289e-01
 -2.66287208e-01  3.58032063e-02  1.42803580e-01 -5.33174992e-01
 -1.55687019e-01  2.86610872e-01 -2.17710435e-01 -7.04765767e-02
  1.88604549e-01 -2.35972539e-01  1.02970004e-01  2.74584368e-02
  3.59641731e-01 -3.85276377e-01  1.40443947e-02  2.50564992e-01
 -1.91789657e-01 -1.52954876e-01  5.58621250e-02 -2.03319088e-01
  1.72254175e-01 -1.48867756e-01 -8.13472271e-01 -1.24260411e-01
  1.14639759e-01  2.45366469e-01  1.43360853e-01  1.71758950e-01
  3.22465748e-02  2.17289329e-02 -3.45143192e-02 -5.13738804e-02
  1.05871975e-01  1.75537020e-01  1.93234786e-01  2.65462518e-01
  9.26223695e-02  2.06762418e-01  1.26666129e-01 -1.72985733e-01
  1.52349565e-02 -2.24239931e-01 -1.28364593e-01  3.76385152e-01
 -3.62870097e-01  6.13236129e-02 -2.20361520e-02  2.79109895e-01
  4.13092405e-01  2.10214540e-01  1.25095844e-01 -1.19537681e-01
  4.12931472e-01  1.27595782e-01  1.03929322e-02 -5.50678909e-01
  5.55657744e-02  2.49094307e-01 -3.59775484e-01 -4.68868278e-02
 -1.23839900e-01  3.78442764e-01  2.52532493e-02 -6.19482771e-02
  5.89165330e-01  4.20677185e-01 -8.26060772e-02 -2.75583446e-01
  1.25695616e-01  5.51428944e-02  8.68602335e-01  9.00943652e-02
  1.90913454e-01 -9.20103043e-02  3.44809651e-01  1.70284271e-01
 -2.78727915e-02 -1.81704193e-01  3.04956269e-02 -1.85431167e-02
  1.66034341e-01 -2.98254520e-01  1.37112558e-01 -2.32891187e-01
 -2.95142643e-02  7.52916001e-03  1.74403004e-02 -1.28421858e-01
 -1.94363132e-01  5.18114805e-01  2.05969751e-01 -3.74224894e-02
  2.00244579e-02 -2.42954031e-01  3.71124446e-01  2.54809987e-02
 -4.04521078e-02  2.31591448e-01 -1.19217455e-01  7.42294937e-02
  2.25174412e-01  1.14917099e-01  1.83646083e-01  1.70507610e-01
 -1.06294163e-01 -6.35968894e-03  5.29220223e-01  1.95723012e-01
  1.92091256e-01 -1.51044875e-01  2.62436479e-01 -7.92680457e-02
 -4.34399962e-01 -7.00815469e-02  6.04755618e-03 -2.12024316e-01
 -3.13418098e-02 -4.64336514e-01  1.46833971e-01 -2.26551965e-02
  2.91044444e-01 -2.73394465e-01  3.14902931e-01 -2.91271865e-01
  2.21110746e-01 -1.97891057e-01  4.86000404e-02 -4.74109769e-01
 -1.04833849e-01 -8.44577253e-02 -3.43095660e-01 -3.93609852e-02
  5.26363142e-02  3.67480740e-02  1.27794921e-01 -5.54493368e-02
 -1.54626504e-01 -2.84838140e-01 -2.17500627e-01  9.47267175e-01
 -4.72078860e-01 -9.58344042e-02  7.74372816e-01 -9.42828730e-02
  5.38165808e-01  8.41964334e-02  6.92649782e-02 -2.33924985e-01
  1.22436300e-01  2.55522609e-01 -4.08452302e-02 -9.32630971e-02
 -7.02172443e-02  5.64917177e-02  2.07836002e-01  1.96929183e-02]"
Loss Functions,"Loss Functions ¶ Cross-Entropy Hinge Huber Kullback-Leibler RMSE MAE (L1) MSE (L2) Cross-Entropy ¶ Cross-entropy loss, or log loss, measures the performance of a classification model whose output is a probability value between 0 and 1. Cross-entropy loss increases as the predicted probability diverges from the actual label. So predicting a probability of .012 when the actual observation label is 1 would be bad and result in a high loss value. A perfect model would have a log loss of 0. The graph above shows the range of possible loss values given a true observation (isDog = 1). As the predicted probability approaches 1, log loss slowly decreases. As the predicted probability decreases, however, the log loss increases rapidly. Log loss penalizes both types of errors, but especially those predictions that are confident and wrong! Cross-entropy and log loss are slightly different depending on context, but in machine learning when calculating error rates between 0 and 1 they resolve to the same thing. Code Math In binary classification, where the number of classes \(M\) equals 2, cross-entropy can be calculated as: \[-{(y\log(p) + (1 - y)\log(1 - p))}\] If \(M > 2\) (i.e. multiclass classification), we calculate a separate loss for each class label per observation and sum the result. \[-\sum_{c=1}^My_{o,c}\log(p_{o,c})\] Note M - number of classes (dog, cat, fish) log - the natural log y - binary indicator (0 or 1) if class label \(c\) is the correct classification for observation \(o\) p - predicted probability observation \(o\) is of class \(c\) Hinge ¶ Used for classification. Code Huber ¶ Typically used for regression. It’s less sensitive to outliers than the MSE as it treats error as square only inside an interval. \[\begin{split}L_{\delta}=\left\{\begin{matrix} \frac{1}{2}(y - \hat{y})^{2} & if \left | (y - \hat{y}) \right | < \delta\\ \delta ((y - \hat{y}) - \frac1 2 \delta) & otherwise \end{matrix}\right.\end{split}\] Code Further information can be found at Huber Loss in Wikipedia . Kullback-Leibler ¶ Code RMSE ¶ Root Mean Square Error \[RMSE = \sqrt{\frac{1}{m}\sum^{m}_{i=1}(h(x^{(i)})-y^{(i)})^2}\] RMSE - root mean square error m - number of samples \(x^{(i)}\) - i-th sample from dataset \(h(x^{(i)})\) - prediction for i-th sample (thesis) \(y^{(i)}\) - ground truth label for i-th sample Code MAE (L1) ¶ Mean Absolute Error, or L1 loss. Excellent overview below [6] and [10]. \[MAE = \frac{1}{m}\sum^{m}_{i=1}|h(x^{(i)})-y^{(i)}|\] MAE - mean absolute error m - number of samples \(x^{(i)}\) - i-th sample from dataset \(h(x^{(i)})\) - prediction for i-th sample (thesis) \(y^{(i)}\) - ground truth label for i-th sample Code MSE (L2) ¶ Mean Squared Error, or L2 loss. Excellent overview below [6] and [10]. \[MSE = \frac{1}{m}\sum^{m}_{i=1}(y^{(i)} - \hat{y}^{(i)})^2\] MSE - mean square error m - number of samples \(y^{(i)}\) - ground truth label for i-th sample \(\hat{y}^{(i)}\) - predicted label for i-th sample References [1] https://en.m.wikipedia.org/wiki/Cross_entropy [2] https://www.kaggle.com/wiki/LogarithmicLoss [3] https://en.wikipedia.org/wiki/Loss_functions_for_classification [4] http://www.exegetic.biz/blog/2015/12/making-sense-logarithmic-loss/ [5] http://neuralnetworksanddeeplearning.com/chap3.html [6] http://rishy.github.io/ml/2015/07/28/l1-vs-l2-loss/ [7] https://en.wikipedia.org/wiki/S%C3%B8rensen%E2%80%93Dice_coefficient [8] https://en.wikipedia.org/wiki/Huber_loss [9] https://en.wikipedia.org/wiki/Hinge_loss [10] http://www.chioka.in/differences-between-l1-and-l2-as-loss-function-and-regularization/","[ 1.49748892e-01  1.36105329e-01 -1.75301507e-01  1.76204801e-01
  3.73639077e-01  1.59081519e-01  2.58219630e-01  1.98991567e-01
  4.50624973e-01  3.95430803e-01 -3.41454625e-01 -8.94814432e-01
 -1.97958738e-01  1.43768534e-01  1.07917540e-01 -9.02737975e-01
 -1.92070842e-01  4.16117370e-01 -7.10937083e-02 -8.21552202e-02
  2.07036063e-01  2.77827293e-01  5.41533008e-02 -5.19489110e-01
 -1.16467945e-01 -7.72433281e-02 -6.87467679e-03  9.43891406e-02
 -8.95670503e-02  9.12013575e-02  9.31057036e-02 -2.05031335e-02
 -2.68164545e-01  3.26907307e-01  4.20831218e-02 -9.02997404e-02
  1.18975215e-01  2.20026851e-01 -1.69771135e-01 -1.13069892e-01
 -2.00729519e-02  2.08164126e-01 -1.11804314e-01  4.56528187e-01
 -1.32930785e-01 -1.90391198e-01 -2.86952019e-01  4.93435621e-01
  3.11849982e-01 -2.71747828e-01  1.32147372e-01  4.06554788e-01
  8.76464471e-02  6.32898584e-02  3.99260759e-01 -1.16174348e-01
 -1.92992985e-01  4.02632117e-01  1.89716920e-01  1.69521049e-01
  7.25997090e-02 -2.14851722e-01  5.45649715e-02  2.74365842e-01
 -1.21057026e-01 -3.24263871e-02  6.09949082e-02  7.76593536e-02
  2.36403197e-01  2.14622125e-01 -1.37768000e-01 -4.37039077e-01
  1.42434001e-01 -2.09127277e-01 -1.25413567e-01 -5.00272572e-01
 -1.31624835e-02  8.07683542e-02  3.21679026e-01  2.92914808e-01
  1.41358063e-01  1.36301011e-01  1.67842153e-02  2.98176408e-01
  3.54141951e-01 -3.45036715e-01  1.25067726e-01 -3.85968864e-01
  9.70738977e-02  2.04659224e-01 -2.69793004e-01 -4.91133109e-02
  7.43052922e-03 -1.49142087e-01 -2.41204709e-01 -1.34584457e-02
 -1.12345323e-01 -1.13171113e+00 -1.78830355e-01  3.23389530e-01
 -1.99757263e-01 -5.07576019e-02  5.97862303e-01  4.22008872e-01
 -4.76552173e-03  2.49485180e-01 -3.54882121e-01 -8.30890052e-03
 -1.62992716e-01 -2.61304319e-01 -2.75520176e-01  2.07157016e-01
 -4.66106713e-01 -1.22465178e-01  2.75434613e-01 -2.59905130e-01
  1.38958409e-01  4.49993402e-01  6.10203668e-02  5.93807511e-02
 -2.29653306e-02  5.04472107e-02 -1.30701382e-02  1.52650118e-01
 -6.62095666e-01  7.00012565e-01 -2.69515179e-02  3.36255729e-01
 -4.21143830e-01  2.84535170e-01 -4.94766608e-02 -2.89366454e-01
 -2.09282443e-01 -4.58295584e-01  3.90644148e-02  1.34009004e-01
  1.07490622e-01  3.59994143e-01  1.45223752e-01 -7.58314431e-02
  4.25033644e-02  1.80703998e-02  6.13503382e-02 -1.92138851e-01
  2.18446672e-01  2.35143736e-01  2.25895680e-02 -1.21067375e-01
  3.23064059e-01 -2.54982829e-01  2.01365933e-01 -9.98971760e-02
 -1.15946308e-01 -5.07679820e-01  6.83529377e-01 -2.34594077e-01
  3.95915508e-01 -7.64205828e-02  5.35728097e-01 -4.01705325e-01
  1.79329306e-01 -2.40404427e-01  1.58676475e-01 -1.40672237e-01
  3.38197723e-02 -9.11273584e-02 -9.47326273e-02 -1.29619315e-01
 -2.54867584e-01 -4.51013982e-01 -4.37387049e-01  5.25194764e-01
 -1.17959559e-01 -1.22631446e-01 -4.09979641e-01  4.25426364e-01
 -5.26406281e-02  9.81018990e-02  6.96507990e-02  9.82907116e-02
 -2.99044140e-02 -9.72339436e-02  2.26649523e-01 -1.86116561e-01
  1.05285272e-01  5.09525165e-02 -1.63339209e-02  6.43262744e-01
 -3.72380197e-01 -8.89903158e-02  5.47774471e-02  8.99384171e-02
 -2.33255044e-01 -2.54279319e-02  3.41320574e-01 -9.70636010e-02
  6.92283660e-02  5.74748367e-02 -2.37713695e-01 -2.81735361e-01
 -8.62772241e-02 -2.62436152e-01  2.91059017e-01 -6.60643652e-02
  3.07194769e-01 -6.63507804e-02 -4.49130893e-01  2.23010302e-01
  3.40274498e-02 -1.81276575e-01  2.38195598e-01  8.51257890e-02
  2.12452132e-02  4.94212389e-01  1.46594211e-01  7.33094588e-02
  1.14867285e-01  3.20283681e-01 -1.74714968e-01 -4.74876940e-01
  9.44688693e-02 -4.96039242e-02  2.96150297e-01 -1.11054517e-01
  8.27729344e-01 -6.13729656e-01  1.84520900e-01  1.68445587e-01
 -1.79892689e-01 -2.06891119e-01  2.45414510e-01  3.15831125e-01
 -3.94057125e-01 -1.43582433e-01  1.96487889e-01 -2.90194571e-01
  8.02827254e-02  1.61260486e-01  7.40937516e-02 -1.85818635e-02
  2.73111314e-02 -1.76247373e-01  3.91940624e-01 -5.88441268e-02
 -1.35233160e-02  5.37024558e-01  1.21259496e-01 -6.57648683e-01
  4.13436890e-01 -1.66104436e-01  1.15297727e-01 -1.77203327e-01
  3.63168889e-04  5.38440794e-02  4.36524153e-01 -4.04136330e-01
 -1.28151819e-01 -9.75837633e-02 -5.36211506e-02  1.64917201e-01
  1.67979121e-01 -2.73378551e-01  1.14171773e-01  1.00227483e-02
  1.99154958e-01 -3.14312756e-01 -1.88273564e-02 -1.85100824e-01
  6.30987734e-02 -1.18345153e-02 -1.95290849e-01 -1.44926161e-01
 -9.12239701e-02 -2.73788035e-01 -9.13337618e-03  8.74187052e-03
  2.84362614e-01  1.05501994e-01 -1.63510349e-02 -5.68860620e-02
  5.84641472e-02 -2.59890765e-01  2.24393085e-02  5.74704669e-02
 -1.98131025e-01  2.32540760e-02  5.33670932e-03  1.48471922e-01
  4.26165946e-03 -7.31735379e-02 -3.92080694e-02 -1.49903625e-01
 -3.10345650e-01  1.84709400e-01 -5.29429436e-01  3.23113024e-01
 -1.05765350e-01 -1.19410187e-01  1.86951533e-01 -1.10036954e-02
  5.82988523e-02 -1.58249348e-01  3.92559707e-01  3.14450741e-01
 -6.25517666e-02  1.94083333e-01  1.60840094e-01  1.78700149e-01
  4.62739170e-02 -2.57256448e-01 -1.77587241e-01 -1.14103012e-01
  3.62164974e-01 -6.70422763e-02  4.28516239e-01  2.83976793e-01
  3.49690109e-01  1.74854323e-02  7.31839910e-02  1.03672743e-01
  1.35273993e-01 -3.79219279e-03 -1.37540195e-02 -9.70303938e-02
  1.67471781e-01 -8.29358585e-03  3.16338360e-01 -3.31297874e-01
  5.19417942e-01 -3.25837135e-01  1.53863549e-01  9.62316990e-03
  2.09575891e-02  8.23260024e-02 -1.01765487e-02 -1.10586911e-01
  5.00138812e-02 -9.49276313e-02 -1.76907867e-01  4.62060571e-01
  6.20905757e-02  3.85917842e-01 -6.87586784e-01 -1.81567788e-01
 -3.09903800e-01 -3.63675617e-02 -9.60334390e-02  1.42984629e-01
  1.67817593e-01 -5.06675959e-01  3.03264916e-01 -4.25640047e-02
  8.59341025e-02  1.43097162e-01 -3.22044253e-01 -5.04675806e-02
  5.17239906e-02  2.55763173e-01 -1.76627576e-01  1.86275959e-01
 -1.54846266e-01  1.20850161e-01  1.32998288e-01  5.22317812e-02
  4.78777327e-02 -1.50648743e-01 -2.49675065e-01  2.11764462e-02
 -1.45579740e-01 -8.77388418e-02 -4.61780056e-02  1.76423639e-01
  3.11716586e-01  2.90463090e-01  3.80283371e-02  2.05175653e-01
  7.71842301e-02 -3.84912848e-01 -7.37120360e-02 -3.09835613e-01
 -1.61030531e-01  3.86833727e-01  1.34741560e-01 -3.08185965e-02
 -3.35152268e-01 -5.60666472e-02  4.92193699e-01  1.53496876e-01
  1.50605395e-01 -3.96834835e-02  5.36981784e-03 -1.86889574e-01
 -4.73385721e-01 -8.81780982e-02  3.19360852e-01  3.66404593e-01
 -3.26715976e-01 -1.93275407e-01 -1.32767901e-01  1.67301729e-01
 -1.87716872e-01 -3.79280180e-01  3.80554572e-02  2.65105337e-01
 -4.84394222e-01  5.74082255e-01  5.25084972e-01 -1.85631454e-01
 -1.60252079e-01 -1.76445469e-02  1.78149089e-01 -1.47175223e-01
 -5.44887669e-02 -3.25499743e-01  4.93337244e-01  2.06939131e-03
  2.04067975e-01 -1.92340538e-01  1.83032706e-01 -3.58680487e-01
  8.76489729e-02 -4.13645625e-01  2.90675879e-01  1.49046015e-02
  1.05701476e-01  2.50714123e-01  5.87278120e-02  4.63822216e-01
 -3.29898417e-01  1.65413022e-02  1.16961546e-01 -1.38423182e-02
  4.08518389e-02 -6.85438067e-02  9.91196781e-02  1.96554691e-01
  2.69474506e-01  3.81156392e-02 -2.65280828e-02 -1.52071297e-01
  5.65887764e-02  7.25741684e-02 -1.32137254e-01  1.55427694e-01
  1.93343669e-01  2.20208883e-01 -9.16800797e-02 -9.30162519e-02
 -5.25628962e-03  1.21773630e-01  2.67759144e-01 -4.77270454e-01
  2.14290679e-01  1.45627096e-01 -4.49189126e-01 -4.36110675e-01
  1.32659644e-01  2.07956105e-01 -1.22576579e-01  1.99148491e-01
 -4.18555737e-02  8.46402794e-02 -3.16089839e-01 -3.71374190e-03
 -5.87044477e-01  1.88505635e-01 -1.08531602e-02  7.33453333e-02
  5.57893887e-02  2.40225196e-02  9.31443572e-02  2.95579359e-02
 -3.86122428e-03  1.45665571e-01  8.79653543e-02  2.05405831e-01
  1.77371874e-02 -2.22857445e-01  1.26024529e-01 -2.74157319e-02
  1.59724221e-01  1.12880588e-01 -2.12975934e-01  3.52438651e-02
 -3.85601938e-01  4.28476840e-01  3.75685453e-01  6.76952600e-02
  1.37543589e-01  1.13518059e-01  1.44539356e-01 -1.11476332e-01
 -9.11900550e-02  9.77429077e-02 -1.64037123e-02 -1.15409374e-01
 -5.33877134e-01  1.15283668e-01 -2.58286774e-01  1.02024987e-01
 -1.25986964e-01  6.80062547e-02  1.23415798e-01 -1.78385288e-01
  3.95598002e-02  2.00697601e-01 -1.69434920e-01  1.28783405e-01
  1.45809263e-01  2.54094481e-01  1.50490150e-01 -3.14199328e-02
  4.12519217e-01  7.79372007e-02  1.37508929e-01  2.91674078e-01
  2.21684262e-01 -3.34143519e-01 -4.95471060e-01  6.37979656e-02
 -8.40321183e-02  3.24860394e-01 -3.15068662e-01  1.55686840e-01
 -8.36156011e-02 -6.25718385e-03 -5.29074017e-03  2.66054496e-02
  1.51911527e-01 -1.24162182e-01 -1.56580657e-02 -1.48496076e-01
  1.44265831e-01 -3.11772406e-01  1.85433924e-01 -2.19433352e-01
  2.77593523e-01  6.86422586e-02 -1.40370056e-01 -4.38932240e-01
  7.03142732e-02  1.38349265e-01  3.22037905e-01 -1.63608998e-01
  1.97824329e-01  1.18704326e-03 -5.44344969e-02  2.25643322e-01
  2.32769966e-01  5.28069973e-01 -5.12158453e-01  5.46779573e-01
 -1.61406517e-01  5.63982911e-02  1.81129172e-01  9.10167918e-02
 -1.92017928e-01  8.82652327e-02  1.82443410e-02  1.57073826e-01
  4.03615311e-02 -2.64079213e-01 -1.02263659e-01  4.66100611e-02
 -2.40130156e-01  1.46204636e-01 -2.84569591e-01 -1.77257419e-01
  1.95742190e-01  1.42135963e-01 -1.26577213e-01 -4.73474227e-02
 -5.07296801e-01 -1.83300793e-01  3.17369550e-01  2.07105264e-01
 -3.49747986e-02  5.50257444e-01  9.83673036e-02 -1.90156519e-01
  1.17524587e-01 -3.84424686e-01 -1.65227894e-03 -3.30739677e-01
  2.29821116e-01  3.70964825e-01  1.55113548e-01  8.33970085e-02
  3.20073068e-02 -5.04830837e-01  7.89740682e-02  3.27256441e-01
 -2.26383239e-01 -3.19734998e-02  2.23656282e-01 -1.44043520e-01
  4.19603363e-02  1.24747910e-01  2.17199877e-01  3.23261738e-01
  2.64506936e-01 -5.97205423e-02 -8.56866874e-03  3.67431402e-01
  2.51632601e-01  1.65642396e-01 -4.16407704e-01  1.99080050e-01
 -4.54019666e-01 -4.55852628e-01  3.35388556e-02  4.59975377e-03
  4.07822609e-01  1.31868765e-01 -1.46853983e-01 -1.52235776e-01
 -5.10989279e-02  2.25360185e-01 -4.61176068e-01  1.52435780e-01
  2.04562455e-01  7.23983347e-02  1.14596859e-01 -4.66914475e-02
  2.80239046e-01 -3.17083538e-01 -3.22373331e-01 -1.42508417e-01
 -3.08851957e-01 -2.40840539e-01  5.18568531e-02 -3.41771066e-01
  3.11226726e-01  3.81945558e-02  3.97444099e-01 -2.80680135e-02
  3.06497991e-01  2.38747865e-01  2.38520771e-01  2.98193306e-01
  2.05335543e-01  2.03407928e-01  5.17095067e-02 -8.71559605e-03
  1.77466720e-01  1.92552298e-01  4.17273521e-01 -3.44269514e-01
  1.34504318e-01  1.52540118e-01 -3.73514965e-02  3.70599627e-01
 -4.47421938e-01 -3.37468415e-01  2.63133436e-01 -3.94771248e-01
 -6.72124922e-02  1.22189358e-01 -1.15306079e-01 -1.13122445e-02
  2.72091717e-01  1.31629884e-01  4.83569086e-01  2.39262044e-01
  4.88076746e-01 -1.01535749e-02  1.66301340e-01 -1.24572918e-01
 -7.23326728e-02 -2.09735155e-01 -4.91846681e-01  2.26146191e-01
  3.78389239e-01  1.17148887e-02  5.66353083e-01 -4.63735491e-01
  3.94121706e-01  3.52505147e-01 -3.32471013e-01 -1.06919199e-01
 -2.64522284e-01  3.68950665e-02  3.31746906e-01 -1.83275953e-01
  6.69124722e-03  2.83519328e-01  4.68962967e-01 -2.01689422e-01
  2.33548492e-01 -4.63323504e-01 -1.32146001e-01 -3.00907910e-01
  3.98201436e-01  2.87619114e-01 -7.39885792e-02 -3.27467658e-02
 -1.87512897e-02  1.87791750e-01  1.47081167e-01 -4.38157558e-01
 -2.56406307e-01  2.99644351e-01  5.34235537e-01  1.18068069e-01
  2.61621743e-01 -1.62573636e-01 -1.07026368e-01  1.21432066e-01
 -2.44438291e-01 -2.13101044e-01 -2.06129044e-01  2.36127391e-01
  1.48910910e-01  3.36344361e-01  2.35576808e-01  1.31014913e-01
 -1.90364808e-01 -3.25793326e-02 -1.21460959e-01  1.98632151e-01
  4.96633440e-01 -1.30998373e-01 -1.00071758e-01 -1.78064197e-01
 -1.76075429e-01  7.16841668e-02 -1.51806146e-01  1.79135889e-01
 -3.11375298e-02  9.78029743e-02 -6.74008019e-03  3.42649579e-01
 -1.24100164e-01  3.12845647e-01  1.10340580e-01 -1.52458861e-01
  2.70617187e-01 -1.97589993e-01 -3.82565185e-02 -2.16067746e-01
 -2.40563154e-01 -1.14367867e+00  7.42873847e-02 -3.83020371e-01
 -8.33177865e-02 -9.66269970e-02 -8.53501260e-04 -8.21588561e-03
 -1.19153142e-01 -5.11824429e-01  2.06825510e-01  1.38458550e-01
 -2.42293715e-01 -6.97519481e-02  4.54073757e-01 -7.88897499e-02
  4.11170661e-01  2.68957317e-01  1.46478727e-01 -1.17327750e-01
  1.18571550e-01  1.38897076e-03 -1.06167495e-01 -1.87759638e-01
  7.80216008e-02  5.87090850e-01  5.38496077e-01  2.73421228e-01]"
Optimizers,"Optimizers ¶ What is Optimizer ? It is very important to tweak the weights of the model during the training process, to make our predictions as correct and optimized as possible. But how exactly do you do that? How do you change the parameters of your model, by how much, and when? Best answer to all above question is optimizers . They tie together the loss function and model parameters by updating the model in response to the output of the loss function. In simpler terms, optimizers shape and mold your model into its most accurate possible form by futzing with the weights. The loss function is the guide to the terrain, telling the optimizer when it’s moving in the right or wrong direction. Below are list of example optimizers Adagrad Adadelta Adam Conjugate Gradients BFGS Momentum Nesterov Momentum Newton’s Method RMSProp SGD Image Credit: CS231n Adagrad ¶ Adagrad (short for adaptive gradient) adaptively sets the learning rate according to a parameter. Parameters that have higher gradients or frequent updates should have slower learning rate so that we do not overshoot the minimum value. Parameters that have low gradients or infrequent updates should faster learning rate so that they get trained quickly. It divides the learning rate by the sum of squares of all previous gradients of the parameter. When the sum of the squared past gradients has a high value, it basically divides the learning rate by a high value, so the learning rate will become less. Similarly, if the sum of the squared past gradients has a low value, it divides the learning rate by a lower value, so the learning rate value will become high. This implies that the learning rate is inversely proportional to the sum of the squares of all the previous gradients of the parameter. \[\begin{split}g_{t}^{i} = \frac{\partial \mathcal{J}(w_{t}^{i})}{\partial W} \\ W = W - \alpha \frac{\partial \mathcal{J}(w_{t}^{i})}{\sqrt{\sum_{r=1}^{t}\left ( g_{r}^{i} \right )^{2} + \varepsilon }}\end{split}\] Note \(g_{t}^{i}\) - the gradient of a parameter, :math: ` Theta ` at an iteration t. \(\alpha\) - the learning rate \(\epsilon\) - very small value to avoid dividing by zero Adadelta ¶ AdaDelta belongs to the family of stochastic gradient descent algorithms, that provide adaptive techniques for hyperparameter tuning. Adadelta is probably short for ‘adaptive delta’, where delta here refers to the difference between the current weight and the newly updated weight. The main disadvantage in Adagrad is its accumulation of the squared gradients. During the training process, the accumulated sum keeps growing. From the above formala we can see that, As the accumulated sum increases learning rate to shrink and eventually become infinitesimally small, at which point the algorithm is no longer able to acquire additional knowledge. Adadelta is a more robust extension of Adagrad that adapts learning rates based on a moving window of gradient updates, instead of accumulating all past gradients. This way, Adadelta continues learning even when many updates have been done. With Adadelta, we do not even need to set a default learning rate, as it has been eliminated from the update rule. Implementation is something like this, \[\begin{split}v_t = \rho v_{t-1} + (1-\rho) \nabla_\theta^2 J( \theta) \\ \Delta\theta &= \dfrac{\sqrt{w_t + \epsilon}}{\sqrt{v_t + \epsilon}} \nabla_\theta J( \theta) \\ \theta &= \theta - \eta \Delta\theta \\ w_t = \rho w_{t-1} + (1-\rho) \Delta\theta^2\end{split}\] Adam ¶ Adaptive Moment Estimation (Adam) combines ideas from both RMSProp and Momentum. It computes adaptive learning rates for each parameter and works as follows. First, it computes the exponentially weighted average of past gradients ( \(v_{dW}\) ). Second, it computes the exponentially weighted average of the squares of past gradients ( \(s_{dW}\) ). Third, these averages have a bias towards zero and to counteract this a bias correction is applied ( \(v_{dW}^{corrected}\) , \(s_{dW}^{corrected}\) ). Lastly, the parameters are updated using the information from the calculated averages. \[\begin{split}v_{dW} = \beta_1 v_{dW} + (1 - \beta_1) \frac{\partial \mathcal{J} }{ \partial W } \\ s_{dW} = \beta_2 s_{dW} + (1 - \beta_2) (\frac{\partial \mathcal{J} }{\partial W })^2 \\ v^{corrected}_{dW} = \frac{v_{dW}}{1 - (\beta_1)^t} \\ s^{corrected}_{dW} = \frac{s_{dW}}{1 - (\beta_1)^t} \\ W = W - \alpha \frac{v^{corrected}_{dW}}{\sqrt{s^{corrected}_{dW}} + \varepsilon}\end{split}\] Note \(v_{dW}\) - the exponentially weighted average of past gradients \(s_{dW}\) - the exponentially weighted average of past squares of gradients \(\beta_1\) - hyperparameter to be tuned \(\beta_2\) - hyperparameter to be tuned \(\frac{\partial \mathcal{J} }{ \partial W }\) - cost gradient with respect to current layer \(W\) - the weight matrix (parameter to be updated) \(\alpha\) - the learning rate \(\epsilon\) - very small value to avoid dividing by zero Conjugate Gradients ¶ Be the first to contribute! BFGS ¶ Be the first to contribute! Momentum ¶ Used in conjunction Stochastic Gradient Descent (sgd) or Mini-Batch Gradient Descent, Momentum takes into account past gradients to smooth out the update. This is seen in variable \(v\) which is an exponentially weighted average of the gradient on previous steps. This results in minimizing oscillations and faster convergence. \[\begin{split}v_{dW} = \beta v_{dW} + (1 - \beta) \frac{\partial \mathcal{J} }{ \partial W } \\ W = W - \alpha v_{dW}\end{split}\] Note \(v\) - the exponentially weighted average of past gradients \(\frac{\partial \mathcal{J} }{ \partial W }\) - cost gradient with respect to current layer weight tensor \(W\) - weight tensor \(\beta\) - hyperparameter to be tuned \(\alpha\) - the learning rate Nesterov Momentum ¶ Be the first to contribute! Newton’s Method ¶ Be the first to contribute! RMSProp ¶ Another adaptive learning rate optimization algorithm, Root Mean Square Prop (RMSProp) works by keeping an exponentially weighted average of the squares of past gradients. RMSProp then divides the learning rate by this average to speed up convergence. \[\begin{split}s_{dW} = \beta s_{dW} + (1 - \beta) (\frac{\partial \mathcal{J} }{\partial W })^2 \\ W = W - \alpha \frac{\frac{\partial \mathcal{J} }{\partial W }}{\sqrt{s^{corrected}_{dW}} + \varepsilon}\end{split}\] Note \(s\) - the exponentially weighted average of past squares of gradients \(\frac{\partial \mathcal{J} }{\partial W }\) - cost gradient with respect to current layer weight tensor \(W\) - weight tensor \(\beta\) - hyperparameter to be tuned \(\alpha\) - the learning rate \(\epsilon\) - very small value to avoid dividing by zero SGD ¶ SGD stands for Stochastic Gradient Descent.In Stochastic Gradient Descent, a few samples are selected randomly instead of the whole data set for each iteration. In Gradient Descent, there is a term called “batch” which denotes the total number of samples from a dataset that is used for calculating the gradient for each iteration. In typical Gradient Descent optimization, like Batch Gradient Descent, the batch is taken to be the whole dataset. Although, using the whole dataset is really useful for getting to the minima in a less noisy or less random manner, but the problem arises when our datasets get really huge. This problem is solved by Stochastic Gradient Descent. In SGD, it uses only a single sample to perform each iteration. The sample is randomly shuffled and selected for performing the iteration. Since only one sample from the dataset is chosen at random for each iteration, the path taken by the algorithm to reach the minima is usually noisier than your typical Gradient Descent algorithm. But that doesn’t matter all that much because the path taken by the algorithm does not matter, as long as we reach the minima and with significantly shorter training time. References [1] https://ruder.io/optimizing-gradient-descent/ [2] http://www.deeplearningbook.org/contents/optimization.html [3] https://arxiv.org/pdf/1502.03167.pdf","[ 2.98791289e-01  2.64400244e-01 -1.53548211e-01  2.85411417e-01
  4.32923138e-02  3.08026373e-03  2.86808878e-01 -1.65039510e-01
  5.15223086e-01  1.13579556e-01  9.34797674e-02 -3.76288533e-01
 -6.00600094e-02 -1.54038951e-01 -4.35018420e-01 -7.40709454e-02
 -3.66778404e-01 -8.96490887e-02 -6.20098785e-02 -3.75965118e-01
  8.89557377e-02  1.22731350e-01 -2.02166557e-01 -1.68566957e-01
 -3.16956282e-01 -3.15275043e-02 -1.25396997e-01  5.52816577e-02
 -2.75577366e-01  8.43021832e-03  1.16080634e-01  9.65979844e-02
 -1.85745612e-01  2.69694090e-01 -3.95575389e-02 -1.88750029e-01
 -4.82441336e-02  1.44300759e-01  1.83664858e-02 -5.81787042e-02
  4.75303642e-02  2.60013759e-01 -3.99320543e-01  1.92875355e-01
 -2.61360884e-01 -1.44224718e-01  7.55491480e-02  2.17774525e-01
  1.80655360e-01  5.05686998e-02  1.13106295e-01  6.11578561e-02
 -8.49562660e-02 -1.52003571e-01  2.43154794e-01 -4.44912016e-01
 -2.03412175e-02  5.59962749e-01  5.20812646e-02 -1.14928961e-01
 -4.56429422e-02 -5.93974590e-01  4.77923185e-01 -2.23976254e-01
 -8.83091390e-02 -2.39812762e-01  5.07932082e-02  1.61847487e-01
  2.73988128e-01  1.70765996e-01 -1.00049488e-01 -3.50215018e-01
 -7.93651864e-02  6.42079115e-02 -1.77865569e-02  1.33176163e-01
 -1.86356395e-01  9.73247066e-02 -4.16943431e-01  1.38691038e-01
 -1.01145186e-01  7.41097424e-03  2.34940499e-01  3.95404130e-01
  9.61074829e-02  8.81447315e-01 -5.74959144e-02  9.25561041e-02
 -1.71499655e-01  1.97269276e-01 -6.86139688e-02  1.13731250e-01
 -1.64246224e-02  2.87274998e-02 -1.64880574e-01 -2.35388964e-01
  1.09318264e-01 -3.29928637e-01  4.57035005e-02 -6.57731108e-03
 -3.60486507e-01 -4.75608520e-02  1.74553916e-01  2.45752990e-01
 -9.99789536e-02 -2.42445633e-01  3.48549128e-01 -1.41928494e-01
  5.51385358e-02 -2.18748748e-01  1.14359841e-01  3.65704417e-01
  1.23795912e-01 -3.03456932e-03  6.79008439e-02  2.66335994e-01
  5.90023734e-02  8.36561099e-02 -2.79021204e-01  2.36822963e-01
  9.19929743e-02 -3.11839789e-01 -3.22382927e-01  2.15111613e-01
 -2.55343407e-01  5.77652492e-02  7.13623762e-02 -2.12685496e-01
 -1.94252491e-01  1.58377200e-01 -1.51207030e-01 -1.27505809e-01
  4.66459334e-01 -2.78248668e-01 -3.58842194e-01  1.22043729e-01
 -1.67734861e-01 -2.23184362e-01  1.88689739e-01 -1.63942441e-01
  2.51417875e-01 -1.14672258e-01  1.00563541e-01 -7.92862773e-02
  2.80976534e-01 -3.62939015e-02 -7.92159885e-02  1.49655432e-01
  6.75018504e-02  9.06748399e-02 -8.37208033e-02 -7.73418695e-02
  2.77660072e-01  4.86285686e-02 -1.10763051e-01  7.87276775e-03
  3.76624942e-01  2.38199264e-01  4.15068865e-01 -1.34551510e-01
 -1.31637141e-01  6.47773147e-02 -6.61064237e-02 -2.96091974e-01
 -2.04338431e-02 -8.13512057e-02 -1.62901804e-01  1.15730194e-02
 -2.37991676e-01 -9.67569351e-02 -2.90778559e-02  2.35079587e-01
 -2.25293800e-01  1.71259791e-01 -1.62509888e-01  8.39388072e-02
  1.67409897e-01  6.45122081e-02  1.08290672e-01  5.28673120e-02
  1.22176241e-02 -8.81570727e-02  1.51267499e-01  2.53869779e-02
 -4.22451273e-02  2.13599771e-01  5.45763709e-02  6.71108186e-01
 -4.44121152e-01 -3.41510355e-01  4.55609486e-02 -2.46145040e-01
 -2.24979222e-01 -1.91332161e-01  2.80164242e-01 -2.01741844e-01
  3.54213268e-02 -1.11732878e-01  1.97569877e-01 -2.91525483e-01
  2.18416095e-01  2.61890054e-01  2.14497536e-01 -3.19190472e-02
  1.36636078e-01 -3.29057336e-01  1.82823569e-01  3.40271711e-01
  1.16687380e-02  2.37108693e-01  6.51678964e-02 -6.26067445e-02
 -5.09830534e-01  2.30130285e-01  2.16949493e-01 -2.90311873e-01
  3.45395237e-01  4.39325303e-01 -3.49175304e-01 -2.53902018e-01
 -3.26180197e-02 -5.36081344e-02  2.54720896e-01 -4.06056829e-02
  4.96000201e-01 -5.46241343e-01 -1.49504066e-01  2.03387856e-01
  9.64721292e-03 -1.16568983e-01 -1.92889705e-01  4.48667705e-02
 -1.73397586e-02  1.84564427e-01 -2.13190019e-01 -1.38797730e-01
 -3.81738506e-03  3.04348797e-01 -3.84886116e-02  3.17011833e-01
  1.02708414e-01 -1.96059793e-02  2.93062508e-01  1.73797399e-01
  1.81822181e-01  2.48026997e-01  2.97974572e-02 -5.85820973e-01
  2.68691123e-01 -1.29614100e-01  3.27772573e-02 -3.46400559e-01
  2.16281209e-02  1.19947121e-01  2.15633407e-01 -1.23406105e-01
 -1.55146956e-01 -2.57727578e-02 -1.18292429e-01 -9.25124511e-02
  1.08521134e-01 -1.87867194e-01  1.32408753e-01  1.25429183e-01
  3.60020369e-01  2.07671493e-01 -1.71107069e-01 -6.31690621e-02
  4.70689125e-02 -2.58601606e-01 -8.09190199e-02 -4.68395427e-02
  2.41266996e-01 -1.15814887e-01  2.95599476e-02 -7.22308755e-02
 -1.86813474e-01 -1.88745528e-01  2.75176316e-01  1.74067736e-01
  1.64981633e-02 -1.64073229e-01  1.63465559e-01 -2.94972658e-01
 -5.80074787e-02  2.15366051e-01  2.33293459e-01 -7.52530545e-02
 -1.17533188e-03  6.99996054e-02  1.73045218e-01 -1.14227414e-01
 -1.76598340e-01  3.89481306e-01 -1.00679323e-03  3.76214623e-01
  2.36905232e-01 -3.16904128e-01  1.10087089e-01  1.53664470e-01
  1.37979239e-01  1.00853324e-01 -2.19895169e-01  1.88950017e-01
 -5.81968799e-02  1.41105473e-01 -4.81241882e-01  4.64011610e-01
 -1.32034674e-01 -1.18344694e-01  7.67193437e-02 -3.22684109e-01
  4.72975791e-01 -7.19356537e-02  2.85814583e-01  1.04157820e-01
  2.71648187e-02  1.70103639e-01  2.68881351e-01 -1.02008373e-01
  2.21446082e-01  4.01537605e-02  2.23008823e-03  2.24209040e-01
  3.62308383e-01  1.08950131e-01 -2.43015885e-01 -3.33483100e-01
  4.56624568e-01 -2.87278056e-01 -1.58389926e-01 -2.30872437e-01
 -2.16283500e-02  4.58697349e-01 -1.39266830e-02 -1.64167941e-01
 -1.17265247e-02 -1.07273981e-01  1.04942918e-01  7.56154284e-02
  2.35395189e-02  4.30527806e-01 -1.48003936e-01  1.29251152e-01
 -4.89475243e-02  3.72094631e-01  5.87350652e-02 -1.15878414e-02
  4.84250009e-01 -6.90921247e-02  1.31025285e-01  5.89573476e-03
  2.30332464e-01  4.58115458e-01 -9.22004282e-02 -8.11137259e-01
 -8.00369382e-02  3.50751281e-01  2.05196142e-01  4.87355947e-01
 -5.85163087e-02 -1.32390201e-01  1.22997425e-01 -9.48080868e-02
  2.43184298e-01 -1.50240317e-01  2.92828411e-01 -7.82335922e-02
  4.15468663e-02 -2.59315908e-01  1.65677443e-01 -2.78520621e-02
  6.21611886e-02  4.75232184e-01  2.72619903e-01  2.27174804e-01
  2.82829255e-01  4.72197011e-02 -1.19728252e-01  2.10559830e-01
 -2.24535376e-01  1.85418278e-01  1.16995580e-01 -2.70192564e-01
 -1.61639154e-01 -1.35470908e-02  2.17611507e-01  1.02521278e-01
  1.65251598e-01 -1.49044469e-01  1.23425918e-02 -3.87260318e-03
 -2.97963232e-01  7.53444880e-02  1.09318659e-01  2.41346419e-01
 -6.40521646e-02 -2.78117269e-01  2.85497189e-01 -5.88378459e-02
 -1.68827951e-01  4.25678790e-01  1.10930592e-01  7.30602443e-01
 -2.49059156e-01 -4.73507643e-02  1.49020419e-01 -7.20090885e-03
  4.90813911e-01  4.32355255e-01 -2.51598597e-01 -9.49744284e-02
  6.57294095e-02  2.35313132e-01 -6.28509745e-03 -1.85800999e-01
  3.55641156e-01  3.91566902e-02  8.87327418e-02 -1.40426397e-01
 -4.77813892e-02 -1.45412385e-01  3.25334370e-01  9.11590457e-02
 -3.38442862e-01 -1.82347804e-01 -1.59590468e-01  2.27927208e-01
 -3.38258028e-01  1.67437062e-01 -6.05814457e-02  2.07968324e-01
 -2.12009415e-01  1.04878686e-01  1.89586841e-02  3.39493826e-02
  1.18553825e-03 -2.56455708e-02 -4.76528794e-01 -3.41827832e-02
  2.01095313e-01  1.59738123e-01 -8.39044303e-02  1.69397950e-01
  1.70228451e-01  1.29513636e-01 -5.48744082e-01  4.13862556e-01
  3.99869323e-01 -1.57966554e-01  3.41356367e-01 -1.88606605e-01
 -2.05017179e-02 -1.18407115e-01 -3.57279956e-01 -2.51440108e-01
  3.47767651e-01  3.24349999e-01  4.59880233e-02  1.13184042e-02
  1.15044057e-01  2.71617234e-01 -6.43566549e-02  9.97477546e-02
 -1.64879292e-01 -6.30262718e-02  2.49397695e-01  1.54606640e-01
 -4.73445773e-01  5.76602444e-02 -8.77978429e-02 -4.20067646e-02
  1.04678504e-01  3.30776185e-01  1.01893887e-01  1.33053318e-01
  3.97709370e-01 -2.23216444e-01  2.31272668e-01  3.65579762e-02
  1.66700706e-01  3.76926437e-02 -1.72439348e-02 -2.66331621e-02
 -2.18060583e-01  1.90176606e-01  1.01395577e-01  2.60829926e-04
 -2.85035744e-03 -2.74725199e-01  5.04120532e-03  1.60929948e-01
 -1.61576003e-01 -1.52429909e-01  3.07956457e-01 -2.33854949e-01
 -2.70853579e-01 -6.38397455e-01 -2.44273052e-01  3.26726958e-02
 -8.47005844e-02 -2.32868567e-02 -3.59742343e-02 -1.24340698e-01
  5.03354818e-02  1.58655390e-01  9.17797163e-03  2.03694254e-02
  2.47904837e-01  1.76233441e-01  8.25117975e-02 -3.61969829e-01
  2.10062087e-01  1.04196668e-01 -2.17591748e-02  2.48211026e-01
 -9.99908373e-02 -1.73587844e-01 -1.41577542e-01 -2.74594247e-01
  9.29883271e-02 -1.56280488e-01 -2.66487122e-01  4.17380333e-02
  3.57642770e-02 -3.30659032e-01  3.28464836e-01  5.11155277e-02
  3.65956351e-02  7.99020752e-02  4.67558503e-02  1.07967660e-01
  6.48459196e-02  1.70061320e-01  5.99713624e-01 -1.62864953e-01
  1.32055208e-02  1.87112436e-01  8.16747546e-02 -1.28899425e-01
  3.25681150e-01 -3.99048161e-03  3.58174503e-01 -3.47115517e-01
  1.95735455e-01  1.60948597e-02 -1.53183267e-01 -2.09552199e-02
 -9.50748846e-02  2.17583910e-01 -4.75927770e-01  6.70901775e-01
  3.10593285e-02 -1.23790331e-01  2.16594815e-01  2.27352113e-01
 -2.23119810e-01  3.09087224e-02  3.99080664e-02 -1.49091780e-02
 -2.45597549e-02 -3.16223264e-01  2.07749754e-02  1.92856893e-01
 -1.93987325e-01 -2.80863345e-02 -3.45222130e-02 -1.13473073e-01
  1.74783729e-02  1.14364073e-01 -2.23953485e-01 -5.99354506e-03
  1.17173254e-01  2.98048139e-01  2.84403533e-01  2.56185532e-01
  1.61268979e-01 -2.01497480e-01  2.88950168e-02  2.03952864e-01
  5.24551421e-02  2.02951580e-01  9.80910063e-02  2.34392136e-01
  6.73706979e-02  1.33309990e-01  2.70581245e-01  5.95090270e-01
 -1.32270604e-01  9.34343487e-02 -3.13826919e-01 -2.43335590e-01
 -4.65389013e-01  1.02275975e-01  1.41340613e-01  2.72841398e-02
  6.02811687e-02  1.87727928e-01  5.18714935e-02  3.73455472e-02
 -1.11925103e-01  3.46223593e-01 -1.18297070e-01 -2.54191831e-03
 -2.42336750e-01 -2.05157071e-01 -4.69929397e-01  9.33449939e-02
 -2.23660082e-01 -2.01877683e-01  1.66806355e-01 -1.26892552e-01
 -4.66853231e-02 -1.60790920e-01 -4.49078619e-01  4.47924957e-02
 -2.61828482e-01 -1.02608740e-01 -1.64835751e-01 -1.03320286e-01
 -1.93567470e-01 -7.98331667e-03 -2.61928529e-01 -6.99164644e-02
 -1.73664764e-02 -8.21521878e-02 -9.53108817e-02 -1.47429526e-01
  3.77336517e-02  2.87267745e-01 -2.37919986e-01 -1.15571335e-01
  3.47074628e-01 -2.46989891e-01 -1.29413486e-01 -9.57520679e-03
 -1.07908808e-03  8.64440277e-02 -1.80685639e-01  1.35993063e-01
  1.01894617e-01 -9.19983089e-02 -8.04994404e-02  4.27556597e-02
  2.23197892e-01 -1.98824048e-01  4.97998334e-02  6.45046495e-03
 -2.88235545e-01 -8.49964470e-03  3.13831940e-02  9.87613499e-02
  4.55223694e-02 -3.97099406e-02 -1.51000232e-01 -4.08177614e-01
  3.26932460e-01  1.40896663e-01 -1.56185001e-01  4.23405588e-01
  1.78598613e-01  4.06405866e-01  5.60857892e-01  1.11139089e-01
  4.74790692e-01 -1.56583071e-01  7.73718432e-02 -4.54970524e-02
 -8.81133825e-02  2.99316853e-01 -3.79143357e-01  1.28002599e-01
  5.97768784e-01  1.59847051e-01 -3.34915817e-02 -2.91658133e-01
 -4.47702631e-02  2.03952670e-01 -1.74335986e-02  1.24089420e-01
 -2.12006301e-01  1.85446650e-01  4.64426339e-01 -5.80881834e-02
 -7.67986625e-02 -1.02557123e-01  1.07963517e-01 -3.56400251e-01
  1.05560534e-01 -4.56547856e-01 -8.90648589e-02 -8.21514875e-02
 -1.22045152e-01  1.38782889e-01  2.60072261e-01  1.55334532e-01
  1.23377800e-01  8.76528397e-02  1.10530883e-01 -3.63847136e-01
 -7.77037293e-02  5.03466487e-01  4.13707554e-01  3.44283395e-02
 -1.62880644e-01  1.15370207e-01  7.82281160e-04 -3.82789671e-01
  2.06578776e-01 -1.91060454e-01 -2.26015955e-01  1.92666769e-01
  4.17718738e-02  3.44509929e-01 -1.46531537e-01 -1.00836948e-01
 -3.03332120e-01 -8.34217519e-02  2.88800776e-01  3.07215452e-01
  3.50318253e-01 -4.78053465e-02  1.33090407e-01 -1.57866180e-01
 -1.86369926e-01  7.56763294e-02 -2.37295985e-01  2.28314295e-01
 -2.43566379e-01  2.06928641e-01 -2.14111224e-01  4.62308049e-01
 -7.05989301e-02  1.66154742e-01 -1.00042216e-01  3.34527269e-02
  3.29429448e-01 -4.91710693e-01 -7.42880404e-02 -2.73634970e-01
  1.08822852e-01 -7.54316568e-01  2.18782842e-01 -2.40288273e-01
  1.27039343e-01 -1.61261410e-01 -6.27150387e-02 -1.89323604e-01
 -2.90206492e-01 -2.13812977e-01  2.49657810e-01 -4.70835194e-02
 -4.53137040e-01 -4.95557226e-02 -1.77766740e-01 -1.03548197e-02
  2.82879978e-01  1.07572079e-01  4.04444396e-01 -1.37671113e-01
  7.55206961e-03  2.85706937e-01 -5.68851456e-02 -1.88159436e-01
  3.34289789e-01  2.92053133e-01  2.29441851e-01  8.57932270e-02]"
Regularization,"Regularization ¶ Data Augmentation Dropout Early Stopping Ensembling Injecting Noise L1 Regularization L2 Regularization What is overfitting? From Wikipedia overfitting is, The production of an analysis that corresponds too closely or exactly to a particular set of data, and may therefore fail to fit additional data or predict future observations reliably What is Regularization? It is a Techniques for combating overfitting and improving training. Data Augmentation ¶ Having more data is the surest way to get better consistent estimators (ML model). Unfortunately, in the real world getting a large volume of useful data for training a model is cumbersome and labelling is an extremely tedious (or expensive) task. ‘Gold standard’ labelling requires more manual annotation. For example, in order to develop a better image classifier we can use Mturk and involve more man power to generate dataset, or we could crowdsource by posting on social media and asking people to contribute. The above process can yield good datasets; however, those are difficult to carry and expensive. On the other hand, having a small dataset will lead to the well-known problem of overfitting. Data Augmentation is one interesting regularization technique to resolve the above problem. The concept is very simple, this technique generates new training data from given original dataset. Dataset Augmentation provides a cheap and easy way to increase the volume of training data. This technique can be used for both NLP and CV. In CV we can use the techniques like Jitter, PCA and Flipping. Similarly in NLP we can use the techniques like Synonym Replacement,Random Insertion, Random Deletion and Word Embeddings. Many software libraries contain tools for data augmentation. For example, Keras provides the ImageDataGenerator for augmenting image datasets. Sample code for random deletion def random_deletion ( words , p ): """""" Randomly delete words from the sentence with probability p """""" #obviously, if there's only one word, don't delete it if len ( words ) == 1 : return words #randomly delete words with probability p new_words = [] for word in words : r = random . uniform ( 0 , 1 ) if r > p : new_words . append ( word ) #if you end up deleting all words, just return a random word if len ( new_words ) == 0 : rand_int = random . randint ( 0 , len ( words ) - 1 ) return [ words [ rand_int ]] return new_words Furthermore, when comparing two machine learning algorithms, it is important to train both with either augmented or non-augmented dataset. Otherwise, no subjective decision can be made on which algorithm performed better Further reading NLP Data Augmentation CV Data Augmentation Regularization Dropout ¶ What is Dropout? Dropout is a regularization technique for reducing overfitting in neural networks by preventing complex co-adaptations on training data. Dropout is a technique where randomly selected neurons are ignored during training. They are “dropped-out” randomly. This means that their contribution to the activation of downstream neurons is temporally removed on the forward pass and any weight updates are not applied to the neuron on the backward pass. Simply put, It is the process of ignoring some of the neurons in particular forward or backward pass. Dropout can be easily implemented by randomly selecting nodes to be dropped-out with a given probability (e.g. .1%) each weight update cycle. Most importantly Dropout is only used during the training of a model and is not used when evaluating the model. image from https://www.cs.toronto.edu/~hinton/absps/JMLRdropout.pdf import numpy as np A = np . arange ( 20 ) . reshape (( 5 , 4 )) print ( ""Given input: "" ) print ( A ) def dropout ( X , drop_probability ): keep_probability = 1 - drop_probability mask = np . random . uniform ( 0 , 1.0 , X . shape ) < keep_probability if keep_probability > 0.0 : scale = ( 1 / keep_probability ) else : scale = 0.0 return mask * X * scale print ( "" \n After Dropout: "" ) print ( dropout ( A , 0.5 )) output from above code Given input : [[ 0 1 2 3 ] [ 4 5 6 7 ] [ 8 9 10 11 ] [ 12 13 14 15 ] [ 16 17 18 19 ]] After Dropout : [[ 0. 2. 0. 0. ] [ 8. 0. 0. 14. ] [ 16. 18. 0. 22. ] [ 24. 0. 0. 0. ] [ 32. 34. 36. 0. ]] Further reading Dropout https://www.cs.toronto.edu/~hinton/absps/JMLRdropout.pdf Early Stopping ¶ One of the biggest problem in training neural network is how long to train the model. Training too little will lead to underfit in train and test sets. Traning too much will have the overfit in training set and poor result in test sets. Here the challenge is to train the network long enough that it is capable of learning the mapping from inputs to outputs, but not training the model so long that it overfits the training data. One possible solution to solve this problem is to treat the number of training epochs as a hyperparameter and train the model multiple times with different values, then select the number of epochs that result in the best accuracy on the train or a holdout test dataset, But the problem is it requires multiple models to be trained and discarded. Clearly, after ‘t’ epochs, the model starts overfitting. This is clear by the increasing gap between the train and the validation error in the above plot. One alternative technique to prevent overfitting is use validation error to decide when to stop. This approach is called Early Stopping. While building the model, it is evaluated on the holdout validation dataset after each epoch. If the accuracy of the model on the validation dataset starts to degrade (e.g. loss begins to increase or accuracy begins to decrease), then the training process is stopped. This process is called Early stopping. Python implementation for Early stopping, def early_stopping ( theta0 , ( x_train , y_train ), ( x_valid , y_valid ), n = 1 , p = 100 ): """""" The early stopping meta-algorithm for determining the best amount of time to train. REF: Algorithm 7.1 in deep learning book. Parameters: n: int; Number of steps between evaluations. p: int; ""patience"", the number of evaluations to observe worsening validataion set. theta0: Network; initial network. x_train: iterable; The training input set. y_train: iterable; The training output set. x_valid: iterable; The validation input set. y_valid: iterable; The validation output set. Returns: theta_prime: Network object; The output network. i_prime: int; The number of iterations for the output network. v: float; The validation error for the output network. """""" # Initialize variables theta = theta0 . clone () # The active network i = 0 # The number of training steps taken j = 0 # The number of evaluations steps since last update of theta_prime v = np . inf # The best evaluation error observed thusfar theta_prime = theta . clone () # The best network found thusfar i_prime = i # The index of theta_prime while j < p : # Update theta by running the training algorithm for n steps for _ in range ( n ): theta . train ( x_train , y_train ) # Update Values i += n v_new = theta . error ( x_valid , y_valid ) # If better validation error, then reset waiting time, save the network, and update the best error value if v_new < v : j = 0 theta_prime = theta . clone () i_prime = i v = v_new # Otherwise, update the waiting time else : j += 1 return theta_prime , i_prime , v Further reading Regularization Ensembling ¶ Ensemble methods combine several machine learning techniques into one predictive model. There are a few different methods for ensembling, but the two most common are: Bagging Bagging stands for bootstrap aggregation. One way to reduce the variance of an estimate is to average together multiple estimates. It trains a large number of “strong” learners in parallel. A strong learner is a model that’s relatively unconstrained. Bagging then combines all the strong learners together in order to “smooth out” their predictions. Boosting Boosting refers to a family of algorithms that are able to convert weak learners to strong learners. Each one in the sequence focuses on learning from the mistakes of the one before it. Boosting then combines all the weak learners into a single strong learner. Bagging uses complex base models and tries to “smooth out” their predictions, while boosting uses simple base models and tries to “boost” their aggregate complexity. Injecting Noise ¶ Noise is often introduced to the inputs as a dataset augmentation strategy. When we have a small dataset the network may effectively memorize the training dataset. Instead of learning a general mapping from inputs to outputs, the model may learn the specific input examples and their associated outputs. One approach for improving generalization error and improving the structure of the mapping problem is to add random noise. Adding noise means that the network is less able to memorize training samples because they are changing all of the time, resulting in smaller network weights and a more robust network that has lower generalization error. Noise is only added during training. No noise is added during the evaluation of the model or when the model is used to make predictions on new data. Random noise can be added to other parts of the network during training. Some examples include: Noise Injection on Weights Noise added to weights can be interpreted as a more traditional form of regularization. In other words, it pushes the model to be relatively insensitive to small variations in the weights, finding points that are not merely minima, but minima surrounded by flat regions. Noise Injection on Outputs In the real world dataset, We can expect some amount of mistakes in the output labels. One way to remedy this is to explicitly model the noise on labels. An example for Noise Injection on Outputs is label smoothing Further reading Regularization L1 Regularization ¶ A regression model that uses L1 regularization technique is called Lasso Regression . Mathematical formula for L1 Regularization. Let’s define a model to see how L1 Regularization works. For simplicity, We define a simple linear regression model Y with one independent variable. In this model, W represent Weight, b represent Bias. \[ \begin{align}\begin{aligned}W = w_1, w_2 . . . w_n\\X = x_1, x_2 . . . x_n\end{aligned}\end{align} \] and the predicted result is \(\widehat{Y}\) \[\widehat{Y} = w_1x_1 + w_2x_2 + . . . w_nx_n + b\] Following formula calculates the error without Regularization function \[Loss = Error(Y , \widehat{Y})\] Following formula calculates the error With L1 Regularization function \[Loss = Error(Y - \widehat{Y}) + \lambda \sum_1^n |w_i|\] Note Here, If the value of lambda is Zero then above Loss function becomes Ordinary Least Square whereas very large value makes the coefficients (weights) zero hence it under-fits. One thing to note is that \(|w|\) is differentiable when w!=0 as shown below, \[\begin{split}\frac{\text{d}|w|}{\text{d}w} = \begin{cases}1 & w > 0\\-1 & w < 0\end{cases}\end{split}\] To understand the Note above, Let’s substitute the formula in finding new weights using Gradient Descent optimizer. \[w_{new} = w - \eta\frac{\partial L1}{\partial w}\] When we apply the L1 in above formula it becomes, \[ \begin{align}\begin{aligned}w_{new} = w - \eta. (Error(Y , \widehat{Y}) + \lambda\frac{\text{d}|w|}{\text{d}w})\\\begin{split} = \begin{cases}w - \eta . (Error(Y , \widehat{Y}) +\lambda) & w > 0\\w - \eta . (Error(Y , \widehat{Y}) -\lambda) & w < 0\end{cases}\end{split}\end{aligned}\end{align} \] From the above formula, If w is positive, the regularization parameter \(\lambda\) > 0 will push w to be less positive, by subtracting \(\lambda\) from w. If w is negative, the regularization parameter \(\lambda\) < 0 will push w to be less negative, by adding \(\lambda\) to w. hence this has the effect of pushing w towards 0. Simple python implementation def update_weights_with_l1_regularization ( features , targets , weights , lr , lambda ): ''' Features:(200, 3) Targets: (200, 1) Weights:(3, 1) ''' predictions = predict ( features , weights ) #Extract our features x1 = features [:, 0 ] x2 = features [:, 1 ] x3 = features [:, 2 ] # Use matrix cross product (*) to simultaneously # calculate the derivative for each weight d_w1 = - x1 * ( targets - predictions ) d_w2 = - x2 * ( targets - predictions ) d_w3 = - x3 * ( targets - predictions ) # Multiply the mean derivative by the learning rate # and subtract from our weights (remember gradient points in direction of steepest ASCENT) weights [ 0 ][ 0 ] = ( weights [ 0 ][ 0 ] - lr * np . mean ( d_w1 ) - lambda ) if weights [ 0 ][ 0 ] > 0 else ( weights [ 0 ][ 0 ] - lr * np . mean ( d_w1 ) + lambda ) weights [ 1 ][ 0 ] = ( weights [ 1 ][ 0 ] - lr * np . mean ( d_w2 ) - lambda ) if weights [ 1 ][ 0 ] > 0 else ( weights [ 1 ][ 0 ] - lr * np . mean ( d_w2 ) + lambda ) weights [ 2 ][ 0 ] = ( weights [ 2 ][ 0 ] - lr * np . mean ( d_w3 ) - lambda ) if weights [ 2 ][ 0 ] > 0 else ( weights [ 2 ][ 0 ] - lr * np . mean ( d_w3 ) + lambda ) return weights Use Case L1 Regularization (or varient of this concept) is a model of choice when the number of features are high, Since it provides sparse solutions. We can get computational advantage as the features with zero coefficients can simply be ignored. Further reading Linear Regression L2 Regularization ¶ A regression model that uses L2 regularization technique is called Ridge Regression . Main difference between L1 and L2 regularization is, L2 regularization uses “squared magnitude” of coefficient as penalty term to the loss function. Mathematical formula for L2 Regularization. Let’s define a model to see how L2 Regularization works. For simplicity, We define a simple linear regression model Y with one independent variable. In this model, W represent Weight, b represent Bias. \[ \begin{align}\begin{aligned}W = w_1, w_2 . . . w_n\\X = x_1, x_2 . . . x_n\end{aligned}\end{align} \] and the predicted result is \(\widehat{Y}\) \[\widehat{Y} = w_1x_1 + w_2x_2 + . . . w_nx_n + b\] Following formula calculates the error without Regularization function \[Loss = Error(Y , \widehat{Y})\] Following formula calculates the error With L2 Regularization function \[Loss = Error(Y - \widehat{Y}) + \lambda \sum_1^n w_i^{2}\] Note Here, if lambda is zero then you can imagine we get back OLS. However, if lambda is very large then it will add too much weight and it leads to under-fitting. To understand the Note above, Let’s substitute the formula in finding new weights using Gradient Descent optimizer. \[w_{new} = w - \eta\frac{\partial L2}{\partial w}\] When we apply the L2 in above formula it becomes, \[ \begin{align}\begin{aligned}w_{new} = w - \eta. (Error(Y , \widehat{Y}) + \lambda\frac{\partial L2}{\partial w})\\ = w - \eta . (Error(Y , \widehat{Y}) +2\lambda w)\end{aligned}\end{align} \] Simple python implementation def update_weights_with_l2_regularization ( features , targets , weights , lr , lambda ): ''' Features:(200, 3) Targets: (200, 1) Weights:(3, 1) ''' predictions = predict ( features , weights ) #Extract our features x1 = features [:, 0 ] x2 = features [:, 1 ] x3 = features [:, 2 ] # Use matrix cross product (*) to simultaneously # calculate the derivative for each weight d_w1 = - x1 * ( targets - predictions ) d_w2 = - x2 * ( targets - predictions ) d_w3 = - x3 * ( targets - predictions ) # Multiply the mean derivative by the learning rate # and subtract from our weights (remember gradient points in direction of steepest ASCENT) weights [ 0 ][ 0 ] = weights [ 0 ][ 0 ] - lr * np . mean ( d_w1 ) - 2 * lambda * weights [ 0 ][ 0 ] weights [ 1 ][ 0 ] = weights [ 1 ][ 0 ] - lr * np . mean ( d_w2 ) - 2 * lambda * weights [ 1 ][ 0 ] weights [ 2 ][ 0 ] = weights [ 2 ][ 0 ] - lr * np . mean ( d_w3 ) - 2 * lambda * weights [ 2 ][ 0 ] return weights Use Case L2 regularization can address the multicollinearity problem by constraining the coefficient norm and keeping all the variables. L2 regression can be used to estimate the predictor importance and penalize predictors that are not important. One issue with co-linearity is that the variance of the parameter estimate is huge. In cases where the number of features are greater than the number of observations, the matrix used in the OLS may not be invertible but Ridge Regression enables this matrix to be inverted. Further reading Ridge Regression References [1] http://www.deeplearningbook.org/contents/regularization.html","[ 4.20617163e-02 -3.78994077e-01 -2.35219613e-01  5.57418287e-01
  5.30123711e-01  2.44717114e-02  2.36827210e-01 -1.40606314e-01
  2.71387815e-01 -3.55157554e-01  2.66097158e-01 -4.74365689e-02
 -1.94090486e-01 -3.72988611e-01 -6.40503645e-01 -5.73966265e-01
  7.91321844e-02  1.88596413e-01 -4.85733747e-02 -4.43101883e-01
  1.50606364e-01  1.57119662e-01 -2.86891252e-01 -1.97265267e-01
 -3.81090999e-01 -7.18436390e-02  4.13222849e-01 -2.69252092e-01
 -5.15455961e-01 -6.28168210e-02  2.66393065e-01  3.24658990e-01
 -2.69390881e-01  4.08767492e-01 -1.73133120e-01 -2.74882436e-01
  3.22390229e-01 -5.06939366e-04 -3.22072327e-01  2.02739865e-01
 -1.47835791e-01  4.34196889e-01  1.62634015e-01  3.25761735e-01
  3.01878750e-02  1.42584398e-01 -1.76764905e-01  1.25906765e-01
  2.69859523e-01  2.33341493e-02 -3.28156836e-02  1.68153822e-01
  1.87099367e-01 -1.31996619e-02  1.58066556e-01  5.71341589e-02
 -4.14123610e-02  1.16510555e-01 -1.36204913e-01 -1.35216296e-01
  3.03274989e-01 -6.24735560e-03  3.03488195e-01  5.68493366e-01
 -2.45647669e-01 -1.25574231e-01  1.04399830e-01  4.30460542e-01
  2.36499608e-01  1.23007596e-02 -1.69781908e-01 -2.24159032e-01
  2.11001188e-01 -2.53639072e-02  1.56668276e-02 -1.09867811e-01
 -9.31568518e-02 -2.63450801e-01  2.94458382e-02  1.10864174e-02
 -1.60169184e-01  2.10581899e-01  1.31441474e-01 -1.74517035e-01
  2.30407983e-01  4.43698585e-01 -7.89126381e-03  3.56963873e-01
 -3.48603129e-02  3.91323566e-02 -2.78949946e-01  3.11390698e-01
 -4.19185936e-01  5.47662437e-01 -4.53807823e-02 -2.53956914e-02
  1.93143412e-02 -4.14795518e-01 -5.52119613e-02  1.05213359e-01
 -4.66729701e-01 -3.99223603e-02  4.95311022e-01 -3.48243900e-02
 -8.79250467e-02  1.08854175e-01 -1.36030272e-01 -2.78938651e-01
 -3.17944109e-01 -1.92509249e-01 -4.43937987e-01  9.06248763e-02
 -6.95543066e-02  4.90474030e-02  1.00273237e-01 -2.16047540e-02
 -2.16801867e-01  6.68414161e-02  9.09930915e-02  2.70999074e-01
  1.70252562e-01 -1.68731451e-01 -4.57554400e-01  5.59811413e-01
 -4.96492803e-01 -2.01128840e-01  2.19996929e-01 -1.65128857e-01
 -3.00957505e-02  1.90755665e-01 -8.73581022e-02 -2.54279643e-01
  2.40830779e-02 -1.18966080e-01 -6.87154457e-02 -5.81096113e-02
 -2.70649754e-02 -1.29024789e-01 -1.10426340e-02 -1.20851845e-01
 -2.02764198e-01  1.17909610e-01  5.94214983e-02  1.40627287e-02
 -5.54620266e-01 -1.48797520e-02 -9.32706147e-03  6.50856420e-02
 -2.13274807e-01 -6.05151467e-02  1.62352130e-01  1.81832224e-01
  3.84147644e-01 -1.39651284e-01 -2.34850273e-01 -1.86340392e-01
  7.33395889e-02 -5.21918200e-02  2.45571375e-01 -2.90086925e-01
  5.06429709e-02  1.77905083e-01 -5.13756946e-02 -1.05938673e-01
 -5.43434247e-02 -1.16300531e-01 -1.13011286e-01  8.26570392e-02
 -1.67374954e-01  1.62405625e-01 -1.96020454e-01  2.06030577e-01
 -1.36099935e-01 -1.45642415e-01 -2.23201171e-01  2.93317854e-01
  1.60862684e-01  1.01801187e-01  1.57196254e-01 -1.28178485e-03
  2.95192897e-01  6.82741851e-02  9.88090485e-02 -2.53453329e-02
  3.35409671e-01  1.96264565e-01  2.75000393e-01  3.01997423e-01
 -7.59147033e-02 -4.08394337e-01  3.31931263e-01  6.09398112e-02
 -5.20782351e-01  1.45406902e-01  5.45092225e-01  2.10935354e-01
 -2.18895078e-01 -1.47491712e-02  9.71698463e-02 -4.39520121e-01
  1.05738193e-01 -2.60050297e-01 -5.26659563e-02  9.87396985e-02
  3.16578776e-01 -1.49268001e-01  1.96508139e-01  8.65806788e-02
 -3.20122242e-02 -3.53288390e-02 -8.58044811e-03 -1.70606330e-01
 -3.35180938e-01  7.53416181e-01 -1.32954597e-01 -5.06849959e-04
  2.31388770e-03  4.29195166e-01 -2.57178217e-01 -9.52865109e-02
  1.31725460e-01 -7.53314942e-02  2.02670395e-01  5.38219996e-02
 -6.04441948e-02 -3.88350904e-01  1.47726476e-01  1.65920198e-01
 -5.70358820e-02 -4.55794662e-01 -1.01733223e-01  5.08427680e-01
 -1.11336656e-01  4.08440590e-01  7.81269073e-02 -6.04669213e-01
  3.08799177e-01  6.73430488e-02 -9.84840393e-02  2.48453408e-01
  1.89117119e-01 -6.42981753e-02  3.21718633e-01 -2.13429600e-01
  3.87608051e-01  5.75966574e-03 -5.16751520e-02 -5.30245185e-01
 -9.77853537e-02 -8.80823433e-02  8.24502409e-02 -4.58169162e-01
  2.44084179e-01  9.48668718e-02  6.35689273e-02  4.38749120e-02
 -1.66004121e-01 -3.56498897e-01 -5.83301187e-01  2.60309517e-01
 -5.75420260e-02  9.09520835e-02  1.06361866e-01  1.24411896e-01
  3.50091517e-01 -4.38384533e-01 -1.26900196e-01 -1.07097752e-01
  3.03767800e-01  2.67501418e-02 -5.70589192e-02 -2.28913173e-01
  1.14982054e-01 -3.23507518e-01 -6.63452148e-02 -1.96280867e-01
 -5.13155341e-01 -3.08592413e-02  7.21906841e-01  3.51632327e-01
 -4.48278397e-01 -3.23781148e-02  1.91192120e-01 -1.18447721e-01
 -1.32295638e-01  1.19998649e-01  1.74901545e-01 -6.15100622e-01
  1.32468000e-01  1.76877797e-01  9.56480727e-02 -4.03206311e-02
 -5.97703576e-01  8.54524672e-02 -3.82367373e-02  4.27080393e-01
  2.48800531e-01 -3.21202040e-01  1.25418931e-01 -8.83268863e-02
  1.17685096e-02  3.04162242e-02  1.87094510e-01  1.61739513e-01
 -2.22001448e-01 -2.13688016e-01 -5.08644134e-02  3.57366532e-01
  5.43188378e-02 -1.49786502e-01  3.22392359e-02 -9.94521827e-02
  2.46132910e-01 -4.20510843e-02  4.22563970e-01  2.48103350e-01
  3.10871936e-02  3.94417435e-01  1.89390630e-01 -1.58880427e-02
  6.43653646e-02 -1.67571567e-02  6.71458840e-02  8.87908265e-02
  1.46749198e-01  1.46021217e-01 -2.40319595e-01 -5.15932620e-01
  1.52394176e-01 -1.77171126e-01  4.49282974e-02  1.21996827e-01
 -1.64181381e-01  1.77023098e-01 -3.24582815e-01 -8.86554867e-02
 -1.06400907e-01 -9.78368670e-02  1.73082113e-01 -5.51229045e-02
  6.68395340e-01  2.69527346e-01  1.28690433e-02 -5.09417914e-02
 -7.28898793e-02  7.54744262e-02  2.81013735e-03  1.06801368e-01
  3.95069242e-01 -8.92756805e-02  8.79999921e-02 -1.09408036e-01
  8.29751641e-02  4.39779192e-01 -9.44234282e-02 -8.32744986e-02
 -1.51479229e-01  5.79896569e-03  1.23403735e-01  2.57448792e-01
  1.23560816e-01 -1.92259938e-01  3.06809306e-01 -4.46199104e-02
  3.01586032e-01  2.39451192e-02  1.39865264e-01  3.04238964e-02
  4.00882289e-02 -2.75266439e-01  5.96443713e-02 -1.10459626e-01
  2.10179061e-01  6.28579855e-01  2.14776874e-01  3.78705263e-01
  4.54127073e-01 -5.61398417e-02 -1.97744966e-02  2.87803173e-01
 -1.91328913e-01  3.36474955e-01 -4.55946624e-02  1.97796524e-03
 -4.41673815e-01 -1.80173039e-01 -1.28905684e-01 -4.53973025e-01
 -1.29223570e-01 -8.89461413e-02  8.42476562e-02 -7.15365112e-02
  1.64172471e-01  2.28838414e-01  2.66820103e-01  2.29616106e-01
  1.64556414e-01 -8.70577097e-01 -3.42185795e-01 -5.29947989e-02
 -4.97553527e-01  1.23466641e-01  1.38722301e-01  4.91964936e-01
 -2.03149080e-01 -2.71061093e-01  4.12513614e-01  2.16513515e-01
  4.98689592e-01 -1.07513584e-01  4.56193089e-02  1.34204328e-01
 -1.49123341e-01 -1.69825226e-01  2.51266599e-01  1.99934952e-02
  4.47327048e-01  4.61905807e-01 -4.83277082e-01 -2.20038682e-01
 -1.72490090e-01 -4.66302395e-01  9.30460691e-02  9.46455449e-02
 -1.99419364e-01 -8.80610645e-02 -5.96394911e-02  2.77387917e-01
  1.16058797e-01  3.00192207e-01 -2.23929703e-01  1.91947967e-01
  2.02914536e-01 -2.85450816e-01  4.69569582e-04  3.00373975e-02
  5.77232763e-02 -1.51865631e-01 -2.93994784e-01  1.16817817e-01
  3.37668180e-01  2.32328638e-01  1.32938355e-01  2.22435594e-01
  7.41980746e-02  2.17267185e-01 -4.56739694e-01  1.92991585e-01
  1.30820483e-01 -2.04067454e-01 -3.37818563e-02 -3.01968217e-01
 -5.29193819e-01 -3.78093868e-01 -5.12297630e-01 -2.55519927e-01
  3.23671103e-01  2.53408283e-01  5.83824143e-02 -9.98240709e-03
 -5.69666505e-01  3.64683792e-02 -9.13223028e-02 -4.65875715e-02
 -3.78368735e-01  2.75076479e-01  1.54945493e-01  3.06245625e-01
 -6.36170447e-01  4.12869193e-02 -2.47715078e-02 -6.20005690e-02
 -9.05517861e-02 -2.88334284e-02  1.01699650e-01  3.97560820e-02
  1.98551089e-01 -3.33669007e-01  2.51296666e-02  1.97809204e-01
  2.79536843e-03 -1.82833254e-01 -1.27696633e-01 -6.49087876e-02
 -1.61309503e-02  2.71940410e-01  7.85246789e-01 -9.71164554e-04
 -1.71850145e-01  1.32506937e-02 -1.25500619e-01  5.57137012e-01
  2.38973588e-01  9.27980244e-03  7.24572182e-01  1.73335165e-01
 -7.09174037e-01 -5.07329941e-01  2.95151956e-03 -6.01192564e-02
 -1.02647066e-01 -1.17945276e-01 -2.00768441e-01  1.55934431e-02
  2.02859104e-01 -5.73328659e-02 -9.79804695e-02  9.12150145e-02
  1.58388644e-01  2.10970059e-01 -1.86575174e-01 -3.86013865e-01
  5.30062765e-02  3.98700349e-02  7.06423596e-02  4.26923960e-01
  6.35832429e-01 -1.45552427e-01  2.61176407e-01 -4.19301808e-01
  1.63435772e-01 -2.88039386e-01  1.48270316e-02  1.97744280e-01
 -4.57530618e-02 -1.23530850e-01 -6.52296469e-02  1.67872161e-01
  3.07220936e-01 -1.60773620e-01 -2.41127834e-01 -2.51667172e-01
 -1.12822175e-01  2.07375959e-01  1.52911007e-01 -9.52348337e-02
  5.10934174e-01  1.41204242e-03 -1.89612925e-01 -1.17568217e-01
  2.47543082e-01 -5.57667799e-02  4.46384907e-01 -1.72897018e-02
  2.09153980e-01  1.06439948e-01 -2.22786710e-01  8.61153007e-03
 -1.43782914e-01 -1.87570751e-01 -1.80329695e-01  8.93452883e-01
  8.66847038e-02 -2.24260539e-01  2.79282808e-01  5.71691617e-02
 -4.43799734e-01 -2.80927829e-02  3.19157034e-01  4.67382431e-01
 -1.86954290e-01 -2.10375533e-01  4.03604299e-01  1.55025080e-01
 -7.01314032e-01  1.06517255e-01 -5.60638830e-02 -1.04793850e-02
 -7.00318515e-02  1.64717093e-01 -4.65944290e-01  1.72668517e-01
  5.90584874e-02  1.57056496e-01  3.68404299e-01  6.89156577e-02
  5.59903868e-02  5.23047447e-01 -2.93866038e-01  9.88193303e-02
 -1.81966871e-01 -2.39309877e-01  1.46024749e-01  2.32979655e-01
 -3.10147256e-02  4.43351775e-01 -9.55060422e-02 -4.88082096e-02
  3.61603528e-01  3.93694825e-02 -2.42825195e-01 -2.44668901e-01
 -2.09629774e-01  2.10892811e-01  1.81487486e-01 -2.22265065e-01
 -1.25711456e-01  1.66531339e-01  2.54421141e-02  8.73031244e-02
  7.78958276e-02  2.19598040e-01 -2.47549057e-01 -8.41569602e-02
  9.03382599e-02 -5.01524024e-02 -3.71190667e-01 -9.78871584e-02
  1.11961871e-01  7.85417706e-02  1.25748992e-01 -1.62714243e-01
 -2.07559690e-02 -3.01301807e-01  5.15783019e-02  9.31131467e-03
 -2.53026158e-01  1.21884592e-01 -1.33520305e-01  8.38751346e-02
 -4.34227325e-02 -1.15966454e-01 -1.27664864e-01  2.74169624e-01
  2.91317493e-01 -3.89558643e-01  3.06880951e-01  2.54947215e-01
 -7.41442516e-02  1.51073039e-01 -1.01021761e-02 -3.01550925e-01
  2.42281646e-01 -1.22686982e-01 -7.91255176e-01  2.28952110e-01
  9.30763781e-06  1.89762503e-01 -9.25293565e-02 -1.20569102e-01
  3.56078483e-02 -3.28158408e-01  9.38384309e-02  1.45359635e-01
  1.83962345e-01 -5.80969788e-02  3.64821553e-01  3.10326777e-02
 -5.02796657e-02 -1.15044564e-01  1.41957864e-01 -8.59902054e-02
 -3.53405140e-02 -4.54815388e-01 -2.52753161e-02 -5.32665625e-02
  1.44843042e-01 -3.34189199e-02  1.08003430e-02  3.21744740e-01
  3.54311794e-01  2.27309301e-01  2.15723574e-01 -8.52948800e-02
  5.35917938e-01 -5.91652095e-02  1.63675651e-01 -2.32745260e-01
 -7.42809325e-02  1.71191186e-01  1.57326739e-03  2.75827408e-01
  5.23927927e-01  3.65015566e-02 -3.56591284e-01  1.13475829e-01
 -4.82834689e-02  3.18988144e-01 -1.44474328e-01  1.41546980e-01
 -8.39076750e-03  9.89525318e-02  5.61106622e-01 -1.76654965e-01
 -1.52028382e-01 -1.04904056e-01  3.89129728e-01 -5.66223502e-01
  1.17444992e-01  3.84055823e-03 -2.42786124e-01  1.99151039e-01
 -6.21674210e-02  4.59924906e-01 -2.14375347e-01  1.09375417e-01
 -6.00149408e-02  3.59087773e-02  1.94477752e-01 -1.20676212e-01
 -4.81305607e-02  4.27712381e-01  4.26196337e-01 -2.65331455e-02
  4.80140373e-03  3.37216318e-01 -4.96934727e-02 -3.94441962e-01
 -1.77280474e-02 -2.25713864e-01 -3.00015509e-01 -9.90217924e-02
  2.34693170e-01  4.40371968e-02 -7.00900927e-02  2.68542394e-02
  9.67067294e-03 -2.31352091e-01  5.91163635e-01  4.55666721e-01
 -2.50368297e-01  1.87827498e-01  2.65558939e-02 -1.08750202e-01
 -4.57976282e-01  8.86571854e-02  3.13483477e-02  2.73140013e-01
 -9.43383649e-02 -2.63839096e-01 -9.91670117e-02  3.94828498e-01
  4.75051627e-03  4.12343562e-01 -1.31789505e-01  3.05749118e-01
  3.32870543e-01 -3.16332161e-01  2.19306469e-01 -1.32015556e-01
  9.33343917e-02 -5.09607613e-01 -7.51913935e-02 -3.67128313e-01
 -5.96233197e-02 -1.16493873e-01  7.31292665e-02 -3.71727288e-01
 -3.93851042e-01 -2.82517910e-01  2.02112168e-01  2.47808471e-01
 -3.61672699e-01 -2.77269725e-02  4.92520928e-01  1.02744356e-01
  2.56534576e-01  1.37119398e-01  3.66464078e-01 -7.35198855e-02
  3.24501097e-01  3.71178389e-01 -1.71468645e-01 -3.57981116e-01
  3.87495250e-01 -8.33005533e-02  2.32698351e-01 -2.70538092e-01]"
Architectures,"Architectures ¶ Autoencoder CNN GAN MLP RNN VAE Autoencoder ¶ An autoencoder is a type of feedforward neural network that attempts to copy its input to its output. Internally, it has a hidden layer, h , that describes a code , used to represent the input. The network consists of two parts: An encoder function: \(h = f(x)\) . A decoder function, that produces a reconstruction: \(r = g(h)\) . The figure below shows the presented architecture. Source [6] The autoencoder compresses the input into a lower-dimensional code, and then it reconstructs the output from this representation. The code is a compact “summary”, or “compression”, of the input, and it is also called the latent-space representation . If an autoencoder simply learned to set \(g(f(x))=x\) everywhere, then it would not be very useful; instead, autoencoders are designed to be unable to learn to copy perfectly. They are restricted in ways that allow them to copy only approximately, and to copy only input that resembles the training data. Because the model is forced to prioritize which aspects of the input to copy, it learns useful properties of the data. In order to build an autoencoder, three things are needed: an encoding method, a decoding method, and a loss function to compare the output with the target. Both the encoder and the decoder are fully-connected feedforward neural networks. The code is a single layer of an artificial neural network, with the dimensionality of our choice. The number of nodes in the code layer (the code size ) is a hyperparameter to be set before training the autoencoder. The figure below shows the autoencoder architecture. First, the input passes through the encoder, which is a fully-connected neural network, in order to produce the code. The decoder, which has the similar neural network structure, then produces the output by using the code only. The aim is to get an output identical to the input. Source [5] Traditionally, autoencoders were used for dimensionality reduction or feature learning. More recently, theoretical connections between autoencoders and latent variable models have brought autoencoders to the forefront of generative modeling. As a compression method, autoencoders do not perform better than their alternatives. And the fact that autoencoders are data-specific makes them impractical as a general technique. In general, autoencoders have three common use cases: Data denoising: It should be noted that denoising autoencoders are not meant to automatically denoise an image, instead they were invented to help the hidden layers of the autoencoder learn more robust filters, and reduce the the risk of overfitting. Dimensionality reduction: Visualizing high-dimensional data is challenging. t-SNE [7] is the most commonly used method, but struggles with large number of dimensions (typically above 32). Therefore, autoencoders can be used as a preprocessing step to reduce the dimensionality, and this compressed representation is used by t-SNE to visualize the data in 2D space. Variational Autoencoders (VAE): this is a more modern and complex use-case of autoencoders. VAE learns the parameters of the probability distribution modeling the input data, instead of learning an arbitrary function in the case of vanilla autoencoders. By sampling points from this distribution we can also use the VAE as a generative model [8] . Model An example implementation in PyTorch. class Autoencoder ( nn . Module ): def __init__ ( self , in_shape ): super () . __init__ () c , h , w = in_shape self . encoder = nn . Sequential ( nn . Linear ( c * h * w , 128 ), nn . ReLU (), nn . Linear ( 128 , 64 ), nn . ReLU (), nn . Linear ( 64 , 12 ), nn . ReLU () ) self . decoder = nn . Sequential ( nn . Linear ( 12 , 64 ), nn . ReLU (), nn . Linear ( 64 , 128 ), nn . ReLU (), nn . Linear ( 128 , c * h * w ), nn . Sigmoid () ) def forward ( self , x ): bs , c , h , w = x . size () x = x . view ( bs , - 1 ) x = self . encoder ( x ) x = self . decoder ( x ) x = x . view ( bs , c , h , w ) return x Training def train ( net , loader , loss_func , optimizer ): net . train () for inputs , _ in loader : inputs = Variable ( inputs ) output = net ( inputs ) loss = loss_func ( output , inputs ) optimizer . zero_grad () loss . backward () optimizer . step () Further reading Convolutional Autoencoders Deep Learning Book CNN ¶ The convolutional neural network , or CNN , is a feed-forward neural network which has at least one convolutional layer. This type of deep neural network is used for processing structured arrays of data. It is distinguished from other neural networks by its superior performance with speech, audio, and especially, image data. For the latter data type, CNNs are commonly employed in computer vision tasks, like image classification, since they are especially good at finding out patterns from the input images, such as lines, circles, or more complex objects, e.g., human faces. Convolutional neural networks comprise many convolutional layers, stacked one on top of the other, in a sequence. The sequential architecture of CNNs allows them to learn hierarchical features. Every layer can recognize shapes, and the deeper the network goes, the more complex are the shapes which can be recognized. The design of convolutional layers in a CNN reflects the structure of the human visual cortex. In fact, our visual cortex is similarly made of different layers, which process an image in our sight by sequentially identifying more and more complex features. The CNN architecture is made up of three main distinct layers: Convolutional layer Pooling layer Fully-connected (FC) layer Overview of CNN architecture. The architecture of CNNs follows this structure, but with a greater number of layers for each layer’s type. The convolutional and pooling layers are layers peculiar to CNNs, while the fully-connected layer, activation function and output layer, are also present in regular feed-forward neural networks. Source: [2] When working with image data, the CNN architecture accepts as input a 3D volume, or a 1D vector depending if the image data is in RGB format, for the first case, or in grayscale format, for the latter. Then it transforms the input through different equations, and it outputs a class. The convolutional layer is the first layer of the convolutional neural network. While this first layer can be followed by more convolutional layers, or pooling layers, the fully-connected layer remains the last layer of the network, which outputs the result. At every subsequent convolutional layer, the CNN increases its complexity, and it can identify greater portions in the image. In the first layers, the algorithm can recognize simpler features such as color or edges. Deeper in the network, it becomes able to identify both larger objects in the image and more complex ones. In the last layers, before the image reaches the final FC layer, the CNN identifies the full object in the image. Model An example implementation of a CNN in PyTorch. Training Further reading CS231 Convolutional Networks Deep Learning Book GAN ¶ A Generative Adversarial Network (GAN) is a type of network which creates novel tensors (often images, voices, etc.). The generative portion of the architecture competes with the discriminator part of the architecture in a zero-sum game. The goal of the generative network is to create novel tensors which the adversarial network attempts to classify as real or fake. The goal of the generative network is generate tensors where the discriminator network determines that the tensor has a 50% chance of being fake and a 50% chance of being real. Figure from [3]. Model An example implementation in PyTorch. Generator class Generator ( nn . Module ): def __init__ ( self ): super () self . net = nn . Sequential ( nn . ConvTranspose2d ( 200 , 32 * 8 , 4 , 1 , 0 , bias = False ), nn . BatchNorm2d ( 32 * 8 ), nn . ReLU (), nn . ConvTranspose2d ( 32 * 8 , 32 * 4 , 4 , 2 , 1 , bias = False ), nn . BatchNorm2d ( 32 * 4 ), nn . ReLU (), nn . ConvTranspose2d ( 32 * 4 , 32 * 2 , 4 , 2 , 1 , bias = False ), nn . BatchNorm2d ( 32 * 2 ), nn . ReLU (), nn . ConvTranspose2d ( 32 * 2 , 32 , 4 , 2 , 1 , bias = False ), nn . BatchNorm2d ( 32 ), nn . ReLU (), nn . ConvTranspose2d ( 32 , 1 , 4 , 2 , 1 , bias = False ), nn . Tanh () ) def forward ( self , tens ): return self . net ( tens ) Discriminator class Discriminator ( nn . Module ): def __init__ ( self ): super () self . net = nn . Sequential ( nn . Conv2d ( 1 , 32 , 4 , 2 , 1 , bias = False ), nn . LeakyReLU ( 0.2 ), nn . Conv2d ( 32 , 32 * 2 , 4 , 2 , 1 , bias = False ), nn . BatchNorm2d ( 32 * 2 ), nn . LeakyReLU ( 0.2 ), nn . Conv2d ( 32 * 2 , 32 * 4 , 4 , 2 , 1 , bias = False ), nn . BatchNorm2d ( 32 * 4 ), nn . LeakyReLU ( 0.2 ), # state size. (32*4) x 8 x 8 nn . Conv2d ( 32 * 4 , 32 * 8 , 4 , 2 , 1 , bias = False ), nn . BatchNorm2d ( 32 * 8 ), nn . LeakyReLU ( 0.2 ), # state size. (32*8) x 4 x 4 nn . Conv2d ( 32 * 8 , 1 , 4 , 1 , 0 , bias = False ), nn . Sigmoid () ) def forward ( self , tens ): return self . net ( tens ) Training def train ( netD , netG , loader , loss_func , optimizerD , optimizerG , num_epochs ): netD . train () netG . train () device = ""cuda:0"" if torch . cuda . is_available () else ""cpu"" for epoch in range ( num_epochs ): for i , data in enumerate ( loader , 0 ): netD . zero_grad () realtens = data [ 0 ] . to ( device ) b_size = realtens . size ( 0 ) label = torch . full (( b_size ,), 1 , dtype = torch . float , device = device ) # gen labels output = netD ( realtens ) errD_real = loss_func ( output , label ) errD_real . backward () # backprop discriminator fake and real based on label noise = torch . randn ( b_size , 200 , 1 , 1 , device = device ) fake = netG ( noise ) label . fill_ ( 0 ) output = netD ( fake . detach ()) . view ( - 1 ) errD_fake = loss_func ( output , label ) errD_fake . backward () # backprop discriminator fake and real based on label errD = errD_real + errD_fake # discriminator error optimizerD . step () netG . zero_grad () label . fill_ ( 1 ) output = netD ( fake ) . view ( - 1 ) errG = loss_func ( output , label ) # generator error errG . backward () optimizerG . step () Further reading Generative Adversarial Networks Deep Learning Book PyTorch DCGAN Example Original Paper MLP ¶ A Multi Layer Perceptron (MLP) is a neural network with only fully connected layers. Figure from [5]. Model An example implementation on FMNIST dataset in PyTorch. Full Code The input to the network is a vector of size 28*28 i.e.(image from FashionMNIST dataset of dimension 28*28 pixels flattened to sigle dimension vector). 2 fully connected hidden layers. Output layer with 10 outputs.(10 classes) class MLP ( nn . Module ): def __init__ ( self ): super ( MLP , self ) . __init__ () # define layers self . fc1 = nn . Linear ( in_features = 28 * 28 , out_features = 500 ) self . fc2 = nn . Linear ( in_features = 500 , out_features = 200 ) self . fc3 = nn . Linear ( in_features = 200 , out_features = 100 ) self . out = nn . Linear ( in_features = 100 , out_features = 10 ) def forward ( self , t ): # fc1 make input 1 dimentional t = t . view ( - 1 , 28 * 28 ) t = self . fc1 ( t ) t = F . relu ( t ) # fc2 t = self . fc2 ( t ) t = F . relu ( t ) # fc3 t = self . fc3 ( t ) t = F . relu ( t ) # output t = self . out ( t ) return t Training def train ( net , loader , loss_func , optimizer ): net . train () n_batches = len ( loader ) for inputs , targets in loader : inputs = Variable ( inputs ) targets = Variable ( targets ) output = net ( inputs ) loss = loss_func ( output , targets ) optimizer . zero_grad () loss . backward () optimizer . step () # print statistics running_loss = loss . item () print ( 'Training loss: %.3f ' % ( running_loss )) Evaluating def main (): train_set = torchvision . datasets . FashionMNIST ( root = './FMNIST' , train = True , download = False , transform = transforms . Compose ([ transforms . ToTensor () ]) ) mlp = MLP () loader = torch . utils . data . DataLoader ( train_set , batch_size = 1000 ) optimizer = optim . Adam ( mlp . parameters (), lr = 0.01 ) loss_func = nn . CrossEntropyLoss () for i in range ( 0 , 15 ): train ( mlp , loader , loss_func , optimizer ) print ( ""Finished Training"" ) torch . save ( mlp . state_dict (), ""./mlpmodel.pt"" ) test_set = torchvision . datasets . FashionMNIST ( root = './FMNIST' , train = False , download = False , transform = transforms . Compose ([ transforms . ToTensor () ]) ) testloader = torch . utils . data . DataLoader ( test_set , batch_size = 4 ) correct = 0 total = 0 with torch . no_grad (): for data in testloader : images , labels = data outputs = mlp ( images ) _ , predicted = torch . max ( outputs . data , 1 ) total += labels . size ( 0 ) correct += ( predicted == labels ) . sum () . item () print ( 'Accuracy of the network on the 10000 test images: %d %% ' % ( 100 * correct / total )) Further reading TODO RNN ¶ Description of RNN use case and basic architecture. Model class RNN ( nn . Module ): def __init__ ( self , n_classes ): super () . __init__ () self . hid_fc = nn . Linear ( 185 , 128 ) self . out_fc = nn . Linear ( 185 , n_classes ) self . softmax = nn . LogSoftmax () def forward ( self , inputs , hidden ): inputs = inputs . view ( 1 , - 1 ) combined = torch . cat ([ inputs , hidden ], dim = 1 ) hid_out = self . hid_fc ( combined ) out = self . out_fc ( combined ) out = self . softmax ( out ) return out , hid_out Training In this example, our input is a list of last names, where each name is a variable length array of one-hot encoded characters. Our target is is a list of indices representing the class (language) of the name. For each input name.. Initialize the hidden vector Loop through the characters and predict the class Pass the final character’s prediction to the loss function Backprop and update the weights def train ( model , inputs , targets ): for i in range ( len ( inputs )): target = Variable ( targets [ i ]) name = inputs [ i ] hidden = Variable ( torch . zeros ( 1 , 128 )) model . zero_grad () for char in name : input_ = Variable ( torch . FloatTensor ( char )) pred , hidden = model ( input_ , hidden ) loss = criterion ( pred , target ) loss . backward () for p in model . parameters (): p . data . add_ ( -. 001 , p . grad . data ) Further reading Jupyter notebook Deep Learning Book VAE ¶ Autoencoders can encode an input image to a latent vector and decode it, but they can’t generate novel images. Variational Autoencoders (VAE) solve this problem by adding a constraint: the latent vector representation should model a unit gaussian distribution. The Encoder returns the mean and variance of the learned gaussian. To generate a new image, we pass a new mean and variance to the Decoder. In other words, we “sample a latent vector” from the gaussian and pass it to the Decoder. It also improves network generalization and avoids memorization. Figure from [4]. Loss Function The VAE loss function combines reconstruction loss (e.g. Cross Entropy, MSE) with KL divergence. def vae_loss ( output , input , mean , logvar , loss_func ): recon_loss = loss_func ( output , input ) kl_loss = torch . mean ( 0.5 * torch . sum ( torch . exp ( logvar ) + mean ** 2 - 1. - logvar , 1 )) return recon_loss + kl_loss Model An example implementation in PyTorch of a Convolutional Variational Autoencoder. class VAE ( nn . Module ): def __init__ ( self , in_shape , n_latent ): super () . __init__ () self . in_shape = in_shape self . n_latent = n_latent c , h , w = in_shape self . z_dim = h // 2 ** 2 # receptive field downsampled 2 times self . encoder = nn . Sequential ( nn . BatchNorm2d ( c ), nn . Conv2d ( c , 32 , kernel_size = 4 , stride = 2 , padding = 1 ), # 32, 16, 16 nn . BatchNorm2d ( 32 ), nn . LeakyReLU (), nn . Conv2d ( 32 , 64 , kernel_size = 4 , stride = 2 , padding = 1 ), # 32, 8, 8 nn . BatchNorm2d ( 64 ), nn . LeakyReLU (), ) self . z_mean = nn . Linear ( 64 * self . z_dim ** 2 , n_latent ) self . z_var = nn . Linear ( 64 * self . z_dim ** 2 , n_latent ) self . z_develop = nn . Linear ( n_latent , 64 * self . z_dim ** 2 ) self . decoder = nn . Sequential ( nn . ConvTranspose2d ( 64 , 32 , kernel_size = 3 , stride = 2 , padding = 0 ), nn . BatchNorm2d ( 32 ), nn . ReLU (), nn . ConvTranspose2d ( 32 , 1 , kernel_size = 3 , stride = 2 , padding = 1 ), CenterCrop ( h , w ), nn . Sigmoid () ) def sample_z ( self , mean , logvar ): stddev = torch . exp ( 0.5 * logvar ) noise = Variable ( torch . randn ( stddev . size ())) return ( noise * stddev ) + mean def encode ( self , x ): x = self . encoder ( x ) x = x . view ( x . size ( 0 ), - 1 ) mean = self . z_mean ( x ) var = self . z_var ( x ) return mean , var def decode ( self , z ): out = self . z_develop ( z ) out = out . view ( z . size ( 0 ), 64 , self . z_dim , self . z_dim ) out = self . decoder ( out ) return out def forward ( self , x ): mean , logvar = self . encode ( x ) z = self . sample_z ( mean , logvar ) out = self . decode ( z ) return out , mean , logvar Training def train ( model , loader , loss_func , optimizer ): model . train () for inputs , _ in loader : inputs = Variable ( inputs ) output , mean , logvar = model ( inputs ) loss = vae_loss ( output , inputs , mean , logvar , loss_func ) optimizer . zero_grad () loss . backward () optimizer . step () Further reading Original Paper VAE Explained Deep Learning Book References [1] https://hackernoon.com/autoencoders-deep-learning-bits-1-11731e200694 [2] https://iq.opengenus.org/basics-of-machine-learning-image-classification-techniques/ [3] http://guertl.me/post/162759264070/generative-adversarial-networks [4] http://kvfrans.com/variational-autoencoders-explained [5] ` Applied Deep Learning - Part 3: Autoencoders < https://towardsdatascience .com/applied-deep-learning-part-3-autoencoders-1c083af4d798/>`__ [6] ` Deep Learning Book - Autoencoders < https://www.deeplearningbook .org/contents/autoencoders.html/>`__ [7] t-SNE [8] VAE","[ 2.24530265e-01 -1.03747532e-01 -5.02401516e-02 -5.68077803e-01
  4.89082821e-02  4.48167741e-01  1.10624686e-01  2.21968532e-01
  7.00509250e-02 -1.20049447e-01 -2.98817337e-01  2.52450466e-01
 -9.43026841e-02 -1.31854892e-01  6.37585074e-02 -4.53858078e-02
 -1.02044173e-01  4.70197201e-02 -1.96404159e-02  2.65976846e-01
 -1.55243874e-01  1.47960991e-01 -5.42110443e-01 -5.03062606e-01
 -2.10302860e-01  3.95134360e-01  3.60804722e-02  1.36874765e-01
 -4.17648345e-01  2.87406385e-01  2.60682125e-02  2.47424453e-01
 -9.34638530e-02  1.99558064e-01  1.45078957e-01 -1.22713551e-01
  1.55884176e-01 -4.34394553e-02 -8.34184214e-02  9.94320959e-02
  2.29469631e-02  2.71848887e-01 -1.32367611e-01  2.33989015e-01
  6.53455704e-02 -5.79416901e-02 -4.79642451e-01  5.37890829e-02
  3.28434646e-01  2.77962983e-01  1.76459640e-01 -5.00439852e-02
 -1.80215575e-02  2.84206033e-01  1.35009391e-02  1.08414829e-01
 -2.86996886e-02  5.21114349e-01  2.50244856e-01  9.43486206e-03
 -2.54912555e-01  2.44621143e-01  6.85210973e-02  6.27148867e-01
  3.20969224e-02 -1.40080497e-01  5.58326364e-01  4.48710650e-01
  5.16733751e-02  3.09452713e-01 -2.57662833e-01 -3.11486758e-02
  2.22569376e-01 -4.51706886e-01  6.69107288e-02  1.59654081e-01
 -2.49349087e-01  1.18302807e-01 -5.36203027e-01  2.91943491e-01
 -7.21191913e-02  2.03139499e-01 -3.10133636e-01  4.66259383e-03
 -6.46083653e-02 -1.32645532e-01  3.95156965e-02 -6.20605111e-01
  1.24580868e-01  2.71824710e-02 -5.89883685e-01 -2.44061917e-01
 -2.73366034e-01  2.17657536e-01 -5.25141358e-02 -5.47073781e-04
 -8.00577924e-02 -1.81765988e-01  5.77063821e-02  4.57859278e-01
  5.09327114e-01 -7.35732615e-02  5.36809206e-01 -1.78115010e-01
 -1.09597538e-02  2.72623420e-01 -7.35455513e-01 -3.18308473e-01
  1.27666011e-01 -6.86632656e-03 -9.52712074e-02  5.30873053e-03
 -5.27764484e-02 -1.43600732e-01  1.50416493e-02 -4.16357070e-01
  4.39415991e-01  4.69814688e-02 -1.50000229e-01  6.76233232e-01
 -1.35139510e-01  5.49308695e-02 -1.53460860e-01  4.16068643e-01
 -7.40021914e-02  1.91834569e-01  2.45437264e-01  2.32848391e-01
  1.61889289e-02  3.33639085e-01 -4.46773581e-02 -1.98194981e-01
 -1.42655522e-01  1.87558889e-01 -5.01898676e-02  5.37360348e-02
 -1.22444198e-01 -1.71638764e-02 -1.11934610e-01  1.50616691e-01
  3.21950670e-03  1.50507182e-01  6.22413009e-02 -1.18966457e-02
  2.02494115e-01  1.78525969e-01  1.86893433e-01 -2.67700791e-01
  3.99905354e-01  1.61460117e-02  2.16384619e-01  3.39922249e-01
  1.42995387e-01 -9.76094902e-02  5.80491304e-01  3.52988958e-01
 -3.09559312e-02 -1.91111282e-01  1.09478265e-01 -4.79550600e-01
  1.37997285e-01  3.53647470e-02  5.69530427e-01  8.60936195e-03
  2.90203243e-01 -6.44887835e-02  1.09728783e-01 -1.32459477e-01
 -2.54981577e-01  4.94510978e-02  3.92404478e-03  2.00548336e-01
 -7.21682683e-02  2.19693869e-01 -3.66023839e-01 -1.09859325e-01
 -6.14210293e-02 -3.37495983e-01 -2.29022712e-01  1.79108337e-01
 -2.68270135e-01 -1.79289192e-01  1.54924542e-01 -1.30648583e-01
  7.93965161e-02  1.36348248e-01 -7.42091388e-02  1.17902376e-01
  4.36800331e-01 -3.09277829e-02 -5.78715503e-02  5.48268259e-02
 -2.74058525e-02  1.86569631e-01  1.00830331e-01  1.88124686e-01
  3.67774248e-01  3.89502466e-01  2.24404968e-03 -3.20817113e-01
  1.11418515e-02 -1.92186922e-01 -1.04400948e-01 -8.28161091e-02
 -1.92865252e-01 -9.86060500e-02 -2.77359262e-02  9.14895236e-02
 -2.56162491e-02 -2.32531309e-01  2.31042832e-01  7.70964846e-03
 -4.15326416e-01  4.10310715e-01  7.44414255e-02  1.58228114e-01
 -6.98452741e-02  3.52242291e-01 -2.82274097e-01 -4.21947122e-01
  4.38100509e-02  4.58838791e-02  1.43330500e-01  5.11622280e-02
  1.10708818e-01  8.53376687e-02 -2.38839030e-01 -1.39258325e-01
 -6.99941143e-02 -2.18710214e-01  1.58225298e-01  1.10623285e-01
 -1.46595076e-01 -2.53111809e-01 -2.20335945e-01  3.03934515e-02
 -1.42126411e-01  1.50193870e-01 -2.41062656e-01 -8.28935653e-02
 -1.77831352e-01 -2.89355159e-01  1.63735285e-01 -8.27812999e-02
  9.39455032e-02 -1.40588835e-01 -1.32440865e-01 -4.75471139e-01
 -1.04357749e-01 -1.25059575e-01  1.79033317e-02  2.75860786e-01
  7.41073117e-03  8.55920911e-02  1.51821315e-01 -1.75901145e-01
 -1.51011497e-01  7.01198429e-02  2.02563196e-01 -2.22496018e-01
  7.81653374e-02 -5.09771764e-01  1.74184233e-01 -5.85798100e-02
  9.94511321e-02 -2.75052428e-01  3.93652618e-01 -8.57912153e-02
 -2.06156582e-01 -7.17480406e-02  6.37217984e-02 -1.54952198e-01
  3.34652215e-01 -1.02494612e-01 -1.14636630e-01  2.74879299e-02
  1.04920760e-01 -1.19609267e-01  1.83398515e-01 -1.46437228e-01
  2.70618141e-01  1.66875124e-01  9.52645764e-02 -4.29363310e-01
  5.46690077e-02 -6.49646148e-02 -3.65644425e-01 -5.25135398e-01
  1.60593063e-01  2.22073048e-02  4.08307090e-02 -1.93115056e-01
 -2.49079049e-01  3.87996882e-02 -2.65008271e-01  9.71853882e-02
  2.94331908e-01  1.95954014e-02 -2.19480917e-02 -2.60398895e-01
 -1.19084649e-01  4.22872864e-02  4.27010298e-01  3.68993916e-02
  5.05720600e-02 -2.35766560e-01  1.99180454e-01  1.68584540e-01
  1.18378643e-03 -1.97987556e-01 -1.38029248e-01  7.27249458e-02
  1.90642372e-01 -8.85062292e-02 -7.51518086e-02  3.42545927e-01
  3.03624198e-04 -7.83269256e-02  5.85341975e-02  1.58294648e-01
  7.79477581e-02 -1.16881102e-01 -4.76014055e-02  2.24195458e-02
  5.26167631e-01  1.80125877e-01 -2.22918183e-01 -4.15688783e-01
  2.17348188e-02 -2.76125431e-01 -1.04443289e-01  1.74077004e-01
 -5.21340631e-02  2.49100044e-01  8.24594200e-02 -4.49417830e-02
  1.40307993e-01 -2.94142783e-01 -1.04004204e-01  9.65742320e-02
  5.23906350e-01  2.37800092e-01 -8.05903226e-02  5.18115163e-02
 -2.28196159e-01  3.53972137e-01 -2.36647483e-03  1.67946815e-02
  6.56332821e-02 -7.53078759e-02 -2.69197151e-02 -9.95075703e-02
  6.81211799e-03  1.83593407e-01 -3.91318463e-04  2.58239985e-01
  6.77711517e-03 -1.19408816e-01 -1.81703329e-01  1.47496551e-01
  1.63375840e-01 -2.92880591e-02  3.89492959e-02  2.16080755e-01
 -2.06799358e-02 -1.56331211e-01 -3.38455975e-01  2.03193396e-01
  3.70561630e-02  9.29029733e-02  3.34149808e-01 -5.19473851e-02
  1.27636686e-01 -1.25989363e-01  2.95330584e-01 -2.70855315e-02
  3.83091867e-01 -8.50977600e-02 -9.00222361e-03 -4.12927344e-02
 -6.77869655e-04  1.49544358e-01 -3.10735613e-01 -6.94364458e-02
  1.59968920e-02  2.94001568e-02  5.95450699e-02  1.59204781e-01
  4.73259538e-02  1.25843704e-01 -8.51053074e-02 -1.90385804e-01
 -2.85230875e-01  2.46809214e-01 -8.93458873e-02 -9.83098708e-03
 -8.46615955e-02 -2.93197483e-02  9.09531340e-02  3.38765770e-01
  1.70242161e-01 -4.67695035e-02  1.90577865e-01  4.46250945e-01
  1.79892436e-01 -6.60653263e-02 -3.33750218e-01 -1.82618245e-01
  6.39490485e-02  1.71947941e-01  1.69411540e-01 -1.45671695e-01
 -5.41055799e-02 -1.10261515e-01  2.25943387e-01 -1.04984030e-01
  3.76782656e-01 -2.72622228e-01  3.43849242e-01 -3.44870314e-02
 -1.78787678e-01 -3.76049459e-01 -4.96838689e-02 -3.28326464e-01
 -2.83216447e-01  2.31879234e-01 -5.26758656e-02  4.28734332e-01
 -3.74810040e-01  3.14499438e-03  3.83502841e-02  1.89282056e-02
  1.86660111e-01 -3.76281068e-02 -5.65061495e-02 -4.30998281e-02
  1.43283561e-01 -1.54358029e-01 -4.56921458e-02 -1.61317930e-01
  2.01404274e-01  2.48909235e-01 -1.14806063e-01 -3.37818086e-01
  5.82280457e-02 -5.27777039e-02  2.01449487e-02  2.80669034e-01
  1.75929338e-01  3.75378907e-01  4.93759960e-02 -3.54190856e-01
  2.85232872e-01  1.00744262e-01 -1.05575517e-01 -2.08919019e-01
  3.38368326e-01  1.16749875e-01  1.94392856e-02  4.50118184e-02
 -2.54445467e-02  9.31520537e-02 -9.62219909e-02  7.02941865e-02
 -2.12018341e-01 -1.07239068e-01  1.91444755e-01  2.25385465e-02
  1.16813056e-01  2.04569161e-01  9.64991003e-03 -9.90270227e-02
  7.20894933e-02  1.31258562e-01 -8.59561712e-02  1.21425837e-04
 -5.14549837e-02 -3.46768618e-01  1.32110357e-01 -1.30903482e-01
  4.12320644e-02 -9.38267112e-02  1.12521276e-01  8.62691924e-03
 -1.77489594e-01  3.06381881e-01  3.65244374e-02 -9.72461626e-02
 -2.55757738e-02  4.65617068e-02 -6.66215643e-03  5.05847871e-01
  1.38790816e-01  1.70543790e-05  1.49363548e-01  5.53922988e-02
 -2.75739878e-01  4.07291353e-02 -3.80990028e-01  1.35017231e-01
  3.32781225e-02  7.79887289e-02  1.27544805e-01 -2.62175024e-01
  2.14668870e-01  2.46830225e-01  3.35944593e-02  8.24551433e-02
 -9.33470502e-02  1.24229476e-01 -4.12894003e-02  1.10181041e-01
 -8.55808891e-03  9.21746045e-02  4.85025942e-02  2.43188128e-01
  3.70945990e-01 -1.22749828e-01 -6.88284755e-01  1.82766259e-01
 -1.30924612e-01 -8.68634507e-02  2.94898570e-01 -4.08005640e-02
  1.88564807e-01 -1.44742802e-01  2.48077348e-01 -1.99317247e-01
 -5.71717247e-02 -2.73896605e-01  1.11304596e-01  1.49689183e-01
  2.28153005e-01  2.20451951e-02 -5.22214249e-02  6.37468100e-02
 -3.49182971e-02 -5.87993562e-02 -3.04352436e-02  7.17539787e-02
 -4.08285037e-02 -1.06393747e-01  2.36158594e-01 -1.64273769e-01
 -3.97298671e-02  9.20085162e-02 -2.35379800e-01 -1.20076723e-01
 -1.99212372e-01  4.01615873e-02  6.75104260e-02  5.36204398e-01
 -1.24685451e-01 -3.51693481e-02  2.22999096e-01  1.50544241e-01
 -1.31007224e-01 -7.87145272e-02  3.83098349e-02  2.69896150e-01
  1.02580272e-01  1.05702817e-01 -1.02081329e-01  1.64490044e-01
 -1.61837906e-01  2.01907128e-01  1.49504263e-02 -2.89439917e-01
  3.94823670e-01 -1.44132555e-01 -1.05220817e-01  9.69754755e-02
 -2.99929261e-01 -4.44482446e-01 -2.21892834e-01  9.83751416e-02
 -9.94275138e-03  4.77272779e-01 -4.06481713e-01  1.29536077e-01
 -2.70422757e-01  3.83522436e-02  1.80035114e-01 -4.32645939e-02
  2.95090169e-01  3.36875439e-01 -5.00298023e-01  1.94084004e-01
  6.21989146e-02  3.19109485e-02  2.35551037e-02  1.71167210e-01
 -1.43822789e-01 -7.23142475e-02 -1.79064095e-01  3.26159358e-01
  1.90509826e-01  4.30440009e-02  3.36231887e-02 -2.01983511e-01
  2.81579405e-01 -3.83559689e-02 -5.19603677e-03  2.71329116e-02
 -1.72499835e-01 -1.94380000e-01 -3.18836756e-02  9.82484967e-02
 -9.74365175e-02  4.91327852e-01 -5.71536683e-02  4.26163524e-01
  4.93740290e-03  7.65229464e-02  1.08826622e-01 -2.08729059e-01
 -5.83653003e-02 -7.59000629e-02 -3.16542774e-01 -2.23648012e-01
  3.87333721e-01 -2.23484486e-01 -1.14325300e-01  1.03962913e-01
 -1.23368874e-01  1.29399806e-01 -5.77668473e-02 -4.45168093e-02
  5.04007749e-03 -2.26640642e-01 -2.74140462e-02 -1.66082129e-01
  2.45549709e-01 -1.19448386e-01  2.94005265e-03  1.04371652e-01
  3.34096640e-01  1.74276188e-01  1.38025925e-01 -1.38683051e-01
 -6.84677362e-02 -3.97655696e-01 -2.14420781e-01  6.19449094e-02
 -3.65907773e-02  2.16342553e-01 -4.73788306e-02 -1.52700618e-01
 -1.66907847e-01 -1.59551531e-01 -5.55866510e-02 -2.48874296e-02
 -9.54924524e-02 -2.96921551e-01  7.79613405e-02 -1.87477887e-01
  5.44330664e-02 -1.75630808e-01 -2.68333912e-01  1.63309067e-01
  3.47186804e-01  7.75932148e-02  1.00303955e-01 -4.03761491e-03
  6.03019595e-01 -1.39875889e-01  2.62758285e-01 -1.70767978e-01
  1.52067542e-01  7.83204734e-02 -2.76231468e-01  1.58492923e-01
 -3.80292416e-01  1.12358645e-01 -8.19530617e-03 -2.82278895e-01
  4.89684343e-01  2.56711006e-01 -1.13083661e-01  3.81072685e-02
  1.33514166e-01  4.22620662e-02  3.18400443e-01  4.62286532e-01
  3.19392979e-01  2.22240657e-01 -5.72866835e-02  3.26198637e-01
 -5.67285344e-02 -3.45413774e-01  3.18297893e-02 -1.40122548e-01
  3.10877264e-01  3.28479558e-02  1.91239461e-01 -1.67414755e-01
  2.18202602e-02 -9.74484533e-03 -1.20626464e-01  4.08694707e-03
 -1.72553867e-01  1.35918915e-01  2.94467688e-01 -7.96516910e-02
 -1.39077038e-01  7.10606575e-02  2.36441582e-01 -2.14168742e-01
 -1.61196068e-01 -2.62582600e-01  7.62188137e-02  9.96441692e-02
 -7.91711509e-02  1.36681885e-01  5.61637878e-02 -1.46313652e-01
  2.37650778e-02 -1.05576217e-01  4.25819427e-01 -5.33088893e-02
 -1.26208931e-01 -3.17887247e-01  2.05757603e-01  9.57842916e-02
 -1.97901472e-01 -9.28871706e-02 -2.01828405e-01  7.34133348e-02
 -1.19654387e-01  9.99127701e-02  2.00269744e-01  4.22631472e-01
  3.11424434e-01  1.72348291e-01  6.01012230e-01 -4.94737551e-02
  1.62707791e-01  3.54342535e-03 -3.05491000e-01 -1.91838041e-01
  2.56105185e-01 -4.29287970e-01  4.10680950e-01  4.22783643e-02
  1.98473096e-01  1.90548986e-01  2.76292026e-01 -1.81703642e-03
 -5.12132287e-01  1.11497089e-01 -1.26278013e-01  3.33897412e-01
  1.27522960e-01 -2.08632469e-01  3.34180772e-01 -1.21592417e-01
  1.21094100e-01  2.36608982e-01  3.39892656e-01  2.42745131e-01
  1.58977047e-01 -9.83218178e-02 -1.76955253e-01  1.29634112e-01
 -4.39147949e-02 -3.03392559e-01  7.55629390e-02  7.18005970e-02]"
Classification,"Classification Algorithms ¶ Classification problems is when our output Y is always in categories like positive vs negative in terms of sentiment analysis, dog vs cat in terms of image classification and disease vs no disease in terms of medical diagnosis. Bayesian ¶ Overlaps.. Decision Trees ¶ Intuitions Decision tree works by successively splitting the dataset into small segments until the target variable are the same or until the dataset can no longer be split. It’s a greedy algorithm which make the best decision at the given time without concern for the global optimality [2] . The concept behind decision tree is straightforward. The following flowchart show a simple email classification system based on decision tree. If the address is “myEmployer.com”, it will classify it to “Email to read when bored”. Then if the email contains the word “hockey”, this email will be classified as “Email from friends”. Otherwise, it will be identified as “Spam: don’t read”. Image source [2] . Algorithm Explained There are various kinds of decision tree algorithms such as ID3 (Iterative Dichotomiser 3), C4.5 and CART (Classification and Regression Trees). The constructions of decision tree are similar [6] : Assign all training instances to the root of the tree. Set current node to root node. Find the split feature and split value based on the split criterion such as information gain, information gain ratio or gini coefficient. Partition all data instances at the node based on the split feature and threshold value. Denote each partition as a child node of the current node. For each child node: If the child node is “pure” (has instances from only one class), tag it as a leaf and return. Else, set the child node as the current node and recurse to step 2. ID3 creates a multiway tree. For each node, it trys to find the categorical feature that will yield the largest information gain for the target variable. C4.5 is the successor of ID3 and remove the restriction that the feature must be categorical by dynamically define a discrete attribute that partitions the continuous attribute in the discrete set of intervals. CART is similar to C4.5. But it differs in that it constructs binary tree and support regression problem [3] . The main differences are shown in the following table: Dimensions ID3 C4.5 CART Split Criterion Information gain Information gain ratio (Normalized information gain) Gini coefficient for classification problems Types of Features Categorical feature Categorical & numerical features Categorical & numerical features Type of Problem Classification Classification Classification & regression Type of Tree Mltiway tree Mltiway tree Binary tree Code Implementation We used object-oriented patterns to create the code for ID3 , C4.5 and CART . We will first introduce the base class for these three algorithms, then we explain the code of CART in details. First, we create the base class TreeNode class and DecisionTree class TreeNode : def __init__ ( self , data_idx , depth , child_lst = []): self . data_idx = data_idx self . depth = depth self . child = child_lst self . label = None self . split_col = None self . child_cate_order = None def set_attribute ( self , split_col , child_cate_order = None ): self . split_col = split_col self . child_cate_order = child_cate_order def set_label ( self , label ): self . label = label class DecisionTree () def fit ( self , X , y ): """""" X: train data, dimensition [num_sample, num_feature] y: label, dimension [num_sample, ] """""" self . data = X self . labels = y num_sample , num_feature = X . shape self . feature_num = num_feature data_idx = list ( range ( num_sample )) # Set the root of the tree self . root = TreeNode ( data_idx = data_idx , depth = 0 , child_lst = []) queue = [ self . root ] while queue : node = queue . pop ( 0 ) # Check if the terminate criterion has been met if node . depth > self . max_depth or len ( node . data_idx ) == 1 : # Set the label for the leaf node self . set_label ( node ) else : # Split the node child_nodes = self . split_node ( node ) if not child_nodes : self . set_label ( node ) else : queue . extend ( child_nodes ) The CART algorithm, when constructing the binary tree, will try searching for the feature and threshold that will yield the largest gain or the least impurity. The split criterion is a combination of the child nodes’ impurity. For the child nodes’ impurity, gini coefficient or information gain are adopted in classification. For regression problem, mean-square-error or mean-absolute-error are used. Example codes are showed below. For more details about the formulas, please refer to Mathematical formulation for decision tree in scikit-learn documentation class CART ( DecisionTree ): def get_split_criterion ( self , node , child_node_lst ): total = len ( node . data_idx ) split_criterion = 0 for child_node in child_node_lst : impurity = self . get_impurity ( child_node . data_idx ) split_criterion += len ( child_node . data_idx ) / float ( total ) * impurity return split_criterion def get_impurity ( self , data_ids ): target_y = self . labels [ data_ids ] total = len ( target_y ) if self . tree_type == ""regression"" : res = 0 mean_y = np . mean ( target_y ) for y in target_y : res += ( y - mean_y ) ** 2 / total elif self . tree_type == ""classification"" : if self . split_criterion == ""gini"" : res = 1 unique_y = np . unique ( target_y ) for y in unique_y : num = len ( np . where ( target_y == y )[ 0 ]) res -= ( num / float ( total )) ** 2 elif self . split_criterion == ""entropy"" : unique , count = np . unique ( target_y , return_counts = True ) res = 0 for c in count : p = float ( c ) / total res -= p * np . log ( p ) return res K-Nearest Neighbor ¶ Introduction K-Nearest Neighbor is a supervised learning algorithm both for classification and regression. The principle is to find the predefined number of training samples closest to the new point, and predict the label from these training samples [1] . For example, when a new point comes, the algorithm will follow these steps: Calculate the Euclidean distance between the new point and all training data Pick the top-K closest training data For regression problem, take the average of the labels as the result; for classification problem, take the most common label of these labels as the result. Code Below is the Numpy implementation of K-Nearest Neighbor function. Refer to code example for details. def KNN ( training_data , target , k , func ): """""" training_data: all training data point target: new point k: user-defined constant, number of closest training data func: functions used to get the the target label """""" # Step one: calculate the Euclidean distance between the new point and all training data neighbors = [] for index , data in enumerate ( training_data ): # distance between the target data and the current example from the data. distance = euclidean_distance ( data [: - 1 ], target ) neighbors . append (( distance , index )) # Step two: pick the top-K closest training data sorted_neighbors = sorted ( neighbors ) k_nearest = sorted_neighbors [: k ] k_nearest_labels = [ training_data [ i ][ 1 ] for distance , i in k_nearest ] # Step three: For regression problem, take the average of the labels as the result; # for classification problem, take the most common label of these labels as the result. return k_nearest , func ( k_nearest_labels ) Logistic Regression ¶ please refer to logistic regresion Random Forests ¶ Random Forest Classifier using ID3 Tree: code example Boosting ¶ Boosting is a powerful approach to increase the predictive power of classification and regression models. However, the algorithm itself can not predict anything. It is built above other (weak) models to boost their accuracy. In this section we will explain it w.r.t. a classification problem. In order to gain an understanding about this topic, we will go briefly over ensembles and learning with weighted instances. Excurse: Ensembles Boosting belongs to the ensemble family which contains other techniques like bagging (e.i. Random Forest classifier) and Stacking (refer to mlxtend Documentations ). The idea of ensembles is to use the wisdom of the crowd: a single classifier will not know everything. multiple classifiers will know a lot. One example that uses the wisdom of the crowd is Wikipedia. The prerequisites for this technique are: different classifiers have different knowledge. different classifiers make different mistake. we can fulfill the first prerequisite by using different datasets that are collected form different resources and in different times. In practice, this is most of the time impossible. Normally, we have only one dataset. We can go around this by using cross validation (See Figure below) and use one fold to train a classifier at a time. The second prerequisite means that the classifiers may make different mistakes. Since we trained our classifiers on different datasets or using cross-validation, this condition is already fulfilled. Using cross-validation with ensembles. Now, we have multiple classifiers, we need a way to combine their results. This actually the reason we have multiple ensemble techniques, they are all based on the same concept. They may differ in some aspects, like whether to use weighted instances or not and how they combine the results for the different classifiers. In general, for classification we use voting and for regression we average the results of the classifiers. There are a lot of variations for voting and average methods, like weighted average. Some will go further and use the classifications or the results from all of the classifier(aka. base-classifiers) as features for an extra classifier (aka. meta classifier) to predict the final result. learning with weighted instances For classification algorithms such as KNN, we give the same weight to all instances, which means they are equally important. In practice, instances contribute differently, e.i., sensors that collect information have different quality and some are more reliable than others. We want to encode this in our algorithms by assigning weights to different instances and this can be done as follows: changing the classification algorithm (expensive) duplicate instances such that an instance with wight n is duplicated n times Coming back to the actual topic, we can implement boosting, if we train a set of classifiers (not parallel, as the case with Random forest) one after another. The first classifier is a created in a normal way. the latter classifiers have to focus on the misclassified examples by previous ones. How we can achieve this? Well, we can assign weights to instances (learning with weighted instances). If a classifier misclassified an example, we assign higher weight to this example to get more focus from the next classifier(s). Correct examples stay un-touched. It was important to highlight that boosting is an ensemble technique, at the same time, something about boosting might be somehow confusing, in boosting we break the rule of using different datasets, since we want to focus on misclassified examples from previous models, we need to us all data we have to train all models. In this way, a misclassified instance from the first model, will be hopefully classified correctly from the second or the subsequent ones. Error decreases with an increasing number of classifiers. An implementation of the Adaboost (one of the boosting algorithms) from scratch can be found here ( python-course.eu ) with more details about the algorithm Support Vector Machine ¶ Support Vector Machine , or SVM , is one of the most popular supervised learning algorithms, and it can be used both for classification as well as regression problems. However, in machine learning, it is primarily used for classification problems. In the SVM algorithm, each data item is plotted as a point in n-dimensional space, where n is the number of features we have at hand, and the value of each feature is the value of a particular coordinate. The goal of the SVM algorithm is to create the best line, or decision boundary, that can segregate the n-dimensional space into distinct classes, so that we can easily put any new data point in the correct category, in the future. This best decision boundary is called a hyperplane. The best separation is achieved by the hyperplane that has the largest distance to the nearest training-data point of any class. Indeed, there are many hyperplanes that might classify the data. Aas reasonable choice for the best hyperplane is the one that represents the largest separation, or margin, between the two classes. The SVM algorithm chooses the extreme points that help in creating the hyperplane. These extreme cases are called support vectors, while the SVM classifier is the frontier, or hyperplane, that best segregates the distinct classes. The diagram below shows two distinct classes, denoted respectively with blue and green points. The maximum-margin hyperplane is the distance between the two parallel hyperplanes: positive hyperplane and negative hyperplane , shown by dashed lines. The maximum-margin hyperplane is chosen in a way that the distance between the two classes is maximised. Support Vector Machine: Two different categories classified using a decision boundary, or hyperplane. Source [7] Support Vector Machine can be of two types: Linear SVM: A linear SVM is used for linearly separable data, which is the case of a dataset that can be classified into two distinct classes by using a single straight line. Non-linear SVM: A non-linear SVM is used for non-linearly separated data, which means that a dataset cannot be classified by using a straight line. Linear SVM Let’s suppose we have a dataset that has two classes, stars and circles. The dataset has two features, x1 and x2 . We want a classifier that can classify the pair ( x1 , x2 ) of coordinates in either stars or circles. Consider the figure below. Source [8] Since it is a 2-dimensional space, we can separate these two classes by using a straight line. The figure shows that we have three hyperplanes, A, B, and C, which are all segregating the classes well. How can we identify the right hyperplane? The SVM algorithm finds the closest point of the lines from both of the classes. These points are called support vectors. The distance between the support vectors and the hyperplane is referred as the margin . The goal of SVM is to maximize this margin. The hyperplane with maximum margin is called the optimal hyperplane. From the figure above, we see that the margin for hyperplane C is higher when compared to both A and B. Therefore, we name C as the (right) hyperplane. Non-linear SVM When the data is linearly arranged, we can separate it by using a straight line. However, for non-linear data, we cannot draw a single straight line. Let’s consider the figure below. Source [8] In order to separate the circles from the stars, we need to introduce an additional feature. In case of linear data, we would use the two features x and y . For this non-linear data, we will add a third dimension, z . z is defined as \(z=x^2+y^2\) . By adding the third feature, our space will become as below image. Source [8] In the above figure, all values for z will always be positive, because z is the squared sum of x and y . Now, the SVM classifier will divide the dataset into two distinct classes by finding a linear hyperplane between these two classes. Since now we are in a 3-dimensional space, the hyperplane looks like a plane parallel to the x-axis. If we convert it in 2-dimensional space with \(z=1\) , then it will become as the figure below. Source [8] (Hence, in case of non-linear data, we obtain a circumference of \(radius=1\) ) In order to find the hyperplane with the SVM algorithm, we do not need to add this third dimension z manually: the SVM algorithm uses a technique called the “kernel trick”. The SVM kernel is a function which takes a low dimensional input, and it transforms it to a higher dimensional space, i.e., it converts non-linearly separable data to linearly separable data. References [1] https://scikit-learn.org/stable/modules/neighbors.html#nearest-neighbors-classification [2] ( 1 , 2 ) Machine Learning in Action by Peter Harrington [3] Scikit-learn Documentations: Tree algorithms: ID3, C4.5, C5.0 and CART [4] Scikit-learn Documentations: Ensemble Method [5] Medium-article: what is Gradient Boosting [6] Decision Trees [7] Support Vector Machine [8] ( 1 , 2 , 3 , 4 ) Support Vector Machine","[ 3.70807737e-01  2.60641813e-01  1.61915943e-01  4.29750420e-03
  3.66938859e-01 -6.52959496e-02  3.15683067e-01  2.04586476e-01
  4.36731875e-01  2.21063830e-02  6.44981742e-01 -1.03269115e-01
  6.37594312e-02 -1.66454256e-01  1.41018182e-01 -3.81890178e-01
  3.15876398e-03 -1.21763283e-02 -1.90497518e-01  1.60850078e-01
 -1.60214037e-01  2.30085880e-01  4.78689969e-02 -3.76908720e-01
 -1.12205252e-01 -2.22125649e-01  2.10963249e-01  1.11769877e-01
  3.26959975e-02  5.83750904e-01 -1.83869556e-01 -5.24455272e-02
 -1.29459232e-01  2.32979748e-02 -1.54386908e-01  1.48491800e-01
  2.52870679e-01 -1.77012563e-01 -3.33337367e-01 -1.56621128e-01
  2.60415077e-01  6.19735122e-01  9.09985900e-02  3.87351274e-01
  3.48632187e-02 -2.38295764e-01 -4.85919207e-01 -4.26738977e-01
 -1.23034507e-01  7.19776750e-02 -9.36737061e-02 -5.44435158e-03
 -4.64309752e-02 -2.41144016e-01  4.04831111e-01 -4.09205437e-01
  2.41404809e-02  7.34272242e-01  1.06091619e-01  2.05717742e-01
  8.90901506e-01  4.98927236e-01  1.48976058e-01  9.65292603e-02
 -5.23337960e-01 -3.91940683e-01  2.15503827e-01  5.58612496e-02
  2.55069077e-01  4.36351299e-01 -6.14838004e-02 -1.91499799e-01
 -2.35696808e-02 -4.10101861e-01 -2.80198455e-01 -4.59068194e-02
  1.23295486e-02 -1.62712127e-01 -3.31673145e-01  3.73666361e-02
  2.54875980e-02  5.03847063e-01 -1.95362702e-01  2.16087490e-01
 -9.30955112e-02  2.90223118e-02  1.18724823e-01 -1.95538878e-01
 -2.53089845e-01 -1.94183707e-01 -4.21210349e-01 -9.84653533e-02
 -3.95589828e-01  7.17572644e-02 -1.12886995e-01 -1.17160276e-01
  1.27423927e-03 -3.94389853e-02 -5.89844920e-02  1.60582364e-01
 -6.54205531e-02  1.48175865e-01  9.37394261e-01  2.67185926e-01
  4.04487729e-01  2.35093698e-01  4.17730212e-01  2.20211625e-01
  3.17114815e-02  1.39210284e-01  1.07717454e-01  1.85624868e-01
 -1.10012069e-01 -1.05714269e-01 -9.43412036e-02 -2.77374685e-02
  1.37317717e-01  2.33656466e-01  1.49644092e-01  2.01870173e-01
  7.79624470e-03 -1.33360252e-01 -4.22704637e-01  3.87440950e-01
 -1.69303596e-01  3.60504597e-01  1.06353819e-01  2.89055705e-01
 -2.62817234e-01  1.60334438e-01 -1.03384510e-01  9.56456363e-02
 -1.72817498e-01 -2.53496796e-01  1.77475512e-01  1.60697345e-02
 -1.10544795e-02  2.57849634e-01 -1.29709557e-01 -2.12819785e-01
 -2.27048360e-02 -9.16404929e-03 -1.82613239e-01  5.32185920e-02
 -4.73178536e-01 -1.52574599e-01 -3.84082496e-02  3.49704735e-03
  9.50943828e-02 -5.77789843e-02 -1.36966109e-02 -3.27615529e-01
 -2.11034536e-01 -3.91084164e-01  2.52887309e-01  3.00582886e-01
  2.72682369e-01 -5.79059184e-01 -1.37021944e-01  1.25253081e-01
  9.11755860e-02 -2.32662573e-01  1.99814886e-01 -7.96380043e-02
  5.17085195e-01  3.65827493e-02 -2.22382471e-02 -3.51752758e-01
 -2.30593115e-01 -4.89038408e-01 -3.47715706e-01  4.16009009e-01
 -1.66889325e-01  8.34146366e-02 -3.26371789e-02  4.46218133e-01
 -2.53785640e-01 -1.26816377e-01 -3.83251980e-02 -1.44172013e-01
 -7.57012516e-03  5.78179657e-02  4.24489006e-02  1.28432840e-01
 -3.28637540e-01  3.77793163e-02  1.28188625e-01  1.67511567e-01
 -2.96071053e-01 -1.45080119e-01 -2.42417410e-01  3.25543284e-01
 -2.03140587e-01  7.79446721e-01 -1.15102731e-01 -2.23870948e-03
  2.19245166e-01  6.89472705e-02 -1.07819594e-01 -2.49235243e-01
  2.64357086e-02  1.03087932e-01 -1.83425754e-01  1.26732932e-02
  2.18188226e-01 -4.00839560e-02  3.17836761e-01  4.18238610e-01
  7.92140663e-02 -4.96045081e-03  2.92354643e-01 -3.94691944e-01
 -2.61461437e-01  5.51042438e-01 -1.02665991e-01  7.45544303e-03
  9.77837443e-02  9.27294612e-01 -2.44918223e-02  1.99906863e-02
  1.32924289e-01 -1.95962153e-02  1.55602187e-01 -2.06365645e-01
  6.39635742e-01 -3.14408451e-01  2.63056904e-03  1.27304439e-02
 -1.12705566e-01 -2.54716072e-03  2.80961424e-01 -1.98370740e-01
 -2.94339359e-01  4.40106280e-02  2.09349647e-01  1.42085925e-01
  3.03360671e-01  1.83798015e-01 -1.80137470e-01  8.16461891e-02
  2.81699300e-01 -7.94526935e-02  3.00227962e-02  4.48669791e-02
  1.92188203e-01  2.11469829e-01  1.44156050e-02  8.80815461e-03
  2.02347413e-01 -4.41404611e-01  2.64403522e-01 -5.39106965e-01
  3.13408911e-01 -2.70076990e-02 -2.02217907e-01 -3.87369633e-01
 -8.81069005e-02  1.35199130e-01 -7.60894939e-02  2.16492623e-01
  2.30447680e-01  1.28880873e-01  2.10257024e-01 -9.07990932e-02
 -1.92955006e-02  3.20996433e-01 -8.08513910e-03 -1.15770757e-01
 -1.74012750e-01 -3.89878392e-01 -1.73004624e-03 -4.82045487e-02
 -6.80270940e-02 -8.96572694e-02  1.15813129e-03 -2.24462710e-02
  2.20932946e-01  2.21022870e-04 -2.67337449e-02  2.31090426e-01
  6.93829805e-02 -2.46480688e-01  2.03138083e-01 -1.84393242e-01
  8.05729702e-02 -1.44558936e-01  4.54621464e-02 -2.80411839e-01
  1.96860507e-01  2.48908311e-01  1.98541760e-01 -3.86508763e-01
 -4.01245803e-03 -4.74342257e-02 -7.65473247e-02  2.31942132e-01
  9.43389684e-02 -1.64993525e-01  5.04769906e-02 -2.88955748e-01
 -3.77337098e-01  6.06441423e-02  3.27663839e-01  8.27421620e-02
 -1.26336679e-01  2.01782376e-01  2.16975689e-01  7.00007528e-02
  9.52355713e-02  1.88685238e-01 -1.45575941e-01 -5.15675433e-02
  4.85035926e-01 -2.13540852e-01  1.99893117e-01  3.15839708e-01
  1.53340697e-01 -1.12918667e-01  3.29805426e-02 -3.53665203e-02
  9.12863985e-02  6.09039590e-02 -3.69753063e-01  1.00144908e-01
 -2.91568637e-01 -2.84842849e-01  1.15891404e-01  1.22367077e-01
  2.59381592e-01 -4.79469061e-01  2.29524627e-01  4.87816632e-02
  1.12164337e-02  3.69162798e-01 -1.45259704e-02 -3.50084811e-01
 -7.19680935e-02  2.93462649e-02 -1.10674664e-01 -3.15718442e-01
  6.25918508e-02 -4.11078800e-03  6.35452271e-02 -2.86696702e-02
 -1.15708277e-01  2.36048866e-02 -2.91353762e-01  3.11817765e-01
 -9.59756412e-03 -4.51290071e-01  3.07210296e-01  4.36512902e-02
  2.92941511e-01  1.96935281e-01 -7.19295740e-02 -4.39906359e-01
  1.61254495e-01 -7.16763660e-02 -4.13561165e-02  1.62398480e-02
 -3.27036023e-01 -1.08080536e-01  1.68193638e-01 -1.95575088e-01
  1.67862654e-01 -8.58528987e-02  6.46830350e-03  5.78745119e-02
 -1.84568554e-01  7.03649670e-02  4.98857163e-02 -2.60170847e-01
  2.41277233e-01  1.73736691e-01 -1.91255346e-01 -1.11804008e-01
  3.46646845e-01 -1.26000628e-01  2.30266899e-03 -1.36747897e-01
 -9.95769575e-02 -9.00209025e-02  1.26818657e-01  7.64870346e-02
 -1.50395587e-01  1.30244896e-01  2.52291501e-01 -2.91596293e-01
  2.35056594e-01 -3.59100550e-02  1.92437813e-01 -2.74679065e-02
 -1.03252679e-01  1.11177340e-01  1.39934868e-01 -1.01992469e-02
  5.64531516e-03 -4.66660053e-01 -3.59333992e-01  7.85639882e-02
 -2.50065327e-01 -4.15414125e-01  2.50540376e-01  1.32599324e-01
  1.99705526e-01  2.71943539e-01  3.43905002e-01  4.57381964e-01
 -6.65520802e-02 -2.01441258e-01 -1.27608329e-01 -4.42165919e-02
  4.70378734e-02 -3.08076292e-01  3.33429903e-01 -9.29647014e-02
  3.74995321e-01  8.56595337e-02 -3.98107588e-01 -2.42090732e-01
 -2.73409933e-01 -2.52162576e-01  3.98973823e-01 -1.87039040e-02
  2.73258150e-01  1.13211222e-01 -1.64073050e-01 -3.37165706e-02
 -2.76914179e-01 -2.07692176e-01 -2.71426708e-01 -8.37895349e-02
  3.13663334e-02  1.58409834e-01  4.51616645e-01 -1.63443238e-01
  5.13286352e-01 -1.66458189e-01  3.80990803e-01 -3.83624136e-02
  1.72218233e-01  4.81941819e-01  7.77615160e-02  9.91308242e-02
  2.85106301e-01  6.69223741e-02  2.35894799e-01  1.55858278e-01
 -5.33819385e-02  3.50088179e-01  1.94101110e-01  1.19008526e-01
 -1.05518900e-01  1.23939522e-01 -2.48276800e-01  6.31031543e-02
  5.26742004e-02  1.40760332e-01 -2.16223955e-01  8.99610072e-02
  2.37865239e-01  7.47646112e-03 -5.60176149e-02  4.97344024e-02
 -2.04081967e-01  2.33875915e-01  5.67528754e-02  2.81188358e-02
 -2.29504049e-01 -2.91106939e-01 -2.48766333e-01 -1.05428420e-01
 -2.81715244e-02  3.42258632e-01 -1.75610811e-01 -9.93183479e-02
 -4.10203487e-02  2.96330508e-02  8.49247873e-02  1.43652126e-01
 -2.56448258e-02  1.27133355e-01 -1.55761346e-01  1.87954396e-01
  1.12359030e-02  3.17655206e-01  3.52416396e-01 -2.76457250e-01
 -6.56939819e-02  2.07852170e-01 -1.21724661e-02  1.14675559e-01
  4.15978849e-01 -9.06306431e-02  2.47312173e-01 -6.01469502e-02
 -5.72152197e-01 -1.39948696e-01 -3.68251681e-01  1.04300335e-01
  5.37508726e-03  2.06005871e-01  4.12757814e-01  3.24246198e-01
  2.33711034e-01  4.40292545e-02 -3.68847959e-02  1.91617072e-01
  1.12191647e-01 -4.95752357e-02  4.03518155e-02  2.45671690e-01
  4.81731236e-01  1.01282403e-01  2.19209149e-01  4.74250436e-01
  6.08882755e-02 -2.07059056e-01 -1.25358015e-01 -1.24528483e-01
 -1.38508290e-01 -1.46198645e-01  3.86560038e-02  1.28421038e-01
 -5.16459607e-02 -2.52194703e-01  6.42529950e-02 -9.51155722e-02
 -1.17605198e-02 -3.55078459e-01 -5.91152728e-01 -5.04236519e-02
  9.58790928e-02  1.70194507e-01 -2.29216903e-01 -2.68491894e-01
 -7.39743635e-02  2.06029922e-01 -3.36486042e-01 -3.59740019e-01
 -1.62128240e-01 -6.29281282e-01 -1.16191898e-02 -9.96992663e-02
  1.14722580e-01 -7.23635871e-03 -6.63488567e-01  2.05866039e-01
  2.28296593e-02  3.61152947e-01 -1.98833019e-01  5.32465041e-01
 -5.50244972e-02 -1.16320506e-01  3.58675838e-01 -3.39868851e-03
 -1.64616063e-01  1.35742903e-01  2.19693929e-01 -1.59505755e-03
  6.72338232e-02  8.08640271e-02 -3.74967530e-02 -5.51212691e-02
  2.85196733e-02  1.90450072e-01 -1.04009956e-01 -4.86284047e-02
  2.46688828e-01  1.12145945e-01 -1.14133887e-01 -1.52492244e-02
 -2.08631605e-01  1.98025689e-01  3.40393186e-01  5.78022450e-02
 -3.09667811e-02  4.27546561e-01 -1.13358125e-01  6.97468407e-04
  4.36526269e-01 -1.84073329e-01  3.34669471e-01  7.62938708e-02
  9.92995948e-02  4.41363275e-01 -2.24995181e-01  2.18044464e-02
 -1.54129550e-01 -1.36018068e-01 -5.11769019e-02  1.50820166e-01
 -1.50041297e-01 -3.67462039e-02 -1.48010463e-01  7.77622014e-02
  5.11429310e-01 -9.31409895e-02  2.54081279e-01 -2.76827589e-02
  1.64806157e-01 -1.16648540e-01 -9.94014367e-02 -3.12515497e-01
 -6.34426177e-02 -4.36950736e-02 -2.97095895e-01  1.81942880e-01
 -1.70571893e-01  1.10320508e-01  1.42290443e-01  7.76079744e-02
  2.78713286e-01 -4.45486844e-01  2.11798400e-02 -1.88605428e-01
 -7.72247761e-02  3.90672982e-02 -3.12103152e-01  2.94654757e-01
  6.92848414e-02 -1.49141371e-01  1.53226005e-02 -2.32337385e-01
  1.66154161e-01 -1.35535598e-01 -1.31137013e-01  4.83545244e-01
 -1.04237366e-02 -1.85689270e-01 -1.91110209e-01 -3.05114716e-01
  2.13312745e-01 -1.01193734e-01 -4.55353081e-01  3.89304720e-02
  1.75360262e-01  9.95319486e-02  2.34491199e-01  2.22182900e-01
  3.55629534e-01  3.76361683e-02  1.96094334e-01 -1.63410097e-01
  1.01440087e-01  3.68297517e-01 -8.49563479e-02 -4.80290353e-01
 -4.42753248e-02 -6.28069937e-02 -1.66242361e-01 -2.35390082e-01
  5.38058877e-01 -5.93275502e-02  7.80248642e-02  1.24151021e-01
 -7.57605791e-01  7.45066553e-02 -3.50793973e-02 -1.02151133e-01
  2.03925997e-01  4.25168574e-01  1.28806308e-01 -3.09111401e-02
  4.08162147e-01 -1.42090514e-01 -3.75297815e-02  7.30868429e-02
  4.19184715e-02  1.35597050e-01 -1.99650556e-01 -1.89532399e-01
  3.95908356e-02 -1.37309611e-01 -1.23266481e-01 -2.25355223e-01
  7.47370601e-01  1.82271600e-01 -3.75600278e-01  8.12885910e-03
 -9.15548503e-02  3.70341837e-01  2.18826920e-01  4.86880720e-01
  7.83703476e-02  1.08009698e-02  1.87706381e-01 -3.02138776e-01
  3.69510762e-02 -5.49620867e-01 -1.91511780e-01  2.27311566e-01
  3.43982995e-01  9.60085914e-02 -1.08047940e-01 -2.03263730e-01
  4.28958163e-02  9.94148403e-02  6.48242012e-02 -4.91239309e-01
 -8.80435407e-02  4.03755568e-02  1.39214844e-01 -1.88770778e-02
  5.84710911e-02  6.81355745e-02  4.27665897e-02  4.72712219e-01
 -1.74052879e-01 -3.50040078e-01  5.75671643e-02  2.71332204e-01
 -9.31447372e-03  3.89581800e-01  1.92378461e-01 -1.86545074e-01
  3.36434692e-02  8.28934163e-02 -5.29195249e-01  1.04018189e-01
 -4.07266617e-02  1.43586397e-01  8.25714320e-04  9.65024829e-02
 -3.32906336e-01  1.51568726e-01 -1.19016528e-01  1.16097674e-01
 -2.87773699e-01 -1.54550195e-01 -3.73163044e-01  1.85606539e-01
  9.17005241e-02  2.13785619e-01  1.43531516e-01  1.55466259e-01
  1.66879624e-01 -1.88120633e-01  6.00105710e-02 -1.39457002e-01
  7.18500465e-02 -4.65366006e-01  4.14224565e-02 -2.33371556e-01
  1.01576492e-01  2.45813411e-02 -5.67231216e-02  1.65593207e-01
 -3.27561826e-01  7.94683546e-02 -7.73627311e-02  3.78203809e-01
 -2.57482324e-02  1.08359214e-02  1.54981777e-01 -1.26001582e-01
 -2.05356613e-01  2.93001533e-02  2.72260547e-01 -3.02052349e-01
  2.72083968e-01  5.77202402e-02 -1.35694563e-01 -1.35803133e-01
 -2.25635484e-01 -4.96634282e-03  3.49221259e-01  1.51121452e-01]"
Clustering,Clustering Algorithms ¶ Centroid ¶ Be the first to contribute! Density ¶ Be the first to contribute! Distribution ¶ Be the first to contribute! Hierarchical ¶ Be the first to contribute! K-Means ¶ Be the first to contribute! Mean shift ¶ Be the first to contribute! References [1] https://en.wikipedia.org/wiki/Cluster_analysis,"[ 1.73699632e-01  2.65563652e-02  4.76942435e-02 -2.44053572e-01
  1.84904009e-01  1.68347850e-01 -7.85405040e-02  6.22975409e-01
  3.48756015e-01 -2.41423413e-01  3.34536135e-01 -3.79418612e-01
 -1.09944284e-01  2.85509646e-01  3.70493740e-01 -9.11125317e-02
 -1.97488859e-01  4.38921414e-02  5.59219755e-02 -2.51608819e-01
  7.40100220e-02  3.00267726e-01 -3.01016551e-02 -3.84861231e-01
 -2.53437506e-03  2.89174050e-01  6.60162466e-03  2.35501111e-01
 -3.83768007e-02 -1.02448404e-01 -3.73602331e-01  5.05153060e-01
 -9.05666947e-02  5.81405640e-01  9.61088836e-02 -9.78568345e-02
  2.54535615e-01 -3.51520389e-01 -4.67233032e-01  2.80606180e-01
  2.36380845e-01 -1.47807762e-01 -4.30610299e-01 -4.78769168e-02
  2.57736653e-01 -1.47356153e-01 -5.62520146e-01  8.98729339e-02
  9.77017954e-02  2.36115769e-01 -1.18709952e-01 -2.08789662e-01
  2.22640693e-01  1.55466199e-01  1.56938657e-01  9.43406373e-02
  1.48713261e-01  2.97536790e-01 -4.60489035e-01  3.08720022e-01
 -1.37385443e-01 -7.24580169e-01 -2.44989276e-01  2.79747158e-01
  6.30843118e-02  5.62074967e-03  9.32702497e-02  2.64231443e-01
 -4.46683839e-02  7.46749640e-02 -3.21203083e-01  1.72690079e-01
  3.06443244e-01 -3.07902724e-01  2.81284750e-01 -1.42515255e-02
 -2.54167169e-01  3.70753229e-01 -2.30329052e-01  4.47628200e-01
 -3.53839368e-01 -2.21171945e-01 -2.12847535e-02  3.25819403e-01
  1.69758007e-01  5.02422214e-01 -1.21690728e-01 -5.72630286e-01
  4.82182391e-02  1.04578763e-01  1.64759874e-01  1.69074431e-01
  5.27473576e-02  1.76138297e-01 -6.37227595e-02 -1.27744272e-01
  8.71136785e-02 -4.28017616e-01 -1.08742081e-02  2.82922536e-01
  4.18570429e-01 -1.33049190e-01  3.82321924e-01 -5.61948895e-01
 -1.57411948e-01  4.64495689e-01 -1.88115135e-01 -2.69883990e-01
  2.79570341e-01 -7.06759095e-02  6.82714488e-03 -8.65501985e-02
 -4.05059725e-01 -2.18369052e-01 -5.74498624e-02  9.61747393e-02
  1.63150266e-01 -3.94541413e-01  4.43252474e-01  2.57489920e-01
 -2.66771585e-01  3.18029106e-01  9.60245952e-02  2.28380457e-01
 -2.76955307e-01 -1.91048145e-01 -2.91172922e-01 -7.07161352e-02
 -5.76952398e-02 -2.97552913e-01 -8.61269161e-02 -8.68857726e-02
 -3.87956768e-01 -2.74448335e-01  6.57793209e-02 -2.51267046e-01
  9.71398652e-02  1.06197864e-01 -2.43468553e-01  1.80835083e-01
  3.23044807e-02 -4.28170450e-02 -2.31700212e-01  3.65773169e-03
  1.44753568e-02  2.78670013e-01  4.52498570e-02  2.40667924e-01
  7.54502773e-01 -2.82919288e-01  2.21520066e-01  2.23861411e-01
  2.18207896e-01 -3.37323189e-01  3.53604436e-01  3.81475717e-01
 -9.84704345e-02 -3.38324457e-01  6.97527081e-02 -5.15660085e-02
 -5.67755811e-02  6.04663551e-01  4.01629388e-01  1.04954503e-01
  2.79900759e-01  9.45621282e-02  4.65554483e-02  1.84484392e-01
 -2.65396625e-01 -1.29621938e-01 -1.43354669e-01 -2.74460554e-01
  3.45026463e-01 -1.43515557e-01 -2.78408647e-01  5.13364449e-02
 -2.61476159e-01 -9.05996487e-02 -1.22919798e-01  4.54383977e-02
 -2.46474147e-02 -3.20275515e-01 -9.07257721e-02  1.18118688e-01
  8.43530059e-01 -2.60984171e-02  1.21548966e-01  3.35108846e-01
  5.07904768e-01 -1.68684378e-01  3.99274975e-01 -4.43423279e-02
 -3.04030538e-01  6.07871115e-01  1.48614012e-02  5.58908045e-01
 -2.53517061e-01 -2.80370235e-01  9.64564830e-02  2.42340527e-02
  3.69319826e-01 -2.58072346e-01  4.18938041e-01 -3.55122745e-01
 -3.72338206e-01  1.96337327e-01  2.69862376e-02  1.42944068e-01
 -7.09673539e-02 -7.06143081e-02 -5.12926616e-02 -1.02858059e-01
 -1.08316682e-01  3.49073619e-01  1.25726357e-01 -7.89828777e-01
  7.30312616e-02  1.51301906e-01 -2.39356145e-01 -3.94897640e-01
  3.47224236e-01 -1.19535193e-01  3.53081763e-01  8.38596746e-03
  3.53094667e-01 -2.94083387e-01 -2.99653858e-01  2.69170344e-01
  1.49588734e-01 -3.09551239e-01  1.29717901e-01  2.23984122e-02
 -2.45006397e-01 -5.58144264e-02 -2.72209108e-01 -2.64876727e-02
 -2.65653104e-01  4.01538253e-01 -1.73099771e-01  1.92541420e-01
  2.76118398e-01  8.81891847e-02  1.43273830e-01  1.91155262e-02
 -5.98410517e-02  5.50381780e-01 -2.86147743e-01  4.20712493e-02
 -5.82153350e-02  1.05509907e-01  3.00099730e-01 -3.19513947e-01
  6.56745285e-02 -5.59680276e-02  2.21062809e-01  2.13120971e-02
 -2.74253786e-01 -2.41621822e-01 -9.47457016e-01  3.62112612e-01
  1.68017875e-02 -5.17529011e-01  7.42929801e-02 -2.92143673e-01
 -3.57804209e-01 -1.35782018e-01  2.40798056e-01  4.57428722e-03
 -2.55571753e-01  2.70404499e-02 -1.90824553e-01 -2.54384726e-01
  5.38684130e-01  8.22093785e-02 -1.17614679e-01  2.91295379e-01
 -2.88303643e-01  1.31140277e-03  7.64439330e-02 -7.90860318e-03
  3.52132648e-01  2.82247096e-01  5.17017066e-01 -1.61727950e-01
  4.27706718e-01 -8.20318386e-02  5.08332662e-02 -8.49871695e-01
  6.10208232e-03  2.13786438e-02 -1.00096241e-01 -6.50642693e-01
 -1.73720002e-01 -1.51611164e-01  1.45575672e-01  7.77373984e-02
 -2.42396638e-01  2.55428642e-01  8.16882700e-02  3.36334050e-01
 -3.06831956e-01  1.78465202e-01 -3.97712052e-01  4.19620186e-01
 -3.38282853e-01 -9.38983634e-02 -1.91420496e-01  2.43980438e-01
  1.17623582e-01 -2.78484792e-01  3.68000865e-02  8.88516083e-02
  2.95722634e-01  3.86674926e-02  7.77463019e-02  2.56017655e-01
 -3.24775010e-01  9.05436352e-02  3.69761169e-01  9.87751707e-02
 -5.92302196e-02  8.99523795e-02  1.50727957e-01 -1.26665071e-01
 -6.62882328e-02 -1.91050500e-01 -2.11862475e-01 -4.79508996e-01
 -7.91271105e-02  3.52300406e-02  2.19918400e-01 -1.29723743e-01
  5.13775367e-03  5.68402529e-01  1.24495402e-01 -6.48836121e-02
  5.40629902e-04 -1.18015714e-01 -6.38045147e-02  6.40069991e-02
  3.26221377e-01  5.11541247e-01 -7.61297345e-02  2.53700800e-02
 -2.03516483e-01 -2.68765464e-02 -3.63778979e-01  3.19777131e-01
  3.98159176e-01 -8.74050707e-02 -6.54252470e-02 -2.07145587e-02
  3.44736308e-01 -3.03094000e-01 -1.82103470e-01  8.91880691e-02
 -1.07453749e-01 -1.38900101e-01  6.92387447e-02  5.11984646e-01
 -7.20311627e-02  1.58747926e-03  7.92207718e-02  1.69083312e-01
  4.16188717e-01 -1.12006374e-01  2.09357575e-01 -1.78348660e-01
  9.72566456e-02 -1.89668134e-01  1.42744452e-01  2.12272167e-01
  1.35437533e-01 -1.18117496e-01  2.86459535e-01  3.42092603e-01
  2.17092723e-01  1.96683243e-01  8.15301910e-02  2.38836631e-01
 -9.79635194e-02  2.43028313e-01 -8.55136365e-02 -9.71733257e-02
 -1.70063958e-01 -1.66929170e-01  3.86599451e-01 -2.28176445e-01
 -1.14458818e-02 -1.14898019e-01  4.05830711e-01 -7.32568130e-02
  7.21365884e-02  1.62605315e-01  2.37978101e-02  8.06314573e-02
  3.71076679e-03 -1.98327124e-01  2.57664472e-01  1.83591247e-02
  1.00564845e-02  2.75838058e-02 -1.04359157e-01 -3.48577470e-01
 -5.70066050e-02 -5.58929265e-01  5.07125676e-01  2.01894477e-01
  2.59524763e-01  1.59065843e-01 -3.24733973e-01 -3.04666031e-02
 -1.83480039e-01 -5.28590798e-01  2.91500092e-01  4.19202000e-01
 -8.40287656e-02 -3.73415835e-02 -7.45761849e-04 -1.08346283e-01
  3.60912979e-01 -3.32554311e-01  3.11813578e-02 -6.26011610e-01
  7.53776124e-03  4.34511572e-01 -2.24831596e-01  3.59352678e-01
  4.41026129e-02  6.93373978e-02 -1.55448988e-01 -2.39960700e-01
 -5.54035529e-02  2.86851585e-01  5.01311421e-01 -5.51859150e-03
  2.15498000e-01 -7.14007318e-02 -1.15597814e-01  6.22938685e-02
  2.23959640e-01  2.96912700e-01 -1.28757969e-01  1.55226097e-01
  5.85801065e-01  1.31001532e-01  1.50882751e-01  1.02348924e-01
  1.19274206e-01  3.07411343e-01 -1.46993026e-01  6.13113225e-01
 -9.54063118e-01 -1.36277005e-01 -1.20443285e-01 -1.27034366e-01
 -9.77317765e-02 -1.39454350e-01 -1.64328396e-01  3.28193396e-01
 -3.78139824e-01  3.37425619e-01 -6.84601516e-02  3.03354412e-01
 -3.71034533e-01  6.32363781e-02  1.42699063e-01  9.95392073e-03
 -1.42097548e-01 -3.82086746e-02  5.02153523e-02 -1.64825365e-01
 -1.65684193e-01  3.82763445e-01  4.65292223e-02 -6.96576610e-02
 -1.10099897e-01 -5.53672373e-01 -2.38245234e-01  6.97159618e-02
 -2.21752033e-01 -1.29510507e-01  1.55593410e-01 -1.61758840e-01
  3.11948627e-01  2.45759204e-01 -1.62505522e-01  2.66690776e-02
 -2.34094143e-01  2.11052790e-01 -4.55580473e-01  6.98762417e-01
 -1.23113245e-01 -6.16655014e-02  3.54556918e-01 -1.01905711e-01
 -3.43703657e-01 -2.77929544e-01  2.71652520e-01  2.26263985e-01
 -5.89803830e-02  1.38654590e-01 -1.63230449e-01  7.10718632e-02
 -2.56694347e-01  3.28872874e-02 -1.73229888e-01  1.51311040e-01
 -3.74577194e-02 -8.13884884e-02 -2.77496189e-01 -8.68026093e-02
  2.27483466e-01  2.77188748e-01  1.44505337e-01  2.45860681e-01
  1.95981458e-01  3.57161492e-01  8.88992548e-02 -6.05538428e-01
  8.07891488e-02 -6.16255775e-02  1.30270759e-03 -1.71745837e-01
 -1.13048263e-01  1.95007458e-01 -4.59234640e-02 -2.82092869e-01
 -2.89988101e-01 -2.94788390e-01  9.98793691e-02 -9.96786505e-02
  3.19365591e-01  8.27095434e-02  2.19698474e-02  9.75520089e-02
  1.18973479e-01 -9.65016037e-02  1.69040799e-01  8.06053430e-02
  1.18673854e-01 -4.77431148e-01  4.74511296e-01 -1.50355324e-01
  1.07223429e-01 -2.84127206e-01 -1.66336447e-01 -3.55394892e-02
 -5.19169271e-01  9.05575454e-02 -4.16896820e-01  1.85516790e-01
  7.17871450e-03  2.31186241e-01  2.25267291e-01  1.07257947e-01
 -3.09210002e-01 -2.70457357e-01 -5.53124547e-02  9.58101273e-01
  2.85387844e-01  5.01453102e-01 -2.20690846e-01  2.53524691e-01
 -3.92210633e-01 -8.09586421e-02  5.94195962e-01 -3.08774203e-01
 -1.89163268e-01  3.71222347e-01 -6.84102699e-02  2.18331851e-02
 -2.84172386e-01 -5.96510112e-01 -3.42713892e-02  1.30661219e-01
  8.09783489e-02  1.48232982e-01 -5.02116419e-02  3.06692421e-01
 -4.56054777e-01 -1.74056068e-01 -1.98038798e-02 -9.27475393e-02
  2.66465843e-01  6.54507577e-01 -1.67280674e-01 -2.10924029e-01
 -8.03271383e-02 -2.35131420e-02 -1.48286596e-01  3.36034209e-01
 -1.98166788e-01 -2.29748458e-01  1.61758944e-01  1.62229970e-01
  1.02328636e-01 -8.73992443e-02  5.50271571e-01  3.00504267e-02
  1.24043018e-01  1.75469279e-01 -1.26705751e-01 -7.54819736e-02
 -2.74436306e-02  1.96002796e-01 -3.53810228e-02  1.51443398e-02
 -3.07393432e-01  4.76817161e-01  8.13053772e-02 -5.30121811e-02
  9.94357616e-02  1.83626655e-02  2.35113189e-01  1.67558938e-02
 -1.17146872e-01 -9.51228589e-02 -3.11043411e-01  2.43063778e-01
  4.81615096e-01  1.75080404e-01 -3.74919027e-01 -1.36595905e-01
 -2.20162962e-02 -4.51061398e-01 -4.21997495e-02  3.82880807e-01
 -1.08346775e-01 -2.11531743e-01 -1.48700371e-01  1.42286330e-01
  6.02826253e-02 -5.19988179e-01 -3.35295796e-01  1.01432698e-02
  2.96616461e-02  4.31183606e-01  1.25781015e-01 -8.95947814e-02
 -3.67379934e-02 -3.61168206e-01  3.82817276e-02 -1.41458496e-01
  2.36857697e-01  4.09309566e-01  2.52697557e-01  1.03610165e-01
 -1.40873939e-01  3.40895087e-01  3.65729071e-02  4.99320328e-02
  1.57323316e-01  4.85325873e-01 -1.45387396e-01  1.13333009e-01
 -1.08513832e-01  2.56508719e-02 -6.84404254e-01  5.02390526e-02
  3.54856640e-01  4.24970873e-02 -1.02877386e-01 -3.50359052e-01
 -1.93335727e-01  1.96433306e-01  6.21505864e-02  2.86273569e-01
 -1.06509320e-01  2.27074951e-01  1.25967711e-01  8.47423896e-02
  3.88254613e-01 -5.29262722e-02 -4.15755630e-01  1.31141707e-01
  2.54723072e-01  3.43374461e-01 -8.64813030e-02  2.70924419e-02
  2.83354431e-01  3.00415456e-01  7.18131900e-01 -2.46413961e-01
 -8.56658742e-02  1.18127584e-01  6.49921417e-01 -5.58688268e-02
  6.91857189e-02 -3.86554264e-02  1.75934937e-02 -1.64143816e-01
  4.26937118e-02 -3.78035098e-01 -3.22715610e-01 -2.98354059e-01
 -2.99769312e-01  8.56961086e-02  3.63623425e-02  2.53777891e-01
 -1.74640134e-01  2.68531054e-01 -4.73474354e-01 -4.08086538e-01
 -1.02581240e-01 -3.49573821e-01  8.90372992e-02 -3.52483958e-01
  2.99178511e-01 -1.04542732e-01 -1.33525714e-01 -4.05131951e-02
 -1.03522263e-01  4.43465412e-02 -7.31838718e-02 -6.48977906e-02
 -2.00913057e-01 -8.08483455e-03  2.61473089e-01  1.61029175e-01
  1.90154672e-01 -2.87320912e-01  1.20800614e-01  1.36033669e-01
 -2.32962638e-01  6.82869852e-02  1.65306181e-01  2.16832519e-01
 -2.69329727e-01 -2.67041206e-01 -8.42671171e-02 -4.91319001e-02
 -8.94874707e-03  2.05573114e-03  3.48181933e-01  4.18107770e-02
  2.77214468e-01 -3.46407384e-01  2.59548835e-02  2.04843422e-03
  1.16466329e-01  1.55648082e-01  6.35904744e-02  9.73545201e-03
 -1.07551729e-02  2.92432547e-01  3.21783870e-01  1.48660183e-01
  4.10197042e-02 -3.81645888e-01  1.62340999e-01  2.21230224e-01
  3.47094387e-01 -3.11556906e-01  5.35075724e-01 -6.32055923e-02
  5.86601555e-01  2.18642130e-01  1.31877258e-01  2.17378244e-01
  2.43268624e-01  2.31864646e-01 -1.89400818e-02 -1.60024483e-02
 -3.94821405e-01  1.80776924e-01  4.01111059e-02 -8.35157037e-02]"
Regression,"Regression Algorithms ¶ Ordinary Least Squares Polynomial Lasso Ridge Stepwise Ordinary Least Squares ¶ OLS is the method with which linear regression is performed. The square of the difference from the mean is taken for every data point, and the summed loss function is to be minimized. \[l = \sum_{i=1}^n (y_i - \bar{y})^2\] Polynomial ¶ Polynomial regression is a modification of linear regression where the existing features are mapped to a polynomial form. The problem is still a linear regression problem, but the input vector is now mapped to a higher dimensional vector which serves as a pseudo-input vector of sorts. \[\textbf{x} = (x_0, x_1) \rightarrow \textbf{x'} = (x_0, x^2_0, x_1, x^2_1, x_0x_1)\] Lasso ¶ Lasso Regression tries to reduce the ordinary least squares error similar to vanilla regression, but adds an extra term. The sum of the \(L_1\) norm for every data point multiplied by a hyperparameter \(\alpha\) is used. This reduces model complexity and prevents overfitting. \[l = \sum_{i=1}^n (y_i - \tilde{y})^2 + \alpha \sum_{j=1}^p |w_j|\] Ridge ¶ Ridge regression is similar to lasso regression, but the regularization term uses the \(L_2\) norm instead. \[l = \sum_{i=1}^n (y_i - \tilde{y})^2 + \alpha \sum_{j=1}^p w^2_j\] Stepwise ¶ Stepwise regression or spline regression helps us fit a piece wise function to the data. It is usually used with linear models, but it can be generalized to higher degrees as well. The regression equation takes the form of \[y = ax + b(x-\bar{x})H_{\alpha}+c\] where \(H_{\alpha}\) is the shifted Heaviside step function, having its discontinuity at \(\alpha\) . References [1] https://www.analyticsvidhya.com/blog/2015/08/comprehensive-guide-regression/ [2] http://machinelearningmastery.com/a-tour-of-machine-learning-algorithms/","[-1.14599049e-01 -6.40599132e-02 -7.02864677e-02  6.03074610e-01
  4.72652555e-01  2.32811302e-01  2.22841606e-01 -2.01028928e-01
  2.02109337e-01  3.15844178e-01  3.54567349e-01 -4.63636339e-01
  4.41663340e-02 -1.05069563e-01  6.19219206e-02 -6.47356808e-01
 -2.53839910e-01 -6.38703942e-01  1.35740116e-02 -8.60001147e-02
 -9.71513167e-02  2.71261573e-01 -1.50613397e-01 -5.62266231e-01
  2.53872275e-01  8.08381140e-02  1.71491981e-01 -1.75855476e-02
 -2.28995532e-01 -5.02513051e-01 -1.74865738e-01 -3.92701030e-02
 -2.98582435e-01  3.58831465e-01  1.01571672e-01 -6.25562370e-02
  2.17470899e-03  2.56856084e-01  2.37479284e-01 -1.20685086e-01
  8.93305615e-02  4.88517016e-01 -1.10994324e-01  4.03382987e-01
 -2.90449262e-01 -5.08192219e-02 -4.02766079e-01  1.05640978e-01
  8.13126639e-02 -3.37840468e-01  7.52011836e-02  2.22445935e-01
  1.39208302e-01 -2.37679984e-02  1.74810559e-01  2.04961047e-01
  1.04100905e-01  7.92236328e-02 -1.55645795e-02 -1.53578818e-01
  5.49093902e-01 -3.41579691e-02 -3.34830582e-02  4.26288843e-01
 -2.37351775e-01 -1.39302522e-01  2.10624069e-01  4.82507169e-01
  2.90310949e-01  3.10580805e-02 -2.32829273e-01 -4.58116531e-01
  3.86867523e-01  7.98933804e-02 -1.75435632e-01 -8.91296715e-02
 -3.78973037e-02  1.14862777e-01 -1.04430504e-01 -1.58199072e-02
 -1.39936328e-01 -1.40762955e-01  1.56877190e-02 -1.86088115e-01
  2.52276599e-01  6.23653829e-02  9.98080820e-02  1.76052630e-01
  1.29170984e-01  2.58907974e-01 -4.83827412e-01 -2.96015501e-01
 -1.77858546e-02 -2.48708993e-01 -1.52387202e-01  3.28507982e-02
 -2.45967776e-01  1.13710061e-01 -1.64529040e-01  1.26055414e-02
  3.11319232e-01 -5.48501238e-02  2.22507417e-01  5.24199903e-01
  1.70417815e-01  2.38492832e-01 -2.76805740e-03 -2.36604456e-02
 -3.64825428e-01 -2.23778576e-01 -2.25839123e-01 -4.14919972e-01
 -2.79537141e-01  1.26919165e-01 -3.17079216e-01 -6.04757667e-01
  2.28317022e-01 -5.04320636e-02 -8.47326666e-02 -4.44818437e-01
 -3.07953171e-02  3.54624420e-01  5.25871992e-01  7.57871866e-01
 -2.68694401e-01  3.46950561e-01  1.77644417e-01  9.72827077e-02
  5.37243523e-02  4.77980822e-01  2.30647758e-01  5.90117369e-03
 -4.16567981e-01 -6.95007861e-01 -1.23836815e-01  1.98243991e-01
 -7.06176162e-02 -2.13057369e-01  7.65971690e-02  2.14412227e-01
 -7.60498643e-02  3.63708436e-02  3.21908575e-03 -9.57883671e-02
 -3.51705849e-01  1.12175941e-01 -8.95470455e-02  1.94474161e-01
  2.78246701e-01  2.62936633e-02  4.99461032e-02 -8.48360360e-04
  1.80477817e-02 -3.34764242e-01  1.81437507e-01  2.18181424e-02
  3.55111748e-01 -5.21945715e-01  2.33904034e-01 -8.02035093e-01
  7.16581568e-02  5.14755607e-01  2.96455771e-01 -1.51428252e-01
  7.27200806e-02  2.59340517e-02 -8.25268775e-02  4.32858579e-02
 -1.12067625e-01  2.65902162e-01 -2.80331314e-01  3.87364298e-01
  2.18709465e-02 -7.03169703e-02 -4.03001666e-01  4.02570724e-01
  4.07450795e-02 -2.38652676e-01 -7.42821768e-03  1.56389058e-01
 -1.53050467e-01 -1.94112480e-01  3.58439237e-01 -2.71879703e-01
 -6.39228970e-02  3.52790296e-01 -5.70108183e-02  7.86184549e-01
 -1.69749558e-01 -6.35436848e-02  1.51467472e-01 -1.01671100e-01
 -3.19143116e-01  1.66337758e-01  2.43871540e-01 -3.57103914e-01
 -8.25631693e-02 -3.12767997e-02 -4.86877412e-02 -2.58544087e-01
  2.01741397e-01 -1.77318268e-02  9.29414481e-02 -1.59284860e-01
  1.61364064e-01  6.48130625e-02 -3.44861329e-01  2.83765912e-01
  2.72812784e-01  4.98672575e-03  1.20170340e-02  4.98223722e-01
 -9.99198705e-02  5.60091794e-01 -5.99464774e-01 -2.01302528e-01
  2.52134234e-01  2.83680502e-02 -5.96507132e-01 -5.65699816e-01
 -1.72760427e-01  4.91510257e-02  3.33130777e-01  3.10039759e-01
  4.26324189e-01 -3.89688432e-01  1.63711637e-01 -1.15466285e-02
  9.37906280e-02 -4.98128206e-01  2.76022553e-01  4.68970954e-01
 -2.63408460e-02  1.32029563e-01  5.54370023e-02 -2.33551815e-01
 -2.79053096e-02 -1.13591701e-01 -2.88247943e-01  1.08910296e-02
 -1.15565121e-01 -4.57522005e-01  7.56688863e-02 -3.36398274e-01
 -4.58425209e-02  3.61060798e-01  2.89117396e-01 -3.17457885e-01
  6.43984452e-02 -3.84594724e-02  4.85786021e-01 -7.85901025e-03
 -9.87214297e-02  2.76639443e-02  3.77594769e-01 -2.95074821e-01
  3.31165791e-02 -3.09256583e-01 -6.32182717e-01  3.56935322e-01
  1.58197567e-01 -9.40008238e-02  1.33578777e-01  6.44106120e-02
  6.53167590e-02  1.31806895e-01 -3.55796590e-02 -2.53752738e-01
  3.33170354e-01 -1.87259525e-01 -1.46459788e-01  3.83968316e-02
  2.98999306e-02 -3.92167568e-01 -4.91092056e-02  3.30750495e-02
  4.53215003e-01  1.06078878e-01  8.69759321e-01  1.71995550e-01
 -3.48291583e-02  4.62991416e-01 -2.60344684e-01 -1.94131345e-01
 -7.96474218e-02  3.62255365e-01  1.07592642e-01 -1.54286206e-01
  9.32028145e-02  9.13475901e-02  2.59814143e-01 -1.08977742e-01
 -2.56845117e-01  4.55660284e-01 -3.95087630e-01  2.04376608e-01
  2.32090399e-01  4.07136619e-01 -7.90770575e-02 -3.35299551e-01
 -2.89838072e-02 -1.92687541e-01  1.35002851e-01  4.13209558e-01
 -2.89482951e-01  1.99145645e-01 -3.36689353e-01  2.35389993e-01
  1.10274307e-01  1.58001527e-01 -3.20434421e-01 -3.16185504e-02
  4.16228592e-01 -2.61506677e-01  2.30674684e-01  3.15345615e-01
  4.72290903e-01  4.29894537e-01 -5.29834032e-02 -5.32961562e-02
 -3.22642457e-03 -7.37490281e-02  2.45461062e-01 -3.79402265e-02
  4.63675022e-01  1.27441615e-01 -4.48292494e-01 -6.31407022e-01
  2.17889503e-01 -2.56648928e-01  1.12415493e-01 -1.47205070e-02
  6.94497675e-02 -5.38446069e-01  1.12854846e-01 -3.40423942e-01
  3.32585514e-01 -8.59641656e-02 -1.29892007e-01  5.44784784e-01
  4.58067417e-01  2.41355062e-01 -2.90794462e-01  1.69152796e-01
 -3.31463754e-01  9.12528485e-02  1.64617434e-01  2.34245837e-01
  4.56990264e-02 -2.81606019e-01 -3.91428620e-02 -1.02454722e-01
 -2.58706864e-02  2.17199892e-01 -2.72554219e-01  2.81216130e-02
 -1.65122718e-01  1.33656323e-01 -2.47554913e-01 -1.70205086e-01
  1.38237923e-01 -6.62020668e-02  2.39721894e-01  3.55733335e-01
  2.08801419e-01 -4.04179096e-01 -3.69826630e-02  3.32980081e-02
  9.77199227e-02 -1.16592735e-01  4.17290092e-01 -2.16015130e-01
  1.79641515e-01  2.17815474e-01  2.58922994e-01  8.34177136e-02
  2.20784783e-01 -3.81311238e-01  2.41683736e-01  6.85266405e-02
 -2.16738135e-01  3.35946113e-01 -7.43587688e-02 -1.58941165e-01
 -2.11179435e-01  1.17991623e-02 -1.38160571e-01  6.50107622e-01
  3.59275758e-01  1.05014425e-02 -1.27856225e-01 -6.95535764e-02
 -3.59569013e-01 -5.08998930e-02  1.95898563e-01  1.22812159e-01
 -4.15192872e-01 -2.03394562e-01 -5.54683745e-01  1.99209958e-01
 -1.57138497e-01 -3.77341032e-01  3.01473260e-01  2.12829962e-01
 -6.41221851e-02  2.48649627e-01  4.40201759e-01  1.38344318e-01
 -2.55446546e-02 -1.34587102e-02 -1.26526237e-01  3.49932551e-01
  1.38292685e-02  1.43540084e-01  3.77288520e-01 -3.06747090e-02
 -2.65326858e-01  3.49399954e-01  2.69821342e-02 -6.05806351e-01
  1.09766334e-01 -2.30248660e-01  5.79798967e-02  7.50212967e-02
 -4.12930697e-01  1.08658269e-01  1.85394377e-01  4.59898680e-01
 -2.76179105e-01  7.30650872e-02 -1.51419610e-01 -4.96672839e-02
 -9.89105701e-02 -2.79258452e-02  1.17567897e-01 -1.15750566e-01
  3.05814505e-01  7.07182884e-02 -1.02500930e-01  4.93953377e-02
  1.07045174e-01 -1.10086324e-02 -1.30033001e-01 -6.39968216e-01
 -4.59676757e-02  6.42691851e-02 -3.92065018e-01  1.60132185e-01
  9.65939611e-02 -2.20646992e-01  1.16675049e-01 -2.99314260e-01
  3.36747289e-01  2.01538742e-01 -4.12586868e-01 -2.20030785e-01
  2.04931036e-01  2.84056067e-01 -1.64403245e-01 -1.51508689e-01
 -1.49686784e-01  1.88285321e-01 -6.05063587e-02 -7.92288184e-02
 -5.35333633e-01  3.94532651e-01  4.14877795e-02  5.21679521e-01
 -6.05955601e-01 -1.50905669e-01 -5.58237359e-02 -7.48628452e-02
 -5.11831120e-02 -1.69200689e-01  1.93645328e-01  2.96529651e-01
 -4.97085899e-01 -4.64146197e-01  5.56705184e-02 -1.10063441e-01
  2.24806666e-01  1.26205280e-01 -2.16393173e-01  2.84763873e-02
 -1.44507334e-01  3.03576946e-01  1.83223516e-01  2.21915990e-01
  1.67538077e-01 -5.46143837e-02 -9.35572833e-02  4.11497831e-01
 -2.19875455e-01  2.48574615e-01  5.38988233e-01  3.73820603e-01
 -5.27511835e-01  1.89829454e-01 -8.23630393e-02  5.13974577e-02
 -8.09441879e-03  4.48859967e-02 -3.28678131e-01 -3.76922399e-01
  1.04962923e-01  1.72866225e-01 -1.31757498e-01  2.39172041e-01
  1.17602587e-01  2.66395975e-03 -3.91802192e-03  4.03785184e-02
 -1.56623535e-02  1.61842227e-01  8.81804675e-02  2.45296866e-01
  3.50600362e-01 -1.47578046e-01 -1.81424975e-01  2.80733317e-01
  2.37177741e-02  4.58522066e-02 -1.58025175e-01  3.76045942e-01
  3.50356139e-02 -1.87503636e-01 -1.45961903e-02  7.27614909e-02
  1.08325824e-01 -1.66855559e-01 -3.38152587e-01 -3.73858809e-01
  1.40752569e-01 -8.91244970e-04  3.83042485e-01 -2.82422304e-01
  5.86264431e-01 -1.24353096e-01 -2.12296188e-01 -7.47978315e-02
  1.07650244e+00 -1.33813441e-01  3.27193320e-01 -3.01860631e-01
 -1.24521516e-02 -6.20690212e-02 -2.28400946e-01  1.65228605e-01
  1.47601962e-01  4.43962663e-01 -2.62897730e-01  5.42852104e-01
  1.47163123e-01 -3.40953827e-01  3.01790610e-03  1.07642986e-01
  2.71898583e-02 -8.95942301e-02  5.63682429e-03 -6.33921660e-03
  1.50426984e-01  1.04837641e-01  1.35604173e-01 -1.85688987e-01
 -1.41666681e-01  1.24196291e-01 -1.54909000e-01 -2.74007738e-01
  2.29492307e-01  2.43421361e-01 -2.51688361e-01  1.52299777e-01
 -7.35256970e-01 -6.45652294e-01  2.99205780e-01 -3.08713205e-02
  2.07244545e-01  7.41405010e-01 -2.22395197e-01 -1.34885550e-01
  1.31139129e-01 -1.58971041e-01 -1.67448923e-01 -1.49115801e-01
  4.29923460e-02  3.41054387e-02  4.32641022e-02 -3.71796042e-02
 -6.01555742e-02  1.06010303e-01 -4.90192398e-02  1.88735723e-01
 -1.88036822e-04 -1.01033069e-01 -4.19977047e-02  9.03141424e-02
  5.10377213e-02 -1.47288680e-01  3.69334817e-01  9.54167694e-02
  3.11670810e-01 -1.48377866e-01  2.12052733e-01  1.31590158e-01
 -2.93996066e-01 -3.66018325e-01 -1.50714740e-01 -1.27935052e-01
  7.42968023e-02 -2.29460433e-01  1.91094160e-01  2.98675001e-01
 -3.23937953e-01 -2.02176180e-02  5.50282151e-02 -4.21835840e-01
  6.49057254e-02 -2.96554327e-01 -6.58450603e-01  2.98512802e-02
  1.35273457e-01 -8.06865543e-02  1.64110512e-01 -1.44951567e-01
  5.12432575e-01 -1.22045122e-01  1.21498413e-01  4.87068534e-01
  5.82108237e-02 -4.40166220e-02  1.65508747e-01 -3.43939960e-01
  3.79636347e-01 -2.13832378e-01 -3.66467535e-01  2.50098825e-01
  3.76847804e-01  2.40191936e-01  1.20591618e-01  2.68141568e-01
  4.55703810e-02  2.50059776e-02 -1.22154027e-01 -1.30520537e-01
  4.62711543e-01  1.59966618e-01  2.46176630e-01 -1.75074562e-01
 -5.02494574e-02  2.10241415e-02  2.22920746e-01 -2.28881896e-01
  3.51574659e-01 -6.20364904e-01  8.06480646e-02 -3.37755799e-01
 -1.99067041e-01 -2.35080838e-01 -9.02254134e-03  6.81487843e-02
  3.29207569e-01  4.19311970e-01  3.31066757e-01  1.63929537e-01
  5.74140549e-01  2.01820433e-01  6.22732751e-02 -3.30051124e-01
 -1.08788662e-01 -1.42683178e-01 -2.36989498e-01  6.04064018e-03
 -6.80853367e-01  1.84271842e-01 -8.69475156e-02 -8.85422528e-02
  4.08290684e-01 -7.97566250e-02 -1.88284561e-01  1.23973668e-01
  1.86295509e-01  1.21311396e-01  3.88865292e-01  1.39362767e-01
  3.85895371e-02 -1.93097234e-01 -1.28459290e-01 -1.89476401e-01
  4.53985333e-01 -3.51182520e-01  1.30494550e-01 -7.25049525e-02
  1.16245717e-01  2.88760453e-01  3.41427028e-01 -6.35610297e-02
  3.10492665e-01 -1.07027918e-01 -7.59731159e-02 -3.03772777e-01
 -3.34218591e-02  3.12502623e-01  3.06917250e-01  6.78895488e-02
  2.77974844e-01 -1.73751205e-01  2.04219241e-02  1.44605666e-01
 -1.54033229e-01 -1.39345706e-01 -5.12519069e-02 -1.50623217e-01
 -5.80649003e-02 -1.53447455e-02  3.92431974e-01 -3.46572474e-02
 -2.30048224e-01  2.86687594e-02  5.35736382e-01  9.73976329e-02
 -2.63898045e-01 -2.94696987e-01 -1.29104722e-02  8.79283547e-02
 -2.41371691e-01  1.56506985e-01 -5.98084815e-02  2.00923800e-01
  1.38799608e-01 -3.58136237e-01 -9.67375785e-02  4.09184068e-01
 -3.70045424e-01 -1.21359967e-01  1.35157937e-02  5.07986367e-01
  2.42715225e-01 -1.07921071e-01 -2.32076377e-01 -2.37587318e-01
 -1.89466640e-01 -1.06891558e-01  2.73447812e-01 -3.13104451e-01
  2.27655023e-01 -1.30723149e-01 -2.68680215e-01 -3.32032174e-01
 -4.63051885e-01  1.51375175e-01  1.04230028e-02 -2.62148976e-01
 -6.98149741e-01 -5.50383609e-03  4.97625500e-01 -8.72195736e-02
  7.73726881e-01 -1.57951146e-01  3.47149447e-02  4.76650372e-02
  2.35594824e-01  2.76513338e-01 -9.14233103e-02 -5.71362115e-02
  5.29697299e-01 -2.01765578e-02  5.42600989e-01  1.14656672e-01]"
Reinforcement Learning,"Reinforcement Learning ¶ In machine learning, supervised is sometimes contrasted with unsupervised learning. This is a useful distinction, but there are some problem domains that have share characteristics with each without fitting exactly in either category. In cases where the algorithm does not have explicit labels but does receive a form of feedback, we are dealing with a third and distinct paradigm of machine learning - reinforcement learning. Programmatic and a theoretical introduction to reinforcement learning:https://spinningup.openai.com/ There are different problem types and algorithms, but all reinforcement learning problems have the following aspects in common: an agent - the algorithm or “AI” responsible for making decisions an environment , consisting of different states in which the agent may find itself a reward signal which is returned by the environment as a function of the current state actions , each of which takes the agent from one state to another a policy , i.e. a mapping from states to actions that defines the agent’s behavior The goal of reinforcement learning is to learn the optimal policy, that is the policy that maximizes expected (discounted) cumulative reward. Many RL algorithms will include a value function or a Q-function. A value function gives the expected cumulative reward for each state under the current policy In other words, it answers the question, “If I begin in state \(i\) and follow my policy, what will be my expected reward?” In most algorithms, expected cumulative reward is discounted by some factor \(\gamma \in (0, 1)\) ; a typical value for \(\gamma\) is 0.9. In addition to more accurately modeling the behavior of humans and other animals, \(\gamma < 1\) helps to ensure that algorithms converge even when there is no terminal state or when the terminal state is never found (because otherwise expected cumulative reward may also become infinite). Note on Terminology ¶ For mostly historical reasons, engineering and operations research use different words to talk about the same concepts. For example, the general field of reinforcement learning itself is sometimes referred to as optimal control, approximate dynamic programming, or neuro-dynamic programming. 1 Eploration vs. Exploitation ¶ One dilemma inherent to the RL problem setting is the tension between the desire to choose the best known option and the need to try something new in order to discover other options that may be even better. Choosing the best known action is known as exploitation, while choosing a different action is known as exploration. Typically, this is solved by adding to the policy a small probability of exploration. For example, the policy could be to choose the optimal action (optimal with regard to what is known) with probability 0.95, and exploring by randomly choosing some other action with probability 0.5 (if uniform across all remaining actions: probability 0.5/(n-1) where n is the number of states). MDPs and Tabular methods ¶ Many problems can be effectively modeled as Markov Decision Processes (MDPs), and usually as Partially Observable Markov Decision Processes (POMDPs) . That is, we have a set of states \(S\) a set of actions \(A\) a set of conditional state transition probabilities \(T\) a reward function \(R: S \times A \rightarrow \mathbb{R}\) a set of observations \(\Omega\) a set of condition observation probabilities \(O\) a discount factor \(\gamma \in [0]\) Given these things, the goal is to choose the action at each time step which will maximize \(E \left[ \sum_{t=0}^{\infty} \gamma^t r_t \right]\) , the expected discounted reward. Monte Carlo methods ¶ One possible approach is to run a large number of simulations to learn \(p^*\) . This is good for cases where we know the environment and can run many simulations reasonably quickly. For example, it is fairly trivial to compute an optimal policy for the card game 21 (blackjack) by running many simulations, and the same is true for most simple games. Temporal-Difference Learning ¶ TODO Planning ¶ TODO On-Policy vs. Off-Policy Learning ¶ TODO Model-Free vs. Model-Based Approaches ¶ TODO Imitation Learning ¶ TODO Q-Learning ¶ Q Learning, a model-free RL algorithm, is to update Q values to the optimal by iteration. It is an off-policy method that select the optimal action based on the current estimated Q* and does not follow the current policy. The algorithm of Q Learning is: Initialize t = 0. Start at initial state s t = 0. The agent chooses a t = ɛ-greedy action. For given a t , the agent retrieves the reward r t+1 as well as the next state s t+1 . Get (but do not perform) the next action a t+1 = argmax a∈A Q(s t+1 , a). Compute the TD target y t = r t+1 + γ · Q(s t+1 , a t+1 ), where γ is the discounted factor. Calculate the TD error δ = y t − Q(s t , a t ). Update Q(s t , a t ) ← Q(s t , a t ) + α t · δ, where α t is the step size (learning rate) at t. Update t ← t + 1 and repeat step 3-9 until Q(s, a) converge. Epsilon-Greedy Algorithm \[\begin{split}\begin{equation} a_{t} = \begin{cases} argmax_{a∈A} & \text{if } p = 1 - e \\ random\, action\ &\text{otherwise} \end{cases} \end{equation}\end{split}\] The agent performs optimal action for exploitation or random action for exploration during training. It acts randomly in the beginning with the ɛ = 1 and chooses the best action based on the Q function with a decreasing ɛ capped at some small constant not equal to zero. Q-Table / Q-Matrix a 1 a 2 … a n s 1 Q (s 1 , a 1 ) Q (s 1 , a 2 ) … Q (s 1 , a 3 ) s 2 Q (s 2 , a 1 ) Q (s 2 , a 2 ) … Q (s 2 , a 3 ) … … … … … s m Q (s m , a 1 ) Q (s m , a 2 ) … Q (s m , a 3 ) It’s a lookup table storing the action-value function Q(s, a) for state-action pairs where there are M states and n actions. We can initialize the Q(s, a) arbitrarily except s = terminal state. For s = final state, we set it equal to the reward on that state. Reasons of using Q Learning are: It’s applicable for the discrete action space of our environment. When we don’t have the true MDP model: transitional probability matrix and rewards (Model-Free Setting). It’s able to learn from incomplete episodes because of TD learning. Drawbacks of Q Learning are: When the state space and action space are continuous and extremely large, due to the curse of dimensionality, it’s nearly impossible to maintain a Q-matrix when the data is large. Using a Q-table is unable to infer optimal action for unseen states. Deep Q-Learning ¶ Deep Q-learning pursues the same general methods as Q-learning. Its innovation is to add a neural network, which makes it possible to learn a very complex Q-function. This makes it very powerful, especially because it makes a large body of well-developed theory and tools for deep learning useful to reinforcement learning problems. Examples of Applications ¶ Getting Started With OpenAI Gym: Creating Custom Gym Environments What Is Q-Learning: The Best Guide To Understand Q-Learning (Simplilearn) REINFORCEMENT LEARNING (DQN) TUTORIAL (PyTorch) QWOP Game AI (DQN/DDQN) Links ¶ Practical Applications of Reinforcement Learning (tTowards Data Science) Reinforcement learning (GeeksforGeeks) Reinforcement Learning Algorithms: An Intuitive Overview (SmartLabAI) Q-learning(Wikipedia) Epsilon-Greedy Algorithm in Reinforcement Learning (GeeksforGeeks) OpenAI Gym Documentation Stable-Baselines3 Documentation David Silver Teaching Material References [1] https://en.wikipedia.org/wiki/Reinforcement_learning#Introduction [2] Reinforcement Learning: An Introduction (Sutton and Barto, 2018) [3] Silver, David. “Lecture 5: Model-Free Control.” UCL, Computer Sci. Dep. Reinf Learn. Lect. (2015): 101-140. [4] En.wikipedia.org. 2022. Q-learning - Wikipedia. [online] Available at: < https://en.wikipedia.org/wiki/Q-learning > [Accessed 15 June 2022].","[ 9.20573920e-02  7.70992637e-02 -1.05083928e-01  1.02175653e-01
  9.44592357e-01  2.59984136e-01  2.73915768e-01  1.62575334e-01
  1.00713380e-01  3.86172116e-01  2.87511587e-01  1.53296590e-01
  7.04080015e-02 -6.38862029e-02 -1.80923760e-01 -8.46991017e-02
 -2.11191490e-01  3.33427563e-02  1.29262377e-02 -1.94285512e-01
 -7.76959956e-02  1.76023263e-02 -3.58432472e-01 -6.48499966e-01
  1.43798113e-01  1.70516640e-01  3.54861170e-01  1.70498520e-01
 -4.82186019e-01  1.35764062e-01 -1.18381299e-01 -1.17861904e-01
 -2.90636327e-02  2.20813245e-01  1.19065400e-02  2.49205977e-01
  6.14091754e-04  1.73632741e-01 -2.24700600e-01 -4.97949086e-02
  4.28428240e-02  3.57367158e-01 -7.20232725e-02  2.71903545e-01
  1.16178006e-01  1.06049128e-01 -4.63336408e-01 -3.01276267e-01
 -1.13061868e-01  1.10146821e-01  6.05238229e-02  1.86771184e-01
 -4.32521880e-01  5.32549322e-02 -6.33402634e-03  2.84521073e-01
  1.17596507e-01 -6.63007021e-01  4.57664207e-02 -3.26999053e-02
  7.40945637e-01 -1.19404681e-01  1.56954557e-01  6.62886500e-01
 -9.25297588e-02 -2.57490486e-01  5.14955699e-01  4.89720792e-01
 -1.67606711e-01 -1.13521079e-02 -3.38383794e-01 -3.35499406e-01
  2.52555847e-01 -2.38994926e-01  2.17505485e-01 -2.54339635e-01
 -4.11848545e-01 -2.20590457e-03 -2.84741342e-01  8.40466172e-02
 -1.49216875e-01  1.23949014e-01 -4.45696414e-02 -2.17868701e-01
 -2.18555093e-01  6.48244679e-01 -1.83223933e-01 -5.87804914e-01
  1.01182140e-01  1.36187464e-01 -6.50532246e-01 -2.22157121e-01
 -1.79142401e-01  7.04411417e-02  3.18187028e-02  4.25424635e-01
 -5.13289869e-02 -5.76884225e-02 -4.73052301e-02  1.58063650e-01
  2.45722964e-01 -2.21491605e-01  5.14753222e-01 -1.51503101e-01
  2.02703089e-01  5.32473445e-01  2.27257237e-02  1.91086784e-01
 -1.23161286e-01  2.29569618e-02  2.04028040e-01  1.32640675e-01
  3.17458659e-01  8.18902999e-02  2.21418217e-03 -9.33504626e-02
  1.20223016e-01  2.20063433e-01 -1.57063767e-01  7.79970884e-01
 -1.74265534e-01 -1.62186176e-01 -2.44234383e-01  3.93941104e-01
 -2.91498065e-01 -2.55564421e-01  2.38833278e-01  1.22175924e-02
 -1.88116357e-01 -1.77521855e-01 -3.45414042e-01  1.74594909e-01
 -2.52736926e-01 -6.90013766e-02 -1.21604390e-01 -1.28948167e-01
 -1.92251414e-01  4.34741843e-03 -4.46877368e-02  1.95500508e-01
 -3.89185250e-01  3.74728516e-02  4.78923619e-02 -1.32972747e-01
  1.90881401e-01 -1.45151585e-01  1.97059572e-01  2.37868816e-01
  1.97612196e-01 -1.55226681e-02 -2.54380941e-01  2.60464966e-01
  2.05989003e-01 -2.45453030e-01 -9.10238773e-02  2.35406131e-01
 -1.12132281e-01  2.75871933e-01  4.85746652e-01 -4.11141157e-01
 -4.10584733e-02  6.15251958e-02  1.39642343e-01  6.91400096e-02
  2.55813360e-01 -3.43039662e-01 -5.48509300e-01 -3.66042376e-01
 -2.21554652e-01  1.32422954e-01 -6.20559826e-02  2.89186418e-01
  2.22823501e-01  5.64365424e-02 -3.57084751e-01  1.57485515e-01
 -3.79851133e-01 -1.30784750e-01  6.94867820e-02 -5.21281771e-02
  7.27438256e-02 -6.95817396e-02  2.60567605e-01  1.88087955e-01
  2.91919470e-01  4.82555032e-01  2.03063145e-01  5.01141191e-01
  2.14436382e-01  7.27346726e-03 -2.39171371e-01  1.69798151e-01
 -3.53844196e-01 -4.68295217e-01 -6.58858716e-02  3.63281190e-01
  3.42164785e-01  2.37449676e-01 -1.55568019e-01 -6.75802529e-02
  2.13577732e-01 -3.17829490e-01 -1.50539830e-01  1.18391970e-02
 -1.68410346e-01 -9.47258845e-02  6.32699579e-02 -4.60162461e-02
  3.67169946e-01  7.30439872e-02  4.47536707e-02  6.23816013e-01
 -1.72463298e-01  8.81576687e-02 -4.24212158e-01 -7.33242333e-02
  1.56130478e-01  7.13320434e-01 -4.94011253e-01  5.50175235e-02
  1.58770289e-03 -7.12702870e-02 -7.65534490e-02 -3.09292227e-01
  3.82966734e-03 -1.52246654e-01 -2.26204962e-01 -1.16613552e-01
  9.01755542e-02 -4.67165351e-01 -2.32702773e-02  5.89303207e-03
 -4.79712427e-01 -1.44495219e-01 -1.23864889e-01  1.00936554e-01
 -7.78977051e-02  1.74067795e-01 -2.53787011e-01  8.91220868e-02
 -2.29898065e-01 -6.46998510e-02  6.46165982e-02 -3.33235681e-01
  1.59048498e-01  1.44706845e-01  2.01031879e-01  4.49802727e-02
  1.86179634e-02 -3.98288906e-01  2.41241306e-01 -3.44000161e-01
 -1.56975061e-01  8.59587491e-02  4.87184167e-01 -4.01329607e-01
 -1.70913279e-01 -1.51546478e-01 -1.85198665e-01  3.09864223e-01
 -3.88062179e-01 -2.10344806e-01 -3.14377606e-01 -1.24170423e-01
  4.32858974e-01  5.30849118e-03 -9.07539669e-03 -4.28320616e-02
  1.31631389e-01 -1.69964015e-01 -3.10756601e-02 -8.59342739e-02
  6.79701418e-02 -9.42667872e-02 -3.90137732e-02 -6.39319047e-03
  1.46878764e-01 -3.32068801e-01  4.28347588e-01  1.95112318e-01
  2.09595695e-01  3.45739052e-02  1.73948575e-02 -3.10659260e-01
  5.86358681e-02 -2.29247585e-01  3.60576540e-01 -7.16037154e-01
  1.09880060e-01  3.89513791e-01  1.72936410e-01  1.83575600e-01
  7.80332014e-02 -1.86865553e-01 -3.29758041e-04  8.14710110e-02
  1.75988421e-01 -5.54572344e-01  1.66481197e-01  4.14136890e-03
 -5.48097968e-01  3.80417824e-01  5.84925950e-01 -1.19090021e-01
 -3.20310384e-01 -4.74661767e-01 -1.91948622e-01  2.35910341e-01
 -6.81222528e-02 -3.21011871e-01 -2.23585427e-01 -1.23161316e-01
  2.93072283e-01  7.40986615e-02 -6.48667514e-02  3.98992538e-01
  2.34174579e-01 -2.39008844e-01 -4.05273177e-02 -1.91479903e-02
  2.57614404e-01 -1.60915554e-01 -1.30470768e-01  2.79077049e-03
  3.55407357e-01 -3.02049696e-01 -2.36634701e-01 -4.39686120e-01
  8.41524266e-03 -5.08878589e-01  3.18029702e-01  2.04120800e-02
 -6.57018423e-02  1.76850170e-01  9.95283648e-02 -3.28362435e-01
 -1.01361342e-01 -5.33465371e-02 -8.66884589e-02  2.31074858e-02
  7.48582721e-01  4.51027781e-01  2.46215742e-02 -1.31821766e-01
 -2.29122669e-01 -1.09421294e-02 -3.57711077e-01  1.36303335e-01
 -2.45146140e-01 -2.52286047e-01  3.35705698e-01 -8.45511351e-03
 -7.73843825e-02  3.94293368e-01  1.98804528e-01 -4.82337296e-01
 -2.39468277e-01  5.01410365e-02  2.33355850e-01 -3.53051066e-01
 -3.19804579e-01 -7.66099319e-02 -4.70487736e-02 -3.50860715e-01
  1.45609349e-01 -4.26986516e-01 -2.78743714e-01 -5.24164289e-02
 -3.76307070e-01 -2.95920491e-01  2.90267587e-01 -2.45537207e-01
  9.55218077e-02 -2.86499262e-01  3.53207409e-01 -1.02814898e-01
 -2.33839869e-01  5.25113866e-02 -2.33148247e-01  9.70034003e-02
 -1.54805660e-01  1.46702737e-01 -4.09353524e-02 -2.07487375e-01
 -3.17498207e-01  1.20274603e-01 -9.34632570e-02 -3.42284024e-01
  3.58944714e-01 -1.53383374e-01 -7.59139583e-02 -1.48460358e-01
  6.01205677e-02 -8.93441737e-02  5.82837965e-03  2.21213773e-02
 -1.30990833e-01 -4.14359689e-01  1.47630852e-02  3.60935688e-01
 -3.58303711e-02 -1.21522866e-01  2.55604506e-01  3.43964159e-01
  7.31830895e-02  3.29438686e-01 -5.12731299e-02 -3.47086601e-02
  2.35110596e-01  1.42146319e-01 -7.02449121e-03  5.63495159e-02
  1.07145965e-01 -2.26951241e-01  6.43888950e-01  7.61051551e-02
 -3.09919044e-02  4.01405901e-01 -3.01613808e-01 -3.83228511e-01
 -4.70762737e-02 -3.31887931e-01 -1.24454550e-01 -2.60566533e-01
 -8.32100511e-02  2.34092847e-01  1.89881116e-01  1.06656432e-01
  3.63530099e-01  1.67400151e-01 -1.20779634e-01  6.88310042e-02
  6.22795410e-02  1.28680319e-01  7.35557973e-02 -1.53505370e-01
  1.81535006e-01 -1.19684391e-01  1.88756973e-01 -3.84153008e-01
  4.53986883e-01  3.39102805e-01  2.10010231e-01  9.34933946e-02
  8.38236809e-02 -2.28578411e-02 -4.24807489e-01  5.51496185e-02
  5.68518676e-02  2.46347874e-01  2.02317864e-01 -7.18223825e-02
 -3.62892896e-01 -1.71624534e-02 -2.72954822e-01 -3.08988452e-01
  1.17077649e-01 -7.13441893e-02 -8.45385194e-02 -2.13618930e-02
 -1.45465788e-03  1.13236472e-01  2.25426048e-01  2.89665759e-01
 -2.47118980e-01  1.88063569e-02 -7.87957944e-03  3.84110272e-01
  1.60190880e-01  2.26956736e-02 -1.81352407e-01 -3.05003345e-01
  5.19484952e-02  2.09620684e-01  1.99747175e-01  4.56849858e-02
  9.54478681e-02 -2.04603970e-01  1.48147583e-01 -2.96740651e-01
  6.33887723e-02 -9.49246287e-02  6.82720318e-02  1.11221984e-01
  2.50411965e-02  2.40845546e-01  2.10123956e-01 -2.01570183e-01
  9.95029286e-02  2.29096804e-02 -3.59468162e-02  6.08565509e-01
 -6.45115273e-03  3.16643178e-01  4.09689605e-01  2.51020014e-01
 -5.31129956e-01  2.46842012e-01  2.25853905e-01  1.44719079e-01
 -7.61163831e-02 -1.19695645e-02 -1.76830366e-02 -1.47681400e-01
  1.33022964e-01  4.62481737e-01 -3.19744110e-01  1.79662198e-01
  6.75563589e-02  5.13555892e-02  4.31531705e-02  4.61482108e-02
  4.89253551e-02  6.10223264e-02  1.80901498e-01  4.72766757e-01
 -1.73986584e-01  1.80105448e-01  1.27736598e-01  2.36556455e-01
  2.76772343e-02 -2.56443918e-01  1.88060522e-01 -1.32728070e-01
 -6.06681630e-02 -2.81551838e-01 -1.73044819e-02  2.37369478e-01
 -2.66430467e-01 -1.92748666e-01 -2.05800623e-01 -1.54117018e-01
  1.25440776e-01  1.30566239e-01  2.07692325e-01 -2.00465426e-01
  3.67463976e-01  1.71083152e-01  5.67489266e-01 -1.57092258e-01
  1.33824319e-01  1.40534136e-02  3.49268496e-01 -1.58732340e-01
 -5.20061970e-01  4.10671420e-02  4.76441592e-01  1.39212132e-01
  9.53074321e-02 -2.63280243e-01  5.50076365e-02  5.60773373e-01
 -8.79639387e-02 -2.73295045e-01  4.05152917e-01  1.92171425e-01
  2.52646357e-01 -9.50320512e-02 -5.29413149e-02  4.62890387e-01
  1.42410770e-01 -2.52306700e-01 -2.17452813e-02  2.18376666e-01
 -8.76371711e-02  1.41171426e-01  8.42551515e-02 -1.24501407e-01
  1.86824530e-01  1.66134164e-02  7.55906254e-02  2.15526760e-01
 -2.79293388e-01 -2.69963801e-01 -1.69301704e-01  1.44176513e-01
 -1.06178239e-01  4.95668173e-01  4.60353792e-02  7.17708543e-02
 -3.46050747e-02  3.67928326e-01  3.97924006e-01  4.24060822e-01
  2.92737722e-01  6.53410017e-01 -1.04245760e-01  2.47585028e-01
  1.39493123e-02  6.75589740e-02 -1.61091745e-01  1.05765656e-01
  6.06189594e-02 -1.03919871e-01 -1.04913145e-01 -3.90426889e-02
  7.51233697e-02 -8.42993259e-02  1.32062435e-01  8.50029141e-02
  2.49532610e-01 -7.42165893e-02  3.86122838e-02 -2.08285138e-01
 -2.59974539e-01  2.06843019e-02  3.50880533e-01  1.40171096e-01
 -2.13688016e-01  2.23098397e-01  7.60946888e-03  3.18844676e-01
 -8.30468833e-02 -3.10607433e-01 -1.54983327e-01 -5.27569652e-01
 -2.22138256e-01 -8.22195932e-02 -2.46414959e-01  4.51593488e-01
  3.68372738e-01 -7.69235492e-02  1.65681988e-01  5.92574060e-01
 -5.54899722e-02 -1.06114358e-01  4.40760665e-02  2.35737354e-01
 -2.75434762e-01 -2.35597372e-01  1.58123989e-02 -4.35663998e-01
 -7.59283081e-04 -3.58780593e-01 -5.52609682e-01  1.53746814e-01
  2.74422646e-01  4.25189197e-01  1.93594441e-01  9.91485789e-02
  3.61416116e-02 -2.75395989e-01  2.03773111e-01 -3.54426563e-01
  4.47349027e-02  1.68723568e-01  1.37065426e-01  1.02390721e-03
 -2.20601529e-01  4.40441146e-02  2.03302562e-01 -1.88159525e-01
  3.99801075e-01 -4.22991455e-01 -2.36731023e-01  4.39632297e-01
 -5.65894246e-01 -1.20960459e-01  1.03533231e-01  3.15380156e-01
  3.70792001e-01  1.06023379e-01 -2.32898399e-01 -6.87596202e-02
 -6.09494224e-02 -2.85136968e-01  1.56010002e-01  5.18997163e-02
 -1.53181702e-01 -1.55784875e-01 -2.41818771e-01  2.18605883e-02
  2.34883130e-01  1.94190234e-01  7.85736293e-02 -3.78300458e-01
  2.52545476e-02  5.08419096e-01  5.04591987e-02  1.68949217e-01
  1.17258981e-01 -1.25867844e-01  2.52845407e-01  2.44185030e-02
  4.64493752e-01  1.93493187e-01  2.08645314e-01 -9.12175477e-02
  1.79156035e-01 -3.12076360e-01 -3.12256366e-01  2.72125542e-01
 -1.48679137e-01  4.21070814e-01  1.52229875e-01  2.79010143e-02
 -2.38164976e-01  1.78945988e-01 -7.05205947e-02 -1.34255230e-01
  1.55779555e-01  7.53529668e-02  5.30892685e-02  8.98932219e-02
  1.88381612e-01  1.15656205e-01 -3.63619700e-02  1.51366843e-02
 -1.20702684e-02 -5.89159317e-03 -1.08054355e-01  2.09129035e-01
  1.62671134e-01  1.70940459e-01 -6.94123879e-02 -2.84014016e-01
  4.69748154e-02 -9.58790183e-02  2.51110762e-01 -8.98414031e-02
  1.14122376e-01 -5.10190368e-01 -2.90142372e-02  2.71733403e-01
 -1.75888464e-01  1.91625178e-01  6.46948665e-02  2.09881738e-01
 -3.84984864e-03 -2.47986555e-01 -1.18510216e-01  1.86960578e-01
  1.29103720e-01  1.71754509e-01  4.73402679e-01  6.38203382e-01
 -2.01677531e-01 -9.13770273e-02 -2.87212551e-01 -1.29446894e-01
  2.33445585e-01 -4.66757596e-01  5.75124025e-01 -4.33138549e-01
  1.75380260e-01  1.41227514e-01 -1.14987120e-02 -1.36729598e-01
 -4.29150224e-01  1.38348848e-01  1.98175490e-01  6.88660324e-01
 -2.42851436e-01  1.52188689e-01  3.37977648e-01 -1.47267252e-01
  4.09500420e-01  5.23051098e-02 -7.34895468e-04  6.87662959e-02
  6.28005490e-02  1.63744256e-01 -9.12095085e-02  3.64360884e-02
  4.19711351e-01 -1.85219988e-01  1.60738245e-01  4.82961386e-02]"
Datasets,"Datasets ¶ Public datasets in vision, nlp and more forked from caesar0301’s awesome datasets wiki. Agriculture Art Biology Chemistry/Materials Science Climate/Weather Complex Networks Computer Networks Data Challenges Earth Science Economics Education Energy Finance GIS Government Healthcare Image Processing Machine Learning Museums Music Natural Language Neuroscience Physics Psychology/Cognition Public Domains Search Engines Social Networks Social Sciences Software Sports Time Series Transportation Agriculture ¶ U.S. Department of Agriculture’s PLANTS Database U.S. Department of Agriculture’s Nutrient Database Art ¶ Google’s Quick Draw Sketch Dataset Biology ¶ 1000 Genomes American Gut (Microbiome Project) Broad Bioimage Benchmark Collection (BBBC) Broad Cancer Cell Line Encyclopedia (CCLE) Cell Image Library Complete Genomics Public Data EBI ArrayExpress EBI Protein Data Bank in Europe Electron Microscopy Pilot Image Archive (EMPIAR) ENCODE project Ensembl Genomes Gene Expression Omnibus (GEO) Gene Ontology (GO) Global Biotic Interactions (GloBI) Harvard Medical School (HMS) LINCS Project Human Genome Diversity Project Human Microbiome Project (HMP) ICOS PSP Benchmark International HapMap Project Journal of Cell Biology DataViewer MIT Cancer Genomics Data NCBI Proteins NCBI Taxonomy NCI Genomic Data Commons NIH Microarray data or FTP (see FTP link on RAW ) OpenSNP genotypes data Pathguid - Protein-Protein Interactions Catalog Protein Data Bank Psychiatric Genomics Consortium PubChem Project PubGene (now Coremine Medical) Sanger Catalogue of Somatic Mutations in Cancer (COSMIC) Sanger Genomics of Drug Sensitivity in Cancer Project (GDSC) Sequence Read Archive(SRA) Stanford Microarray Data Stowers Institute Original Data Repository Systems Science of Biological Dynamics (SSBD) Database The Cancer Genome Atlas (TCGA), available via Broad GDAC The Catalogue of Life The Personal Genome Project or PGP UCSC Public Data UniGene Universal Protein Resource (UnitProt) Chemistry/Materials Science ¶ NIST Computational Chemistry Comparison and Benchmark Database - SRD 101 Open Quantum Materials Database Citrination Public Datasets Khazana Project Climate/Weather ¶ Actuaries Climate Index Australian Weather Aviation Weather Center - Consistent, timely and accurate weather information for the world airspace system Brazilian Weather - Historical data (In Portuguese) Canadian Meteorological Centre Climate Data from UEA (updated monthly) European Climate Assessment & Dataset Global Climate Data Since 1929 NASA Global Imagery Browse Services NOAA Bering Sea Climate NOAA Climate Datasets NOAA Realtime Weather Models NOAA SURFRAD Meteorology and Radiation Datasets The World Bank Open Data Resources for Climate Change UEA Climatic Research Unit WorldClim - Global Climate Data WU Historical Weather Worldwide Complex Networks ¶ AMiner Citation Network Dataset CrossRef DOI URLs DBLP Citation dataset DIMACS Road Networks Collection NBER Patent Citations Network Repository with Interactive Exploratory Analysis Tools NIST complex networks data collection Protein-protein interaction network PyPI and Maven Dependency Network Scopus Citation Database Small Network Data Stanford GraphBase (Steven Skiena) Stanford Large Network Dataset Collection Stanford Longitudinal Network Data Sources The Koblenz Network Collection The Laboratory for Web Algorithmics (UNIMI) The Nexus Network Repository UCI Network Data Repository UFL sparse matrix collection WSU Graph Database Computer Networks ¶ 3.5B Web Pages from CommonCrawl 2012 53.5B Web clicks of 100K users in Indiana Univ. CAIDA Internet Datasets ClueWeb09 - 1B web pages ClueWeb12 - 733M web pages CommonCrawl Web Data over 7 years CRAWDAD Wireless datasets from Dartmouth Univ. Criteo click-through data OONI: Open Observatory of Network Interference - Internet censorship data Open Mobile Data by MobiPerf Rapid7 Sonar Internet Scans UCSD Network Telescope, IPv4 /8 net Data Challenges ¶ Bruteforce Database Challenges in Machine Learning CrowdANALYTIX dataX D4D Challenge of Orange DrivenData Competitions for Social Good ICWSM Data Challenge (since 2009) Kaggle Competition Data KDD Cup by Tencent 2012 Localytics Data Visualization Challenge Netflix Prize Space Apps Challenge Telecom Italia Big Data Challenge TravisTorrent Dataset - MSR’2017 Mining Challenge Yelp Dataset Challenge Earth Science ¶ AQUASTAT - Global water resources and uses BODC - marine data of ~22K vars Earth Models EOSDIS - NASA’s earth observing system data Integrated Marine Observing System (IMOS) - roughly 30TB of ocean measurements or on S3 Marinexplore - Open Oceanographic Data Smithsonian Institution Global Volcano and Eruption Database USGS Earthquake Archives Economics ¶ American Economic Association (AEA) EconData from UMD Economic Freedom of the World Data Historical MacroEconomc Statistics International Economics Database and various data tools International Trade Statistics Internet Product Code Database Joint External Debt Data Hub Jon Haveman International Trade Data Links OpenCorporates Database of Companies in the World Our World in Data SciencesPo World Trade Gravity Datasets The Atlas of Economic Complexity The Center for International Data The Observatory of Economic Complexity UN Commodity Trade Statistics UN Human Development Reports Education ¶ College Scorecard Data Student Data from Free Code Camp Energy ¶ AMPds BLUEd COMBED Dataport DRED ECO EIA HES - Household Electricity Study, UK HFED iAWE PLAID - the Plug Load Appliance Identification Dataset REDD Tracebase UK-DALE - UK Domestic Appliance-Level Electricity WHITED Finance ¶ CBOE Futures Exchange Google Finance Google Trends NASDAQ NYSE Market Data (see FTP link on RAW ) OANDA OSU Financial data Quandl St Louis Federal Yahoo Finance GIS ¶ ArcGIS Open Data portal Cambridge, MA, US, GIS data on GitHub Factual Global Location Data Geo Spatial Data from ASU Geo Wiki Project - Citizen-driven Environmental Monitoring GeoFabrik - OSM data extracted to a variety of formats and areas GeoNames Worldwide Global Administrative Areas Database (GADM) Homeland Infrastructure Foundation-Level Data Landsat 8 on AWS List of all countries in all languages National Weather Service GIS Data Portal Natural Earth - vectors and rasters of the world OpenAddresses OpenStreetMap (OSM) Pleiades - Gazetteer and graph of ancient places Reverse Geocoder using OSM data & additional high-resolution data files TIGER/Line - U.S. boundaries and roads TwoFishes - Foursquare’s coarse geocoder TZ Timezones shapfiles UN Environmental Data World boundaries from the U.S. Department of State World countries in multiple formats Government ¶ A list of cities and countries contributed by community Open Data for Africa OpenDataSoft’s list of 1,600 open data Healthcare ¶ EHDP Large Health Data Sets Gapminder World demographic databases Medicare Coverage Database (MCD), U.S. Medicare Data Engine of medicare.gov Data Medicare Data File MeSH, the vocabulary thesaurus used for indexing articles for PubMed Number of Ebola Cases and Deaths in Affected Countries (2014) Open-ODS (structure of the UK NHS) OpenPaymentsData, Healthcare financial relationship data The Cancer Genome Atlas project (TCGA) and BigQuery table World Health Organization Global Health Observatory Image Processing ¶ 10k US Adult Faces Database 2GB of Photos of Cats or Archive version Adience Unfiltered faces for gender and age classification Affective Image Classification Animals with attributes Caltech Pedestrian Detection Benchmark Chars74K dataset, Character Recognition in Natural Images (both English and Kannada are available) Face Recognition Benchmark GDXray: X-ray images for X-ray testing and Computer Vision ImageNet (in WordNet hierarchy) Indoor Scene Recognition International Affective Picture System, UFL Massive Visual Memory Stimuli, MIT MNIST database of handwritten digits, near 1 million examples Several Shape-from-Silhouette Datasets Stanford Dogs Dataset SUN database, MIT The Action Similarity Labeling (ASLAN) Challenge The Oxford-IIIT Pet Dataset Violent-Flows - Crowd Violence Non-violence Database and benchmark Visual genome YouTube Faces Database Machine Learning ¶ Context-aware data sets from five domains Delve Datasets for classification and regression (Univ. of Toronto) Discogs Monthly Data eBay Online Auctions (2012) IMDb Database Keel Repository for classification, regression and time series Labeled Faces in the Wild (LFW) Lending Club Loan Data Machine Learning Data Set Repository Million Song Dataset More Song Datasets MovieLens Data Sets New Yorker caption contest ratings RDataMining - “R and Data Mining” ebook data Registered Meteorites on Earth Restaurants Health Score Data in San Francisco UCI Machine Learning Repository Yahoo! Ratings and Classification Data Youtube 8m Museums ¶ Canada Science and Technology Museums Corporation’s Open Data Cooper-Hewitt’s Collection Database Minneapolis Institute of Arts metadata Natural History Museum (London) Data Portal Rijksmuseum Historical Art Collection Tate Collection metadata The Getty vocabularies Music ¶ Nottingham Folk Songs Bach 10 Natural Language ¶ Automatic Keyphrase Extracttion Blogger Corpus CLiPS Stylometry Investigation Corpus ClueWeb09 FACC ClueWeb12 FACC DBpedia - 4.58M things with 583M facts Flickr Personal Taxonomies Freebase.com of people, places, and things Google Books Ngrams (2.2TB) Google MC-AFP, generated based on the public available Gigaword dataset using Paragraph Vectors Google Web 5gram (1TB, 2006) Gutenberg eBooks List Hansards text chunks of Canadian Parliament Machine Comprehension Test (MCTest) of text from Microsoft Research Machine Translation of European languages Microsoft MAchine Reading COmprehension Dataset (or MS MARCO) Multi-Domain Sentiment Dataset (version 2.0) Open Multilingual Wordnet Personae Corpus SaudiNewsNet Collection of Saudi Newspaper Articles (Arabic, 30K articles) SMS Spam Collection in English Universal Dependencies USENET postings corpus of 2005~2011 Webhose - News/Blogs in multiple languages Wikidata - Wikipedia databases Wikipedia Links data - 40 Million Entities in Context WordNet databases and tools Neuroscience ¶ Allen Institute Datasets Brain Catalogue Brainomics CodeNeuro Datasets Collaborative Research in Computational Neuroscience (CRCNS) FCP-INDI Human Connectome Project NDAR NeuroData Neuroelectro NIMH Data Archive OASIS OpenfMRI Study Forrest Physics ¶ CERN Open Data Portal Crystallography Open Database NASA Exoplanet Archive NSSDC (NASA) data of 550 space spacecraft Sloan Digital Sky Survey (SDSS) - Mapping the Universe Psychology/Cognition ¶ OSU Cognitive Modeling Repository Datasets Public Domains ¶ Amazon Archive-it from Internet Archive Archive.org Datasets CMU JASA data archive CMU StatLab collections Data.World Data360 Datamob.org Google Infochimps KDNuggets Data Collections Microsoft Azure Data Market Free DataSets Microsoft Data Science for Research Numbray Open Library Data Dumps Reddit Datasets RevolutionAnalytics Collection Sample R data sets Stats4Stem R data sets StatSci.org The Washington Post List UCLA SOCR data collection UFO Reports Wikileaks 911 pager intercepts Yahoo Webscope Search Engines ¶ Academic Torrents of data sharing from UMB Datahub.io DataMarket (Qlik) Harvard Dataverse Network of scientific data ICPSR (UMICH) Institute of Education Sciences National Technical Reports Library Open Data Certificates (beta) OpenDataNetwork - A search engine of all Socrata powered data portals Statista.com - statistics and Studies Zenodo - An open dependable home for the long-tail of science Social Networks ¶ 72 hours #gamergate Twitter Scrape Ancestry.com Forum Dataset over 10 years Cheng-Caverlee-Lee September 2009 - January 2010 Twitter Scrape CMU Enron Email of 150 users EDRM Enron EMail of 151 users, hosted on S3 Facebook Data Scrape (2005) Facebook Social Networks from LAW (since 2007) Foursquare from UMN/Sarwat (2013) GitHub Collaboration Archive Google Scholar citation relations High-Resolution Contact Networks from Wearable Sensors Mobile Social Networks from UMASS Network Twitter Data Reddit Comments Skytrax’ Air Travel Reviews Dataset Social Twitter Data SourceForge.net Research Data Twitter Data for Online Reputation Management Twitter Data for Sentiment Analysis Twitter Graph of entire Twitter site Twitter Scrape Calufa May 2011 UNIMI/LAW Social Network Datasets Yahoo! Graph and Social Data Youtube Video Social Graph in 2007,2008 Social Sciences ¶ ACLED (Armed Conflict Location & Event Data Project) Canadian Legal Information Institute Center for Systemic Peace Datasets - Conflict Trends, Polities, State Fragility, etc Correlates of War Project Cryptome Conspiracy Theory Items Datacards European Social Survey FBI Hate Crime 2013 - aggregated data Fragile States Index GDELT Global Events Database General Social Survey (GSS) since 1972 German Social Survey Global Religious Futures Project Humanitarian Data Exchange INFORM Index for Risk Management Institute for Demographic Studies International Networks Archive International Social Survey Program ISSP International Studies Compendium Project James McGuire Cross National Data MacroData Guide by Norsk samfunnsvitenskapelig datatjeneste Minnesota Population Center MIT Reality Mining Dataset Notre Dame Global Adaptation Index (NG-DAIN) Open Crime and Policing Data in England, Wales and Northern Ireland Paul Hensel General International Data Page PewResearch Internet Survey Project PewResearch Society Data Collection Political Polarity Data StackExchange Data Explorer Terrorism Research and Analysis Consortium Texas Inmates Executed Since 1984 Titanic Survival Data Set or on Kaggle UCB’s Archive of Social Science Data (D-Lab) UCLA Social Sciences Data Archive UN Civil Society Database Universities Worldwide UPJOHN for Labor Employment Research Uppsala Conflict Data Program World Bank Open Data WorldPop project - Worldwide human population distributions Software ¶ FLOSSmole data about free, libre, and open source software development Sports ¶ Basketball (NBA/NCAA/Euro) Player Database and Statistics Betfair Historical Exchange Data Cricsheet Matches (cricket) Ergast Formula 1, from 1950 up to date (API) Football/Soccer resources (data and APIs) Lahman’s Baseball Database Pinhooker: Thoroughbred Bloodstock Sale Data Retrosheet Baseball Statistics Tennis database of rankings, results, and stats for ATP , WTA , Grand Slams and Match Charting Project Time Series ¶ Databanks International Cross National Time Series Data Archive Hard Drive Failure Rates Heart Rate Time Series from MIT Time Series Data Library (TSDL) from MU UC Riverside Time Series Dataset Transportation ¶ Airlines OD Data 1987-2008 Bay Area Bike Share Data Bike Share Systems (BSS) collection GeoLife GPS Trajectory from Microsoft Research German train system by Deutsche Bahn Hubway Million Rides in MA Marine Traffic - ship tracks, port calls and more Montreal BIXI Bike Share NYC Taxi Trip Data 2009- NYC Taxi Trip Data 2013 (FOIA/FOILed) NYC Uber trip data April 2014 to September 2014 Open Traffic collection OpenFlights - airport, airline and route data Philadelphia Bike Share Stations (JSON) Plane Crash Database, since 1920 RITA Airline On-Time Performance data RITA/BTS transport data collection (TranStat) Toronto Bike Share Stations (XML file) Transport for London (TFL) Travel Tracker Survey (TTS) for Chicago U.S. Bureau of Transportation Statistics (BTS) U.S. Domestic Flights 1990 to 2009 U.S. Freight Analysis Framework since 2007","[-7.82317370e-02  1.72229335e-02  2.35713869e-01 -9.97568220e-02
  3.28164935e-01  5.14590979e-01 -3.68074328e-01  5.62394738e-01
 -6.92204908e-02 -5.90136886e-01 -2.73802996e-01  6.41583279e-02
  3.03908050e-01  8.59405935e-01 -3.37410152e-01  2.98925608e-01
  2.07600236e-01  2.66871154e-01  3.09330046e-01  5.04976287e-02
 -2.54603148e-01  1.89934224e-01  2.10458010e-01 -6.27254665e-01
 -1.16100676e-01  4.56200391e-01 -4.27965522e-02  1.21380031e-01
  2.64389336e-01  2.51932621e-01 -2.42565915e-01 -4.71433282e-01
 -1.11375004e-04  8.42281431e-02  2.18305901e-01  1.46482900e-01
  2.70884991e-01 -4.42874968e-01 -2.22172201e-01  9.68145579e-02
  6.36582315e-01 -6.41414821e-02 -1.27412111e-01  5.03292680e-01
  1.72122166e-01  1.77122504e-01 -3.27523530e-01  2.17793062e-02
  2.35272616e-01  7.36496210e-01 -9.16990712e-02 -1.59140881e-02
  6.43838868e-02  1.83100045e-01 -1.26171425e-01  2.96975732e-01
  1.34461820e-01  2.70404100e-01 -9.76447314e-02  2.65924424e-01
 -5.05718626e-02  1.51208803e-01 -8.67477208e-02  8.13389301e-01
  1.40719354e-01 -4.04612720e-01  1.51678592e-01  5.59647202e-01
  9.39517319e-02 -1.59338750e-02 -2.09934771e-01  1.08553723e-01
  1.90647602e-01 -8.29919398e-01  2.48884633e-01 -3.43634546e-01
 -1.00882322e-01 -3.61294389e-01 -1.81114107e-01  2.51303941e-01
  4.11429465e-01  2.62982398e-01  4.74109471e-01  4.98612255e-01
  4.82917547e-01 -2.73010790e-01 -2.75048614e-03 -3.74587595e-01
  6.42383918e-02  1.75558731e-01 -3.41480553e-01  1.59536645e-01
 -9.15880948e-02 -8.26330334e-02  2.42068380e-01 -2.16640562e-01
 -6.23810887e-02  4.15030867e-03  4.02952015e-01  5.48001170e-01
  7.55162090e-02 -1.15074188e-01  5.81647158e-01 -2.71903902e-01
  7.49026239e-02  8.10484409e-01 -5.27790427e-01  2.32683957e-01
 -5.74427731e-02 -7.95257930e-03  2.58157462e-01 -1.52373672e-01
 -2.00933278e-01 -1.98146015e-01 -2.05193192e-01 -1.99371770e-01
 -6.69059083e-02 -2.51188666e-01 -2.95172334e-01  6.63249433e-01
 -2.91933000e-01 -2.09400300e-02 -1.93239272e-01  3.68228555e-02
 -5.37438989e-01  8.94792452e-02 -1.23079956e-01  1.35505795e-01
 -3.82408202e-02 -5.74117005e-02 -6.75616935e-02 -1.14215039e-01
 -6.18408799e-01 -4.14210200e-01  9.22661573e-02  1.55021563e-01
 -2.60530055e-01  4.53384280e-01 -1.57253563e-01  4.28488672e-01
  5.63916042e-02  2.55987465e-01  3.40015411e-01  7.36765563e-02
 -1.66402310e-01  4.99569960e-02 -6.57361448e-02 -3.81329179e-01
  1.39092535e-01 -1.91641822e-01 -1.46205679e-01 -2.84255799e-02
  3.20812404e-01 -5.47774076e-01 -2.55999088e-01  7.98691288e-02
  9.31736231e-01 -2.24257529e-01 -4.13078032e-02 -2.48051882e-01
  2.18016118e-01 -2.71378070e-01 -2.26950962e-02 -2.53783643e-01
 -2.29700580e-02 -6.42330498e-02 -4.40082222e-01  1.57700956e-01
 -2.88620293e-02  3.03069770e-01 -2.56725270e-02  1.43894970e-01
 -1.68292791e-01  1.99919373e-01 -2.54734933e-01  4.47705626e-01
  5.14903106e-02 -4.22282696e-01 -9.04258788e-02 -6.07596710e-03
 -1.75062299e-01 -2.99018677e-02  1.21240728e-01  7.31125027e-02
 -1.28102809e-01  1.26994267e-01 -2.66377866e-01  6.45503879e-01
  2.17661560e-01  5.57577908e-02 -2.13739082e-01  1.90148383e-01
 -7.37356320e-02  2.41979733e-02  3.36794764e-01  3.54136229e-01
  3.35056007e-01  2.54449725e-01  3.05419385e-01 -4.87264633e-01
 -2.76645035e-01  3.24270539e-02 -9.30317402e-01 -1.20570734e-01
  3.43159497e-01 -7.33225420e-02  6.65706456e-01  6.34585768e-02
  1.66784942e-01 -3.42512250e-01 -3.85826826e-02 -7.11589217e-01
  1.74533501e-01  1.02074242e+00 -3.21470141e-01 -1.29120708e-01
  2.41253302e-02  6.26479864e-01  3.29278469e-01  1.64252520e-01
  4.02367651e-01  3.17035586e-01 -7.80729577e-03 -1.92185163e-01
  2.99236864e-01 -5.02338707e-02  4.58583459e-02 -7.72373155e-02
 -4.14763153e-01 -3.85376692e-01  4.62024659e-02  4.39115822e-01
 -6.99921399e-02 -1.08454436e-01 -1.69928774e-01  1.27460361e-01
 -2.51969621e-02  2.32096493e-01 -1.16120011e-01 -1.22356534e-01
  9.58337903e-01 -2.41185814e-01  2.64132947e-01  3.62344563e-01
 -3.09570748e-02  1.03731453e-03  3.53297561e-01 -1.68317422e-01
 -2.14159012e-01 -2.97766387e-01 -1.49776459e-01  3.23045114e-03
 -1.51953876e-01 -1.14301674e-01 -7.46045113e-02 -2.78265864e-01
  2.52417803e-01  1.29311100e-01  2.12732852e-01  2.40607843e-01
 -3.56748819e-01 -2.89458632e-01  3.67714047e-01 -1.13089055e-01
  1.68574095e-01  2.45739728e-01  3.66010606e-01 -6.56578839e-02
  1.51136518e-01 -9.29967314e-02 -1.17026167e-02 -1.71692148e-01
 -4.72963229e-03  4.26953912e-01 -5.57289980e-02  2.10796535e-01
 -1.78351134e-01  2.83329725e-01 -4.09375608e-01  1.47953749e-01
  2.15989113e-01 -1.65713847e-01 -3.07424664e-01 -1.95081800e-01
  1.86350401e-02 -4.59596276e-01 -2.00403810e-01 -1.89270943e-01
  1.78768516e-01 -8.07306692e-02  1.21421494e-01 -3.04928184e-01
 -2.63749480e-01 -9.39675346e-02  4.93078493e-04  6.50592148e-01
 -2.09892169e-02  2.91067809e-01  3.30895722e-01 -5.51943295e-02
 -8.38327184e-02 -1.29899651e-01  5.83651662e-01  3.64270329e-01
 -1.78088218e-01 -1.41559809e-01 -1.08852796e-02  8.27023089e-02
 -3.36167186e-01 -3.07069331e-01 -1.91173613e-01  1.45701542e-01
  1.27081707e-01  2.45076895e-01 -8.44314247e-02  3.66964966e-01
  5.80635332e-02 -1.42281950e-01 -5.92752099e-02 -3.92471582e-01
 -2.43589163e-01 -1.45627454e-01  7.53573328e-02  2.61628538e-01
 -1.49052933e-01 -1.03301980e-01 -3.06483030e-01 -4.60161448e-01
 -1.38912618e-01 -1.18220970e-01  5.68133950e-01  2.02436894e-02
  1.26006007e-01  2.91786611e-01 -2.77042389e-01  8.22372213e-02
 -1.57215551e-01  2.59961486e-02 -2.83677012e-01 -1.50415108e-01
  2.20667720e-01  1.68879628e-01 -5.28377116e-01  2.85514861e-01
 -1.23214915e-01  1.13398135e-01 -6.09419465e-01  6.71282530e-01
  2.09948033e-01  5.68267852e-02  1.21565029e-01  5.21664880e-02
  2.41862684e-01  2.14375690e-01 -2.35343233e-01 -3.25539142e-01
 -2.33603403e-01 -6.77244738e-03  1.31782115e-01  4.75544125e-01
  2.28908285e-02  6.98381215e-02  5.44968136e-02  9.60002989e-02
  1.97693810e-01 -2.44653046e-01 -2.62053341e-01 -7.24206343e-02
  2.13104635e-01 -3.45221162e-02 -8.49830583e-02 -4.69035022e-02
  5.05313575e-02  8.82334039e-02  4.71633732e-01 -3.82633507e-03
  7.45179415e-01 -1.35196716e-01 -1.47883520e-02  1.71163678e-02
  5.76774403e-02  1.62152886e-01 -1.45451173e-01 -9.12696123e-05
  2.91804135e-01 -5.51674552e-02  4.35043216e-01 -4.30012047e-02
  4.37082827e-01 -1.23330712e-01 -1.16585970e-01 -4.96313453e-01
 -1.31531268e-01 -2.34749928e-01 -5.08203916e-02 -1.06021985e-01
  4.85066809e-02 -2.12923944e-01  4.00470436e-01  8.41756761e-02
 -2.67807096e-01 -5.48963130e-01 -1.74145296e-01 -5.67079663e-01
  9.16290730e-02 -2.17770249e-01  1.61697358e-01  1.78880394e-01
 -3.52465928e-01 -8.52940381e-02  3.93501222e-02  4.28922832e-01
  1.25045985e-01 -6.66638017e-01 -1.85229897e-01  1.50460571e-01
  8.39820147e-01  8.05517137e-01  1.73753008e-01 -3.28527808e-01
 -9.50337946e-02 -2.87333161e-01 -5.51697239e-02 -2.26908594e-01
 -2.51836121e-01  4.02109027e-01 -1.89957675e-02  2.54134446e-01
  4.78984974e-03  6.69471845e-02 -1.24909710e-02 -3.00013989e-01
 -5.91161370e-01  1.23597771e-01 -2.60046780e-01 -1.32479802e-01
  4.97438498e-02 -4.16877300e-01 -3.50214660e-01 -1.82609066e-01
  2.62905419e-01  3.31046432e-01 -2.57006854e-01  3.09205234e-01
  7.21771047e-02 -3.04208875e-01  4.10805419e-02  1.66666418e-01
 -4.41671908e-01  5.30119352e-02 -3.51969004e-01  6.30953014e-02
 -1.68274671e-01 -2.75120288e-01  7.01335222e-02 -4.52672783e-03
  1.20539144e-02  4.12410051e-02 -5.31767249e-01  7.97335953e-02
 -1.56366706e-01  4.79794234e-01 -2.82726288e-01 -5.67652173e-02
 -5.00888586e-01 -8.34291950e-02  3.26574326e-01 -4.79657874e-02
  2.04451382e-01  1.33958459e-02 -1.91078782e-01 -2.60709286e-01
  4.94373977e-01  7.33993798e-02 -2.63819814e-01  1.47467315e-01
 -4.33045864e-01  2.15492100e-02  1.36610985e-01 -2.74144769e-01
  1.95871174e-01  2.72278309e-01  1.70809299e-01 -5.91797307e-02
 -8.94516632e-02  1.37667611e-01 -8.76132958e-03  5.57721376e-01
 -2.79212654e-01  4.41244215e-01 -5.77592850e-02  3.79157841e-01
  3.25920492e-01  1.99769855e-01  7.20898092e-01 -4.02651548e-01
 -3.60781491e-01  2.17231348e-01  4.77545768e-01  1.67922363e-01
 -6.82823360e-03  7.39774480e-02  9.79933813e-02  3.29704106e-01
 -1.53428286e-01  3.06524634e-01 -1.89866900e-01  1.44369885e-01
 -1.18518718e-01 -4.68672700e-02 -2.57500485e-02  6.35519773e-02
 -5.00428453e-02  1.42403290e-01 -1.01218387e-01  2.21712455e-01
  1.90946415e-01 -3.74682754e-01 -3.20082098e-01  3.66378844e-01
  5.96296154e-02  2.71125913e-01  4.25797701e-01  1.22341141e-02
  1.64065555e-01  1.32249802e-01  1.19499356e-01  2.63705552e-01
  1.94336832e-01 -3.51776481e-01 -5.24805248e-01 -1.19743213e-01
 -4.50907275e-02 -2.15485990e-01 -1.61157295e-01  8.27645697e-03
  7.78482556e-02 -2.03120470e-01  8.89171809e-02 -9.82565284e-02
  5.80951810e-01 -3.22743088e-01  5.18628806e-02 -2.08712220e-01
  1.21458396e-01 -1.57420442e-01 -4.63424921e-01  5.72756492e-02
 -4.38402407e-02  7.39286691e-02  2.59295534e-02  4.72915709e-01
 -1.92025498e-01 -5.09735197e-02  1.55500337e-01 -5.22312000e-02
 -9.56953466e-02  1.06265657e-01 -7.07554147e-02 -3.54952514e-01
 -9.78546590e-03  2.16578662e-01 -3.58339071e-01 -1.70307472e-01
 -1.92252666e-01  1.25945956e-01  5.30006170e-01  4.50970046e-02
  4.16069865e-01  2.42645647e-02  1.50881410e-02 -6.34221919e-03
 -9.23326612e-03 -2.05954164e-01  1.05259433e-01  1.92377672e-01
 -1.81831077e-01 -1.56858817e-01 -3.50870311e-01 -4.39724863e-01
 -4.60406601e-01 -1.62675679e-01 -3.88477221e-02  7.89395645e-02
  1.01465128e-01  2.93696404e-01 -5.65559268e-01 -1.63768843e-01
 -2.56147057e-01  4.73011993e-02 -9.69602354e-03 -5.20128608e-02
 -2.75779784e-01 -1.57402039e-01  1.60074398e-01  1.53088197e-01
  4.91031051e-01 -2.33886093e-01  2.78191686e-01  2.12873191e-01
  3.53675991e-01  1.67789787e-01  8.75874087e-02 -5.50347194e-02
 -1.43833816e-01  8.50863941e-03  5.45930769e-03  2.49406427e-01
  7.78191909e-02  2.19685942e-01  4.07247245e-02  6.61897361e-02
  2.40475923e-01 -1.79876924e-01  1.11212388e-01  1.95967704e-02
  1.14621073e-01  7.52250403e-02 -6.60289377e-02  2.71690905e-01
  3.15537095e-01 -1.19111568e-01 -3.82750630e-01 -2.66428858e-01
  3.08739901e-01 -2.57851362e-01 -9.82055515e-02  2.53521264e-01
  1.76538508e-02  3.08479249e-01 -2.77671963e-01  8.99494067e-03
  1.32130519e-01  1.43474787e-02 -1.70165956e-01 -1.25674635e-01
  8.83244202e-02  1.99670181e-01  1.89257205e-01  2.43553370e-02
  2.54514106e-02 -4.16586995e-01  2.22916976e-02 -3.21228772e-01
  1.76863596e-02  2.15881821e-02  9.82683077e-02 -7.71871328e-01
 -2.82818258e-01  1.01742417e-01 -1.73653767e-01  1.84371337e-01
  3.76970440e-01 -8.11944902e-01 -2.09850967e-01  2.97306180e-01
 -4.91340637e-01  3.37818384e-01 -1.58333510e-01  1.68376923e-01
  3.46864313e-01  3.68889213e-01 -1.13064840e-01  5.40514350e-01
  3.78887266e-01 -2.68307984e-01  5.84744476e-02 -1.49535120e-01
 -8.13246071e-02  1.53460741e-01 -3.45246680e-02  2.86558300e-01
  1.61804199e-01 -2.82801032e-01 -2.32207894e-01  4.62066203e-01
  2.69838393e-01  5.82175739e-02 -5.13696373e-02 -1.63565964e-01
 -1.17065951e-01 -1.68831408e-01  2.59420037e-01 -2.14976728e-01
 -2.56671667e-01  7.20344111e-02  9.28428918e-02  8.16277713e-02
  1.58862457e-01 -3.19510192e-01 -6.37155846e-02  1.53148472e-01
  8.74176845e-02 -1.51843563e-01 -3.78868222e-01 -4.30759937e-02
 -2.90374398e-01  2.45920986e-01 -3.19273859e-01  5.03744960e-01
 -3.02402735e-01  9.62683856e-02  2.01559477e-02 -2.68559247e-01
  9.99711752e-02 -2.20051169e-01  4.23474014e-01  1.89827427e-01
  8.72054249e-02 -6.46033168e-01  1.36673957e-01 -3.30197036e-01
 -1.82858139e-01  9.96310636e-02  1.99072853e-01 -2.19950035e-01
  2.92930335e-01 -9.79505181e-02  3.61046754e-02 -8.77152681e-02
 -1.57643035e-01 -2.56660372e-01  3.74230295e-01  2.18133077e-01
 -1.46837905e-01  3.68528720e-03  6.69110298e-01 -3.51623774e-01
 -8.92084241e-01 -1.08519290e-02 -1.23569407e-01  3.10451746e-01
  1.18651398e-01  8.36845458e-01  7.28081882e-01 -1.48350537e-01
 -2.07329374e-02  2.33107172e-02  1.65470794e-01 -1.91309124e-01
 -2.98587561e-01 -1.78425550e-01  3.84280980e-01 -6.24603406e-02
  2.29092002e-01  7.45454580e-02  1.59520760e-01 -3.52119207e-02
  1.84204891e-01  1.11498535e-01  1.32856555e-02 -2.15019971e-01
  2.48733938e-01  1.51414439e-01 -2.51331449e-01 -1.44607663e-01
  1.31053239e-01  2.51679301e-01  1.48359938e-02  1.40818849e-01
  3.90632153e-01  1.16514966e-01 -6.28299892e-01  1.34308264e-01
  1.09745786e-01 -2.20642850e-01  2.93883175e-01  9.95423496e-02]"
Libraries,"Libraries ¶ Machine learning libraries and frameworks forked from josephmisti’s awesome machine learning . APL C C++ Common Lisp Clojure Elixir Erlang Go Haskell Java Javascript Julia Lua Matlab .NET Objective C OCaml PHP Python Ruby Rust R SAS Scala Swift APL ¶ General-Purpose Machine Learning naive-apl - Naive Bayesian Classifier implementation in APL C ¶ General-Purpose Machine Learning Darknet - Darknet is an open source neural network framework written in C and CUDA. It is fast, easy to install, and supports CPU and GPU computation. Recommender - A C library for product recommendations/suggestions using collaborative filtering (CF). Hybrid Recommender System - A hybrid recomender system based upon scikit-learn algorithms. Computer Vision CCV - C-based/Cached/Core Computer Vision Library, A Modern Computer Vision Library VLFeat - VLFeat is an open and portable library of computer vision algorithms, which has Matlab toolbox Speech Recognition HTK -The Hidden Markov Model Toolkit. HTK is a portable toolkit for building and manipulating hidden Markov models. C++ ¶ Computer Vision DLib - DLib has C++ and Python interfaces for face detection and training general object detectors. EBLearn - Eblearn is an object-oriented C++ library that implements various machine learning models OpenCV - OpenCV has C++, C, Python, Java and MATLAB interfaces and supports Windows, Linux, Android and Mac OS. VIGRA - VIGRA is a generic cross-platform C++ computer vision and machine learning library for volumes of arbitrary dimensionality with Python bindings. General-Purpose Machine Learning BanditLib - A simple Multi-armed Bandit library. Caffe - A deep learning framework developed with cleanliness, readability, and speed in mind. [DEEP LEARNING] CNTK by Microsoft Research, is a unified deep-learning toolkit that describes neural networks as a series of computational steps via a directed graph. CUDA - This is a fast C++/CUDA implementation of convolutional [DEEP LEARNING] CXXNET - Yet another deep learning framework with less than 1000 lines core code [DEEP LEARNING] DeepDetect - A machine learning API and server written in C++11. It makes state of the art machine learning easy to work with and integrate into existing applications. Disrtibuted Machine learning Tool Kit (DMTK) Word Embedding. DLib - A suite of ML tools designed to be easy to imbed in other applications DSSTNE - A software library created by Amazon for training and deploying deep neural networks using GPUs which emphasizes speed and scale over experimental flexibility. DyNet - A dynamic neural network library working well with networks that have dynamic structures that change for every training instance. Written in C++ with bindings in Python. encog-cpp Fido - A highly-modular C++ machine learning library for embedded electronics and robotics. igraph - General purpose graph library Intel(R) DAAL - A high performance software library developed by Intel and optimized for Intel’s architectures. Library provides algorithmic building blocks for all stages of data analytics and allows to process data in batch, online and distributed modes. LightGBM framework based on decision tree algorithms, used for ranking, classification and many other machine learning tasks. MLDB - The Machine Learning Database is a database designed for machine learning. Send it commands over a RESTful API to store data, explore it using SQL, then train machine learning models and expose them as APIs. mlpack - A scalable C++ machine learning library ROOT - A modular scientific software framework. It provides all the functionalities needed to deal with big data processing, statistical analysis, visualization and storage. shark - A fast, modular, feature-rich open-source C++ machine learning library. Shogun - The Shogun Machine Learning Toolbox sofia-ml - Suite of fast incremental algorithms. Stan - A probabilistic programming language implementing full Bayesian statistical inference with Hamiltonian Monte Carlo sampling Timbl - A software package/C++ library implementing several memory-based learning algorithms, among which IB1-IG, an implementation of k-nearest neighbor classification, and IGTree, a decision-tree approximation of IB1-IG. Commonly used for NLP. Vowpal Wabbit (VW) - A fast out-of-core learning system. Warp-CTC , on both CPU and GPU. XGBoost - A parallelized optimized general purpose gradient boosting library. Natural Language Processing BLLIP Parser colibri-core - C++ library, command line tools, and Python binding for extracting and working with basic linguistic constructions such as n-grams and skipgrams in a quick and memory-efficient way. CRF++ for segmenting/labeling sequential data & other Natural Language Processing tasks. CRFsuite for labeling sequential data. frog - Memory-based NLP suite developed for Dutch: PoS tagger, lemmatiser, dependency parser, NER, shallow parser, morphological analyzer. libfolia](https://github.com/LanguageMachines/libfolia) - C++ library for the [FoLiA format MeTA](https://github.com/meta-toolkit/meta) - [MeTA : ModErn Text Analysis is a C++ Data Sciences Toolkit that facilitates mining big text data. MIT Information Extraction Toolkit - C, C++, and Python tools for named entity recognition and relation extraction ucto - Unicode-aware regular-expression based tokenizer for various languages. Tool and C++ library. Supports FoLiA format. Speech Recognition Kaldi - Kaldi is a toolkit for speech recognition written in C++ and licensed under the Apache License v2.0. Kaldi is intended for use by speech recognition researchers. Sequence Analysis ToPS - This is an objected-oriented framework that facilitates the integration of probabilistic models for sequences over a user defined alphabet. Gesture Detection grt - The Gesture Recognition Toolkit. GRT is a cross-platform, open-source, C++ machine learning library designed for real-time gesture recognition. Common Lisp ¶ General-Purpose Machine Learning mgl , Gaussian Processes mgl-gpr - Evolutionary algorithms cl-libsvm - Wrapper for the libsvm support vector machine library Clojure ¶ Natural Language Processing Clojure-openNLP - Natural Language Processing in Clojure (opennlp) Infections-clj - Rails-like inflection library for Clojure and ClojureScript General-Purpose Machine Learning Touchstone - Clojure A/B testing library Clojush - The Push programming language and the PushGP genetic programming system implemented in Clojure Infer - Inference and machine learning in clojure Clj-ML - A machine learning library for Clojure built on top of Weka and friends DL4CLJ - Clojure wrapper for Deeplearning4j Encog Fungp - A genetic programming library for Clojure Statistiker - Basic Machine Learning algorithms in Clojure. clortex - General Machine Learning library using Numenta’s Cortical Learning Algorithm comportex - Functionally composable Machine Learning library using Numenta’s Cortical Learning Algorithm cortex - Neural networks, regression and feature learning in Clojure. lambda-ml - Simple, concise implementations of machine learning techniques and utilities in Clojure. Data Analysis / Data Visualization Incanter - Incanter is a Clojure-based, R-like platform for statistical computing and graphics. PigPen - Map-Reduce for Clojure. Envision - Clojure Data Visualisation library, based on Statistiker and D3 Elixir ¶ General-Purpose Machine Learning Simple Bayes - A Simple Bayes / Naive Bayes implementation in Elixir. Natural Language Processing Stemmer stemming implementation in Elixir. Erlang ¶ General-Purpose Machine Learning Disco - Map Reduce in Erlang Go ¶ Natural Language Processing go-porterstemmer - A native Go clean room implementation of the Porter Stemming algorithm. paicehusk - Golang implementation of the Paice/Husk Stemming Algorithm. snowball - Snowball Stemmer for Go. go-ngram - In-memory n-gram index with compression. General-Purpose Machine Learning gago - Multi-population, flexible, parallel genetic algorithm. Go Learn - Machine Learning for Go go-pr - Pattern recognition package in Go lang. go-ml - Linear / Logistic regression, Neural Networks, Collaborative Filtering and Gaussian Multivariate Distribution bayesian - Naive Bayesian Classification for Golang. go-galib - Genetic Algorithms library written in Go / golang Cloudforest - Ensembles of decision trees in go/golang. gobrain - Neural Networks written in go GoNN - GoNN is an implementation of Neural Network in Go Language, which includes BPNN, RBF, PCN MXNet - Lightweight, Portable, Flexible Distributed/Mobile Deep Learning with Dynamic, Mutation-aware Dataflow Dep Scheduler; for Python, R, Julia, Go, Javascript and more. go-mxnet-predictor - Go binding for MXNet c_predict_api to do inference with pre-trained model Data Analysis / Data Visualization go-graph - Graph library for Go/golang language. SVGo - The Go Language library for SVG generation RF - Random forests implementation in Go Haskell ¶ General-Purpose Machine Learning haskell-ml - Haskell implementations of various ML algorithms. HLearn - a suite of libraries for interpreting machine learning models according to their algebraic structure. hnn - Haskell Neural Network library. hopfield-networks - Hopfield Networks for unsupervised learning in Haskell. caffegraph - A DSL for deep neural networks LambdaNet - Configurable Neural Networks in Haskell Java ¶ Natural Language Processing Cortical.io as quickly and intuitively as the brain. CoreNLP - Stanford CoreNLP provides a set of natural language analysis tools which can take raw English language text input and give the base forms of words Stanford Parser - A natural language parser is a program that works out the grammatical structure of sentences Stanford POS Tagger - A Part-Of-Speech Tagger (POS Tagger Stanford Name Entity Recognizer - Stanford NER is a Java implementation of a Named Entity Recognizer. Stanford Word Segmenter - Tokenization of raw text is a standard pre-processing step for many NLP tasks. Tregex, Tsurgeon and Semgrex . Stanford Phrasal: A Phrase-Based Translation System Stanford English Tokenizer - Stanford Phrasal is a state-of-the-art statistical phrase-based machine translation system, written in Java. Stanford Tokens Regex - A tokenizer divides text into a sequence of tokens, which roughly correspond to “words” Stanford Temporal Tagger - SUTime is a library for recognizing and normalizing time expressions. Stanford SPIED - Learning entities from unlabeled text starting with seed sets using patterns in an iterative fashion Stanford Topic Modeling Toolbox - Topic modeling tools to social scientists and others who wish to perform analysis on datasets Twitter Text Java - A Java implementation of Twitter’s text processing library MALLET - A Java-based package for statistical natural language processing, document classification, clustering, topic modeling, information extraction, and other machine learning applications to text. OpenNLP - a machine learning based toolkit for the processing of natural language text. LingPipe - A tool kit for processing text using computational linguistics. ClearTK components in Java and is built on top of Apache UIMA. Apache cTAKES is an open-source natural language processing system for information extraction from electronic medical record clinical free-text. ClearNLP - The ClearNLP project provides software and resources for natural language processing. The project started at the Center for Computational Language and EducAtion Research, and is currently developed by the Center for Language and Information Research at Emory University. This project is under the Apache 2 license. CogcompNLP developed in the University of Illinois’ Cognitive Computation Group, for example illinois-core-utilities which provides a set of NLP-friendly data structures and a number of NLP-related utilities that support writing NLP applications, running experiments, etc, illinois-edison a library for feature extraction from illinois-core-utilities data structures and many other packages. General-Purpose Machine Learning aerosolve - A machine learning library by Airbnb designed from the ground up to be human friendly. Datumbox - Machine Learning framework for rapid development of Machine Learning and Statistical applications ELKI Encog - An advanced neural network and machine learning framework. Encog contains classes to create a wide variety of networks, as well as support classes to normalize and process data for these neural networks. Encog trains using multithreaded resilient propagation. Encog can also make use of a GPU to further speed processing time. A GUI based workbench is also provided to help model and train neural networks. FlinkML in Apache Flink - Distributed machine learning library in Flink H2O - ML engine that supports distributed learning on Hadoop, Spark or your laptop via APIs in R, Python, Scala, REST/JSON. htm.java - General Machine Learning library using Numenta’s Cortical Learning Algorithm java-deeplearning - Distributed Deep Learning Platform for Java, Clojure,Scala Mahout - Distributed machine learning Meka . MLlib in Apache Spark - Distributed machine learning library in Spark Hydrosphere Mist - a service for deployment Apache Spark MLLib machine learning models as realtime, batch or reactive web services. Neuroph - Neuroph is lightweight Java neural network framework ORYX - Lambda Architecture Framework using Apache Spark and Apache Kafka with a specialization for real-time large-scale machine learning. Samoa SAMOA is a framework that includes distributed machine learning for data streams with an interface to plug-in different stream processing platforms. RankLib - RankLib is a library of learning to rank algorithms rapaio - statistics, data mining and machine learning toolbox in Java RapidMiner - RapidMiner integration into Java code Stanford Classifier - A classifier is a machine learning tool that will take data items and place them into one of k classes. SmileMiner - Statistical Machine Intelligence & Learning Engine SystemML language. WalnutiQ - object oriented model of the human brain Weka - Weka is a collection of machine learning algorithms for data mining tasks LBJava - Learning Based Java is a modeling language for the rapid development of software systems, offers a convenient, declarative syntax for classifier and constraint definition directly in terms of the objects in the programmer’s application. Speech Recognition CMU Sphinx - Open Source Toolkit For Speech Recognition purely based on Java speech recognition library. Data Analysis / Data Visualization Flink - Open source platform for distributed stream and batch data processing. Hadoop - Hadoop/HDFS Spark - Spark is a fast and general engine for large-scale data processing. Storm - Storm is a distributed realtime computation system. Impala - Real-time Query for Hadoop DataMelt - Mathematics software for numeric computation, statistics, symbolic calculations, data analysis and data visualization. Dr. Michael Thomas Flanagan’s Java Scientific Library Deep Learning Deeplearning4j - Scalable deep learning for industry with parallel GPUs Javascript ¶ Natural Language Processing Twitter-text - A JavaScript implementation of Twitter’s text processing library NLP.js - NLP utilities in javascript and coffeescript natural - General natural language facilities for node Knwl.js - A Natural Language Processor in JS Retext - Extensible system for analyzing and manipulating natural language TextProcessing - Sentiment analysis, stemming and lemmatization, part-of-speech tagging and chunking, phrase extraction and named entity recognition. NLP Compromise - Natural Language processing in the browser Data Analysis / Data Visualization D3.js High Charts NVD3.js dc.js chartjs dimple amCharts D3xter - Straight forward plotting built on D3 statkit - Statistics kit for JavaScript datakit - A lightweight framework for data analysis in JavaScript science.js - Scientific and statistical computing in JavaScript. Z3d - Easily make interactive 3d plots built on Three.js Sigma.js - JavaScript library dedicated to graph drawing. C3.js - customizable library based on D3.js for easy chart drawing. Datamaps - Customizable SVG map/geo visualizations using D3.js. ZingChart - library written on Vanilla JS for big data visualization. cheminfo - Platform for data visualization and analysis, using the visualizer project. General-Purpose Machine Learning Convnet.js - ConvNetJS is a Javascript library for training Deep Learning models[DEEP LEARNING] Clusterfck - Agglomerative hierarchical clustering implemented in Javascript for Node.js and the browser Clustering.js - Clustering algorithms implemented in Javascript for Node.js and the browser Decision Trees - NodeJS Implementation of Decision Tree using ID3 Algorithm DN2A - Digital Neural Networks Architecture figue - K-means, fuzzy c-means and agglomerative clustering Node-fann bindings for Node.js Kmeans.js - Simple Javascript implementation of the k-means algorithm, for node.js and the browser LDA.js - LDA topic modeling for node.js Learning.js - Javascript implementation of logistic regression/c4.5 decision tree Machine Learning - Machine learning library for Node.js machineJS - Automated machine learning, data formatting, ensembling, and hyperparameter optimization for competitions and exploration- just give it a .csv file! mil-tokyo - List of several machine learning libraries Node-SVM - Support Vector Machine for nodejs Brain - Neural networks in JavaScript [Deprecated] Bayesian-Bandit - Bayesian bandit implementation for Node and the browser. Synaptic - Architecture-free neural network library for node.js and the browser kNear - JavaScript implementation of the k nearest neighbors algorithm for supervised learning NeuralN - C++ Neural Network library for Node.js. It has advantage on large dataset and multi-threaded training. kalman - Kalman filter for Javascript. shaman - node.js library with support for both simple and multiple linear regression. ml.js - Machine learning and numerical analysis tools for Node.js and the Browser! Pavlov.js - Reinforcement learning using Markov Decision Processes MXNet - Lightweight, Portable, Flexible Distributed/Mobile Deep Learning with Dynamic, Mutation-aware Dataflow Dep Scheduler; for Python, R, Julia, Go, Javascript and more. Misc sylvester - Vector and Matrix math for JavaScript. simple-statistics as well as in node.js. regression-js - A javascript library containing a collection of least squares fitting methods for finding a trend in a set of data. Lyric - Linear Regression library. GreatCircle - Library for calculating great circle distance. Julia ¶ General-Purpose Machine Learning MachineLearning - Julia Machine Learning library MLBase - A set of functions to support the development of machine learning algorithms PGM - A Julia framework for probabilistic graphical models. DA - Julia package for Regularized Discriminant Analysis Regression Local Regression - Local regression, so smooooth! Naive Bayes - Simple Naive Bayes implementation in Julia Mixed Models mixed-effects models Simple MCMC - basic mcmc sampler implemented in Julia Distance - Julia module for Distance evaluation Decision Tree - Decision Tree Classifier and Regressor Neural - A neural network in Julia MCMC - MCMC tools for Julia Mamba for Bayesian analysis in Julia GLM - Generalized linear models in Julia Online Learning GLMNet - Julia wrapper for fitting Lasso/ElasticNet GLM models using glmnet Clustering - Basic functions for clustering data: k-means, dp-means, etc. SVM - SVM’s for Julia Kernal Density - Kernel density estimators for julia Dimensionality Reduction - Methods for dimensionality reduction NMF - A Julia package for non-negative matrix factorization ANN - Julia artificial neural networks Mocha - Deep Learning framework for Julia inspired by Caffe XGBoost - eXtreme Gradient Boosting Package in Julia ManifoldLearning - A Julia package for manifold learning and nonlinear dimensionality reduction MXNet - Lightweight, Portable, Flexible Distributed/Mobile Deep Learning with Dynamic, Mutation-aware Dataflow Dep Scheduler; for Python, R, Julia, Go, Javascript and more. Merlin - Flexible Deep Learning Framework in Julia ROCAnalysis - Receiver Operating Characteristics and functions for evaluation probabilistic binary classifiers GaussianMixtures - Large scale Gaussian Mixture Models ScikitLearn - Julia implementation of the scikit-learn API Knet - Koç University Deep Learning Framework Natural Language Processing Topic Models - TopicModels for Julia Text Analysis - Julia package for text analysis Data Analysis / Data Visualization Graph Layout - Graph layout algorithms in pure Julia Data Frames Meta - Metaprogramming tools for DataFrames Julia Data - library for working with tabular data in Julia Data Read - Read files from Stata, SAS, and SPSS Hypothesis Tests - Hypothesis tests for Julia Gadfly - Crafty statistical graphics for Julia. Stats - Statistical tests for Julia RDataSets - Julia package for loading many of the data sets available in R DataFrames - library for working with tabular data in Julia Distributions - A Julia package for probability distributions and associated functions. Data Arrays - Data structures that allow missing values Time Series - Time series toolkit for Julia Sampling - Basic sampling algorithms for Julia Misc Stuff / Presentations DSP . JuliaCon Presentations - Presentations for JuliaCon SignalProcessing - Signal Processing tools for Julia Images - An image library for Julia Lua ¶ General-Purpose Machine Learning Torch7 cephes - Cephes mathematical functions library, wrapped for Torch. Provides and wraps the 180+ special mathematical functions from the Cephes mathematical library, developed by Stephen L. Moshier. It is used, among many other places, at the heart of SciPy. autograd - Autograd automatically differentiates native Torch code. Inspired by the original Python version. graph - Graph package for Torch randomkit - Numpy’s randomkit, wrapped for Torch signal - A signal processing toolbox for Torch-7. FFT, DCT, Hilbert, cepstrums, stft nn - Neural Network package for Torch torchnet - framework for torch which provides a set of abstractions aiming at encouraging code re-use as well as encouraging modular programming nngraph - This package provides graphical computation for nn library in Torch7. nnx - A completely unstable and experimental package that extends Torch’s builtin nn library rnn - A Recurrent Neural Network library that extends Torch’s nn. RNNs, LSTMs, GRUs, BRNNs, BLSTMs, etc. dpnn - Many useful features that aren’t part of the main nn package. dp - A deep learning library designed for streamlining research and development using the Torch7 distribution. It emphasizes flexibility through the elegant use of object-oriented design patterns. optim - An optimization library for Torch. SGD, Adagrad, Conjugate-Gradient, LBFGS, RProp and more. unsup . manifold - A package to manipulate manifolds svm - Torch-SVM library lbfgs - FFI Wrapper for liblbfgs vowpalwabbit - An old vowpalwabbit interface to torch. OpenGM - OpenGM is a C++ library for graphical modeling, and inference. The Lua bindings provide a simple way of describing graphs, from Lua, and then optimizing them with OpenGM. sphagetti module for torch7 by @MichaelMathieu LuaSHKit - A lua wrapper around the Locality sensitive hashing library SHKit kernel smoothing - KNN, kernel-weighted average, local linear regression smoothers cutorch - Torch CUDA Implementation cunn - Torch CUDA Neural Network Implementation imgraph - An image/graph library for Torch. This package provides routines to construct graphs on images, segment them, build trees out of them, and convert them back to images. videograph - A video/graph library for Torch. This package provides routines to construct graphs on videos, segment them, build trees out of them, and convert them back to videos. saliency - code and tools around integral images. A library for finding interest points based on fast integral histograms. stitch - allows us to use hugin to stitch images and apply same stitching to a video sequence sfm - A bundle adjustment/structure from motion package fex - A package for feature extraction in Torch. Provides SIFT and dSIFT modules. OverFeat - A state-of-the-art generic dense feature extractor Numeric Lua Lunatic Python SciLua Lua - Numerical Algorithms Lunum Demos and Scripts Core torch7 demos repository . * linear-regression, logistic-regression * face detector (training and detection as separate demos) * mst-based-segmenter * train-a-digit-classifier * train-autoencoder * optical flow demo * train-on-housenumbers * train-on-cifar * tracking with deep nets * kinect demo * filter-bank visualization * saliency-networks Training a Convnet for the Galaxy-Zoo Kaggle challenge(CUDA demo) Music Tagging - Music Tagging scripts for torch7 torch-datasets - Scripts to load several popular datasets including: * BSR 500 * CIFAR-10 * COIL * Street View House Numbers * MNIST * NORB Atari2600 - Scripts to generate a dataset with static frames from the Arcade Learning Environment Matlab ¶ Computer Vision Contourlets - MATLAB source code that implements the contourlet transform and its utility functions. Shearlets - MATLAB code for shearlet transform Curvelets - The Curvelet transform is a higher dimensional generalization of the Wavelet transform designed to represent images at different scales and different angles. Bandlets - MATLAB code for bandlet transform mexopencv - Collection and a development kit of MATLAB mex functions for OpenCV library Natural Language Processing NLP - An NLP library for Matlab General-Purpose Machine Learning Training a deep autoencoder or a classifier on MNIST Convolutional-Recursive Deep Learning for 3D Object Classification - Convolutional-Recursive Deep Learning for 3D Object Classification[DEEP LEARNING] t-Distributed Stochastic Neighbor Embedding technique for dimensionality reduction that is particularly well suited for the visualization of high-dimensional datasets. Spider - The spider is intended to be a complete object orientated environment for machine learning in Matlab. LibSVM - A Library for Support Vector Machines LibLinear - A Library for Large Linear Classification Machine Learning Module - Class on machine w/ PDF,lectures,code Caffe - A deep learning framework developed with cleanliness, readability, and speed in mind. Pattern Recognition Toolbox - A complete object-oriented environment for machine learning in Matlab. Pattern Recognition and Machine Learning - This package contains the matlab implementation of the algorithms described in the book Pattern Recognition and Machine Learning by C. Bishop. Optunity - A library dedicated to automated hyperparameter optimization with a simple, lightweight API to facilitate drop-in replacement of grid search. Optunity is written in Python but interfaces seamlessly with MATLAB. Data Analysis / Data Visualization matlab_gbl - MatlabBGL is a Matlab package for working with graphs. gamic - Efficient pure-Matlab implementations of graph algorithms to complement MatlabBGL’s mex functions. .NET ¶ Computer Vision OpenCVDotNet - A wrapper for the OpenCV project to be used with .NET applications. Emgu CV - Cross platform wrapper of OpenCV which can be compiled in Mono to e run on Windows, Linus, Mac OS X, iOS, and Android. AForge.NET - Open source C# framework for developers and researchers in the fields of Computer Vision and Artificial Intelligence. Development has now shifted to GitHub. Accord.NET - Together with AForge.NET, this library can provide image processing and computer vision algorithms to Windows, Windows RT and Windows Phone. Some components are also available for Java and Android. Natural Language Processing Stanford.NLP for .NET - A full port of Stanford NLP packages to .NET and also available precompiled as a NuGet package. General-Purpose Machine Learning Accord-Framework -The Accord.NET Framework is a complete framework for building machine learning, computer vision, computer audition, signal processing and statistical applications. Accord.MachineLearning - Support Vector Machines, Decision Trees, Naive Bayesian models, K-means, Gaussian Mixture models and general algorithms such as Ransac, Cross-validation and Grid-Search for machine-learning applications. This package is part of the Accord.NET Framework. DiffSharp for machine learning and optimization applications. Operations can be nested to any level, meaning that you can compute exact higher-order derivatives and differentiate functions that are internally making use of differentiation, for applications such as hyperparameter optimization. Vulpes - Deep belief and deep learning implementation written in F# and leverages CUDA GPU execution with Alea.cuBase. Encog - An advanced neural network and machine learning framework. Encog contains classes to create a wide variety of networks, as well as support classes to normalize and process data for these neural networks. Encog trains using multithreaded resilient propagation. Encog can also make use of a GPU to further speed processing time. A GUI based workbench is also provided to help model and train neural networks. Neural Network Designer - DBMS management system and designer for neural networks. The designer application is developed using WPF, and is a user interface which allows you to design your neural network, query the network, create and configure chat bots that are capable of asking questions and learning from your feed back. The chat bots can even scrape the internet for information to return in their output as well as to use for learning. Infer.NET - Infer.NET is a framework for running Bayesian inference in graphical models. One can use Infer.NET to solve many different kinds of machine learning problems, from standard problems like classification, recommendation or clustering through to customised solutions to domain-specific problems. Infer.NET has been used in a wide variety of domains including information retrieval, bioinformatics, epidemiology, vision, and many others. Data Analysis / Data Visualization numl - numl is a machine learning library intended to ease the use of using standard modeling techniques for both prediction and clustering. Math.NET Numerics - Numerical foundation of the Math.NET project, aiming to provide methods and algorithms for numerical computations in science, engineering and every day use. Supports .Net 4.0, .Net 3.5 and Mono on Windows, Linux and Mac; Silverlight 5, WindowsPhone/SL 8, WindowsPhone 8.1 and Windows 8 with PCL Portable Profiles 47 and 344; Android/iOS with Xamarin. Sho to enable fast and flexible prototyping. The environment includes powerful and efficient libraries for linear algebra as well as data visualization that can be used from any .NET language, as well as a feature-rich interactive shell for rapid development. Objective C ¶ General-Purpose Machine Learning YCML . MLPNeuralNet - Fast multilayer perceptron neural network library for iOS and Mac OS X. MLPNeuralNet predicts new examples by trained neural network. It is built on top of the Apple’s Accelerate Framework, using vectorized operations and hardware acceleration if available. MAChineLearning - An Objective-C multilayer perceptron library, with full support for training through backpropagation. Implemented using vDSP and vecLib, it’s 20 times faster than its Java equivalent. Includes sample code for use from Swift. BPN-NeuralNetwork . This network can be used in products recommendation, user behavior analysis, data mining and data analysis. Multi-Perceptron-NeuralNetwork and designed unlimited-hidden-layers. KRHebbian-Algorithm in neural network of Machine Learning. KRKmeans-Algorithm - It implemented K-Means the clustering and classification algorithm. It could be used in data mining and image compression. KRFuzzyCMeans-Algorithm the fuzzy clustering / classification algorithm on Machine Learning. It could be used in data mining and image compression. OCaml ¶ General-Purpose Machine Learning Oml - A general statistics and machine learning library. GPR - Efficient Gaussian Process Regression in OCaml. Libra-Tk - Algorithms for learning and inference with discrete probabilistic models. TensorFlow - OCaml bindings for TensorFlow. PHP ¶ Natural Language Processing jieba-php - Chinese Words Segmentation Utilities. General-Purpose Machine Learning PHP-ML - Machine Learning library for PHP. Algorithms, Cross Validation, Neural Network, Preprocessing, Feature Extraction and much more in one library. PredictionBuilder - A library for machine learning that builds predictions using a linear regression. Rubix ML - A high-level machine learning and deep learning library for the PHP language. Python ¶ Computer Vision Scikit-Image - A collection of algorithms for image processing in Python. SimpleCV - An open source computer vision framework that gives access to several high-powered computer vision libraries, such as OpenCV. Written on Python and runs on Mac, Windows, and Ubuntu Linux. Vigranumpy - Python bindings for the VIGRA C++ computer vision library. OpenFace - Free and open source face recognition with deep neural networks. PCV - Open source Python module for computer vision Natural Language Processing NLTK - A leading platform for building Python programs to work with human language data. Pattern - A web mining module for the Python programming language. It has tools for natural language processing, machine learning, among others. Quepy - A python framework to transform natural language questions to queries in a database query language TextBlob tasks. Stands on the giant shoulders of NLTK and Pattern, and plays nicely with both. YAlign - A sentence aligner, a friendly tool for extracting parallel sentences from comparable corpora. jieba - Chinese Words Segmentation Utilities. SnowNLP - A library for processing Chinese text. spammy - A library for email Spam filtering built on top of nltk loso - Another Chinese segmentation library. genius - A Chinese segment base on Conditional Random Field. KoNLPy - A Python package for Korean natural language processing. nut - Natural language Understanding Toolkit Rosetta BLLIP Parser PyNLPl](https://github.com/proycon/pynlpl) - Python Natural Language Processing Library. General purpose NLP library for Python. Also contains some specific modules for parsing common NLP formats, most notably for [FoLiA , but also ARPA language models, Moses phrasetables, GIZA++ alignments. python-ucto python-frog python-zpar](https://github.com/EducationalTestingService/python-zpar) - Python bindings for [ZPar , a statistical part-of-speech-tagger, constiuency parser, and dependency parser for English. colibri-core - Python binding to C++ library for extracting and working with with basic linguistic constructions such as n-grams and skipgrams in a quick and memory-efficient way. spaCy - Industrial strength NLP with Python and Cython. PyStanfordDependencies - Python interface for converting Penn Treebank trees to Stanford Dependencies. Distance - Levenshtein and Hamming distance computation Fuzzy Wuzzy - Fuzzy String Matching in Python jellyfish - a python library for doing approximate and phonetic matching of strings. editdistance - fast implementation of edit distance textacy - higher-level NLP built on Spacy stanford-corenlp-python](https://github.com/dasmith/stanford-corenlp-python) - Python wrapper for [Stanford CoreNLP General-Purpose Machine Learning auto_ml - Automated machine learning for production and analytics. Lets you focus on the fun parts of ML, while outputting production-ready code, and detailed analytics of your dataset and results. Includes support for NLP, XGBoost, LightGBM, and soon, deep learning. machine learning](https://github.com/jeff1evesque/machine-learning) - automated build consisting of a [web-interface](https://github.com/jeff1evesque/machine-learning#web-interface), and set of [programmatic-interface , are stored into a NoSQL datastore. XGBoost Library Bayesian Methods for Hackers - Book/iPython notebooks on Probabilistic Programming in Python Featureforge A set of tools for creating and testing machine learning features, with a scikit-learn compatible API MLlib in Apache Spark - Distributed machine learning library in Spark Hydrosphere Mist - a service for deployment Apache Spark MLLib machine learning models as realtime, batch or reactive web services. scikit-learn - A Python module for machine learning built on top of SciPy. metric-learn - A Python module for metric learning. SimpleAI Python implementation of many of the artificial intelligence algorithms described on the book “Artificial Intelligence, a Modern Approach”. It focuses on providing an easy to use, well documented and tested library. astroML - Machine Learning and Data Mining for Astronomy. graphlab-create implemented on top of a disk-backed DataFrame. BigML - A library that contacts external servers. pattern - Web mining module for Python. NuPIC - Numenta Platform for Intelligent Computing. Pylearn2](https://github.com/lisa-lab/pylearn2) - A Machine Learning library based on [Theano . keras](https://github.com/fchollet/keras) - Modular neural network library based on [Theano . Lasagne - Lightweight library to build and train neural networks in Theano. hebel - GPU-Accelerated Deep Learning Library in Python. Chainer - Flexible neural network framework prohpet - Fast and automated time series forecasting framework by Facebook. gensim - Topic Modelling for Humans. topik - Topic modelling toolkit PyBrain - Another Python Machine Learning Library. Brainstorm - Fast, flexible and fun neural networks. This is the successor of PyBrain. Crab - A ﬂexible, fast recommender engine. python-recsys - A Python library for implementing a Recommender System. thinking bayes - Book on Bayesian Analysis Image-to-Image Translation with Conditional Adversarial Networks](https://github.com/williamFalcon/pix2pix-keras) - Implementation of image to image (pix2pix) translation from the paper by [isola et al .[DEEP LEARNING] Restricted Boltzmann Machines -Restricted Boltzmann Machines in Python. [DEEP LEARNING] Bolt - Bolt Online Learning Toolbox CoverTree - Python implementation of cover trees, near-drop-in replacement for scipy.spatial.kdtree nilearn - Machine learning for NeuroImaging in Python imbalanced-learn - Python module to perform under sampling and over sampling with various techniques. Shogun - The Shogun Machine Learning Toolbox Pyevolve - Genetic algorithm framework. Caffe - A deep learning framework developed with cleanliness, readability, and speed in mind. breze - Theano based library for deep and recurrent neural networks pyhsmm , focusing on the Bayesian Nonparametric extensions, the HDP-HMM and HDP-HSMM, mostly with weak-limit approximations. mrjob - A library to let Python program run on Hadoop. SKLL - A wrapper around scikit-learn that makes it simpler to conduct experiments. neurolab - https://github.com/zueve/neurolab Spearmint - Spearmint is a package to perform Bayesian optimization according to the algorithms outlined in the paper: Practical Bayesian Optimization of Machine Learning Algorithms. Jasper Snoek, Hugo Larochelle and Ryan P. Adams. Advances in Neural Information Processing Systems, 2012. Pebl - Python Environment for Bayesian Learning Theano - Optimizing GPU-meta-programming code generating array oriented optimizing math compiler in Python TensorFlow - Open source software library for numerical computation using data flow graphs yahmm - Hidden Markov Models for Python, implemented in Cython for speed and efficiency. python-timbl - A Python extension module wrapping the full TiMBL C++ programming interface. Timbl is an elaborate k-Nearest Neighbours machine learning toolkit. deap - Evolutionary algorithm framework. pydeep - Deep Learning In Python mlxtend - A library consisting of useful tools for data science and machine learning tasks. neon](https://github.com/NervanaSystems/neon) - Nervana’s [high-performance Python-based Deep Learning framework [DEEP LEARNING] Optunity - A library dedicated to automated hyperparameter optimization with a simple, lightweight API to facilitate drop-in replacement of grid search. Neural Networks and Deep Learning - Code samples for my book “Neural Networks and Deep Learning” [DEEP LEARNING] Annoy - Approximate nearest neighbours implementation skflow - Simplified interface for TensorFlow, mimicking Scikit Learn. TPOT - Tool that automatically creates and optimizes machine learning pipelines using genetic programming. Consider it your personal data science assistant, automating a tedious part of machine learning. pgmpy A python library for working with Probabilistic Graphical Models. DIGITS is a web application for training deep learning models. Orange - Open source data visualization and data analysis for novices and experts. MXNet - Lightweight, Portable, Flexible Distributed/Mobile Deep Learning with Dynamic, Mutation-aware Dataflow Dep Scheduler; for Python, R, Julia, Go, Javascript and more. milk - Machine learning toolkit focused on supervised classification. TFLearn - Deep learning library featuring a higher-level API for TensorFlow. REP - an IPython-based environment for conducting data-driven research in a consistent and reproducible way. REP is not trying to substitute scikit-learn, but extends it and provides better user experience. rgf_python Library. gym - OpenAI Gym is a toolkit for developing and comparing reinforcement learning algorithms. skbayes - Python package for Bayesian Machine Learning with scikit-learn API fuku-ml - Simple machine learning library, including Perceptron, Regression, Support Vector Machine, Decision Tree and more, it’s easy to use and easy to learn for beginners. Data Analysis / Data Visualization SciPy - A Python-based ecosystem of open-source software for mathematics, science, and engineering. NumPy - A fundamental package for scientific computing with Python. Numba complier to LLVM aimed at scientific Python by the developers of Cython and NumPy. NetworkX - A high-productivity software for complex networks. igraph - binding to igraph library - General purpose graph library Pandas - A library providing high-performance, easy-to-use data structures and data analysis tools. Open Mining PyMC - Markov Chain Monte Carlo sampling toolkit. zipline - A Pythonic algorithmic trading library. PyDy - Short for Python Dynamics, used to assist with workflow in the modeling of dynamic motion based around NumPy, SciPy, IPython, and matplotlib. SymPy - A Python library for symbolic mathematics. statsmodels - Statistical modeling and econometrics in Python. astropy - A community Python library for Astronomy. matplotlib - A Python 2D plotting library. bokeh - Interactive Web Plotting for Python. plotly - Collaborative web plotting for Python and matplotlib. vincent - A Python to Vega translator. d3py](https://github.com/mikedewar/d3py) - A plotting library for Python, based on [D3.js . PyDexter - Simple plotting for Python. Wrapper for D3xterjs; easily render charts in-browser. ggplot - Same API as ggplot2 for R. ggfortify - Unified interface to ggplot2 popular R packages. Kartograph.py - Rendering beautiful SVG maps in Python. pygal - A Python SVG Charts Creator. PyQtGraph - A pure-python graphics and GUI library built on PyQt4 / PySide and NumPy. pycascading Petrel - Tools for writing, submitting, debugging, and monitoring Storm topologies in pure Python. Blaze - NumPy and Pandas interface to Big Data. emcee - The Python ensemble sampling toolkit for affine-invariant MCMC. windML - A Python Framework for Wind Energy Analysis and Prediction vispy - GPU-based high-performance interactive OpenGL 2D/3D data visualization library cerebro2 A web-based visualization and debugging platform for NuPIC. NuPIC Studio An all-in-one NuPIC Hierarchical Temporal Memory visualization and debugging super-tool! SparklingPandas Seaborn - A python visualization library based on matplotlib bqplot pastalog - Simple, realtime visualization of neural network training performance. caravel - A data exploration platform designed to be visual, intuitive, and interactive. Dora - Tools for exploratory data analysis in Python. Ruffus - Computation Pipeline library for python. SOMPY . somoclu Massively parallel self-organizing maps: accelerate training on multicore CPUs, GPUs, and clusters, has python API. HDBScan - implementation of the hdbscan algorithm in Python - used for clustering visualize_ML - A python package for data exploration and data analysis. scikit-plot - A visualization library for quick and easy generation of common plots in data analysis and machine learning. Neural networks Neural networks - NeuralTalk is a Python+numpy project for learning Multimodal Recurrent Neural Networks that describe images with sentences. Neuron neural networks learned with Gradient descent or LeLevenberg–Marquardt algorithm. Data Driven Code - Very simple implementation of neural networks for dummies in python without using any libraries, with detailed comments. Ruby ¶ Natural Language Processing Treat - Text REtrieval and Annotation Toolkit, definitely the most comprehensive toolkit I’ve encountered so far for Ruby Ruby Linguistics - Linguistics is a framework for building linguistic utilities for Ruby objects in any language. It includes a generic language-independent front end, a module for mapping language codes into language names, and a module which contains various English-language utilities. Stemmer - Expose libstemmer_c to Ruby Ruby Wordnet - This library is a Ruby interface to WordNet Raspel - raspell is an interface binding for ruby UEA Stemmer - Ruby port of UEALite Stemmer - a conservative stemmer for search and indexing Twitter-text-rb - A library that does auto linking and extraction of usernames, lists and hashtags in tweets General-Purpose Machine Learning Ruby Machine Learning - Some Machine Learning algorithms, implemented in Ruby Machine Learning Ruby jRuby Mahout - JRuby Mahout is a gem that unleashes the power of Apache Mahout in the world of JRuby. CardMagic-Classifier - A general classifier module to allow Bayesian and other types of classifications. rb-libsvm - Ruby language bindings for LIBSVM which is a Library for Support Vector Machines Random Forester - Creates Random Forest classifiers from PMML files Data Analysis / Data Visualization rsruby - Ruby - R bridge data-visualization-ruby - Source code and supporting content for my Ruby Manor presentation on Data Visualisation with Ruby ruby-plot - gnuplot wrapper for ruby, especially for plotting roc curves into svg files plot-rb - A plotting library in Ruby built on top of Vega and D3. scruffy - A beautiful graphing toolkit for Ruby SciRuby Glean - A data management tool for humans Bioruby Arel Misc Big Data For Chimps Listof](https://github.com/kevincobain2000/listof) - Community based data collection, packed in gem. Get list of pretty much anything (stop words, countries, non words) in txt, json or hash. [Demo/Search for a list Rust ¶ General-Purpose Machine Learning deeplearn-rs - deeplearn-rs provides simple networks that use matrix multiplication, addition, and ReLU under the MIT license. rustlearn - a machine learning framework featuring logistic regression, support vector machines, decision trees and random forests. rusty-machine - a pure-rust machine learning library. leaf](https://github.com/autumnai/leaf) - open source framework for machine intelligence, sharing concepts from TensorFlow and Caffe. Available under the MIT license. [**[Deprecated]** RustNN - RustNN is a feedforward neural network library. R ¶ General-Purpose Machine Learning ahaz - ahaz: Regularization for semiparametric additive hazards regression arules - arules: Mining Association Rules and Frequent Itemsets biglasso - biglasso: Extending Lasso Model Fitting to Big Data in R bigrf - bigrf: Big Random Forests: Classification and Regression Forests for Large Data Sets `bigRR > n cases>`__ bmrm - bmrm: Bundle Methods for Regularized Risk Minimization Package Boruta - Boruta: A wrapper algorithm for all-relevant feature selection bst - bst: Gradient Boosting C50 - C50: C5.0 Decision Trees and Rule-Based Models caret - Classification and Regression Training: Unified interface to ~150 ML algorithms in R. caretEnsemble - caretEnsemble: Framework for fitting multiple caret models as well as creating ensembles of such models. Clever Algorithms For Machine Learning CORElearn - CORElearn: Classification, regression, feature evaluation and ordinal evaluation CoxBoost - CoxBoost: Cox models by likelihood based boosting for a single survival endpoint or competing risks Cubist - Cubist: Rule- and Instance-Based Regression Modeling e1071 , TU Wien earth - earth: Multivariate Adaptive Regression Spline Models elasticnet - elasticnet: Elastic-Net for Sparse Estimation and Sparse PCA ElemStatLearn - ElemStatLearn: Data sets, functions and examples from the book: “The Elements of Statistical Learning, Data Mining, Inference, and Prediction” by Trevor Hastie, Robert Tibshirani and Jerome Friedman Prediction” by Trevor Hastie, Robert Tibshirani and Jerome Friedman evtree - evtree: Evolutionary Learning of Globally Optimal Trees forecast - forecast: Timeseries forecasting using ARIMA, ETS, STLM, TBATS, and neural network models forecastHybrid - forecastHybrid: Automatic ensemble and cross validation of ARIMA, ETS, STLM, TBATS, and neural network models from the “forecast” package fpc - fpc: Flexible procedures for clustering frbs - frbs: Fuzzy Rule-based Systems for Classification and Regression Tasks GAMBoost - GAMBoost: Generalized linear and additive models by likelihood based boosting gamboostLSS - gamboostLSS: Boosting Methods for GAMLSS gbm - gbm: Generalized Boosted Regression Models glmnet - glmnet: Lasso and elastic-net regularized generalized linear models glmpath - glmpath: L1 Regularization Path for Generalized Linear Models and Cox Proportional Hazards Model GMMBoost - GMMBoost: Likelihood-based Boosting for Generalized mixed models grplasso - grplasso: Fitting user specified models with Group Lasso penalty grpreg - grpreg: Regularization paths for regression models with grouped covariates h2o - A framework for fast, parallel, and distributed machine learning algorithms at scale – Deeplearning, Random forests, GBM, KMeans, PCA, GLM hda - hda: Heteroscedastic Discriminant Analysis Introduction to Statistical Learning ipred - ipred: Improved Predictors kernlab - kernlab: Kernel-based Machine Learning Lab klaR - klaR: Classification and visualization lars - lars: Least Angle Regression, Lasso and Forward Stagewise lasso2 - lasso2: L1 constrained estimation aka ‘lasso’ LiblineaR - LiblineaR: Linear Predictive Models Based On The Liblinear C/C++ Library LogicReg - LogicReg: Logic Regression Machine Learning For Hackers maptree - maptree: Mapping, pruning, and graphing tree models mboost - mboost: Model-Based Boosting medley - medley: Blending regression models, using a greedy stepwise approach mlr - mlr: Machine Learning in R mvpart - mvpart: Multivariate partitioning ncvreg - ncvreg: Regularization paths for SCAD- and MCP-penalized regression models nnet - nnet: Feed-forward Neural Networks and Multinomial Log-Linear Models oblique.tree - oblique.tree: Oblique Trees for Classification Data pamr - pamr: Pam: prediction analysis for microarrays party - party: A Laboratory for Recursive Partytioning partykit - partykit: A Toolkit for Recursive Partytioning penalized penalized estimation in GLMs and in the Cox model penalizedLDA - penalizedLDA: Penalized classification using Fisher’s linear discriminant penalizedSVM - penalizedSVM: Feature Selection SVM using penalty functions quantregForest - quantregForest: Quantile Regression Forests randomForest - randomForest: Breiman and Cutler’s random forests for classification and regression randomForestSRC rattle - rattle: Graphical user interface for data mining in R rda - rda: Shrunken Centroids Regularized Discriminant Analysis rdetools in Feature Spaces REEMtree Data relaxo - relaxo: Relaxed Lasso rgenoud - rgenoud: R version of GENetic Optimization Using Derivatives rgp - rgp: R genetic programming framework Rmalschains in R rminer in classification and regression ROCR - ROCR: Visualizing the performance of scoring classifiers RoughSets - RoughSets: Data Analysis Using Rough Set and Fuzzy Rough Set Theories rpart - rpart: Recursive Partitioning and Regression Trees RPMM - RPMM: Recursively Partitioned Mixture Model RSNNS RWeka - RWeka: R/Weka interface RXshrink - RXshrink: Maximum Likelihood Shrinkage via Generalized Ridge or Least Angle Regression sda - sda: Shrinkage Discriminant Analysis and CAT Score Variable Selection SDDA - SDDA: Stepwise Diagonal Discriminant Analysis SuperLearner](https://github.com/ecpolley/SuperLearner) and [subsemble - Multi-algorithm ensemble learning packages. svmpath - svmpath: svmpath: the SVM Path algorithm tgp - tgp: Bayesian treed Gaussian process models tree - tree: Classification and regression trees varSelRF - varSelRF: Variable selection using random forests XGBoost.R Library Optunity - A library dedicated to automated hyperparameter optimization with a simple, lightweight API to facilitate drop-in replacement of grid search. Optunity is written in Python but interfaces seamlessly to R. igraph - binding to igraph library - General purpose graph library MXNet - Lightweight, Portable, Flexible Distributed/Mobile Deep Learning with Dynamic, Mutation-aware Dataflow Dep Scheduler; for Python, R, Julia, Go, Javascript and more. TDSP-Utilities . Data Analysis / Data Visualization ggplot2 - A data visualization package based on the grammar of graphics. SAS ¶ General-Purpose Machine Learning Enterprise Miner - Data mining and machine learning that creates deployable models using a GUI or code. Factory Miner - Automatically creates deployable machine learning models across numerous market or customer segments using a GUI. Data Analysis / Data Visualization SAS/STAT - For conducting advanced statistical analysis. University Edition - FREE! Includes all SAS packages necessary for data analysis and visualization, and includes online SAS courses. High Performance Machine Learning High Performance Data Mining - Data mining and machine learning that creates deployable models using a GUI or code in an MPP environment, including Hadoop. High Performance Text Mining - Text mining using a GUI or code in an MPP environment, including Hadoop. Natural Language Processing Contextual Analysis - Add structure to unstructured text using a GUI. Sentiment Analysis - Extract sentiment from text using a GUI. Text Miner - Text mining using a GUI or code. Demos and Scripts ML_Tables - Concise cheat sheets containing machine learning best practices. enlighten-apply - Example code and materials that illustrate applications of SAS machine learning techniques. enlighten-integration - Example code and materials that illustrate techniques for integrating SAS with other analytics technologies in Java, PMML, Python and R. enlighten-deep - Example code and materials that illustrate using neural networks with several hidden layers in SAS. dm-flow - Library of SAS Enterprise Miner process flow diagrams to help you learn by example about specific data mining topics. Scala ¶ Natural Language Processing ScalaNLP - ScalaNLP is a suite of machine learning and numerical computing libraries. Breeze - Breeze is a numerical processing library for Scala. Chalk - Chalk is a natural language processing library. FACTORIE - FACTORIE is a toolkit for deployable probabilistic modeling, implemented as a software library in Scala. It provides its users with a succinct language for creating relational factor graphs, estimating parameters and performing inference. Data Analysis / Data Visualization MLlib in Apache Spark - Distributed machine learning library in Spark Hydrosphere Mist - a service for deployment Apache Spark MLLib machine learning models as realtime, batch or reactive web services. Scalding - A Scala API for Cascading Summing Bird - Streaming MapReduce with Scalding and Storm Algebird - Abstract Algebra for Scala xerial - Data management utilities for Scala simmer - Reduce your data. A unix filter for algebird-powered aggregation. PredictionIO - PredictionIO, a machine learning server for software developers and data engineers. BIDMat - CPU and GPU-accelerated matrix library intended to support large-scale exploratory data analysis. Wolfe Declarative Machine Learning Flink - Open source platform for distributed stream and batch data processing. Spark Notebook - Interactive and Reactive Data Science using Scala and Spark. General-Purpose Machine Learning Conjecture - Scalable Machine Learning in Scalding brushfire - Distributed decision tree ensemble learning in Scala ganitha - scalding powered machine learning adam - A genomics processing engine and specialized file format built using Apache Avro, Apache Spark and Parquet. Apache 2 licensed. bioscala - Bioinformatics for the Scala programming language BIDMach - CPU and GPU-accelerated Machine Learning Library. Figaro - a Scala library for constructing probabilistic models. H2O Sparkling Water - H2O and Spark interoperability. FlinkML in Apache Flink - Distributed machine learning library in Flink DynaML - Scala Library/REPL for Machine Learning Research Saul - Flexible Declarative Learning-Based Programming. SwiftLearner - Simply written algorithms to help study ML or write your own implementations. Swift ¶ General-Purpose Machine Learning Swift AI - Highly optimized artificial intelligence and machine learning library written in Swift. BrainCore - The iOS and OS X neural network framework swix - A bare bones library that includes a general matrix language and wraps some OpenCV for iOS development. DeepLearningKit an Open Source Deep Learning Framework for Apple’s iOS, OS X and tvOS. It currently allows using deep convolutional neural network models trained in Caffe on Apple operating systems. AIToolbox - A toolbox framework of AI modules written in Swift: Graphs/Trees, Linear Regression, Support Vector Machines, Neural Networks, PCA, KMeans, Genetic Algorithms, MDP, Mixture of Gaussians. MLKit - A simple Machine Learning Framework written in Swift. Currently features Simple Linear Regression, Polynomial Regression, and Ridge Regression. Swift Brain - The first neural network / machine learning library written in Swift. This is a project for AI algorithms in Swift for iOS and OS X development. This project includes algorithms focused on Bayes theorem, neural networks, SVMs, Matrices, etc..","[-2.71831393e-01 -8.05506334e-02 -5.86052537e-02 -2.62097865e-01
  4.94733274e-01  7.47750044e-01 -7.05166906e-03 -3.12408302e-02
 -1.90533310e-01 -1.50203064e-01  3.68621767e-01  2.92284098e-02
  6.17771000e-02  4.00931239e-01 -1.65598631e-01 -5.46236217e-01
  8.31487253e-02  2.47005075e-02  1.82135552e-01 -2.61785030e-01
 -1.89402252e-01 -1.31950319e-01 -1.76839530e-01 -4.93920684e-01
  4.20337260e-01  4.60451365e-01  1.72309831e-01  1.84735566e-01
 -1.36154041e-01  2.61666328e-02 -9.40889269e-02 -5.34779951e-02
 -6.21732995e-02  2.58421451e-01  1.40973687e-01 -7.07862973e-02
  1.05777800e-01  1.16962813e-01 -3.84977192e-01 -2.71843541e-02
  3.92158002e-01  1.44298717e-01  3.95791307e-02  4.63292629e-01
  6.95640594e-03 -4.98506539e-02 -7.23423541e-01  2.66837090e-01
  1.91388309e-01  1.43708631e-01  1.33423790e-01  2.21717022e-02
 -7.11576343e-02 -4.79873493e-02  2.23184973e-02 -1.21389963e-02
 -1.31527096e-01 -3.16772491e-01  3.56413424e-01  6.29732162e-02
  1.12362921e-01  1.02679826e-01 -2.36892015e-01  5.98145366e-01
  3.11156154e-01 -3.40129972e-01  3.00585590e-02  4.31506008e-01
  1.89076126e-01  3.37016061e-02  1.01355657e-01  1.70713484e-01
  1.43762171e-01 -1.55144334e-01 -2.10149884e-02 -6.40425831e-02
 -2.66907632e-01 -9.97886062e-03 -6.04665339e-01 -1.35875763e-02
  9.57087576e-02  5.81445098e-02  3.22146893e-01 -9.95719060e-02
  2.95873374e-01  1.28960475e-01  1.01048462e-02 -2.53534049e-01
  9.80784744e-02  1.08771607e-01 -4.49256599e-02 -2.78441787e-01
 -2.76629806e-01 -1.70329064e-01  7.62892663e-02 -9.64332968e-02
 -2.54781008e-01 -9.26285237e-02  9.58811492e-02  9.18801427e-02
 -2.04133421e-01  7.70021528e-02  2.23249897e-01 -1.45841226e-01
  2.28643447e-01  9.05543029e-01 -3.13561022e-01  1.56100094e-03
 -1.52261764e-01  7.46386945e-02  1.44534126e-01 -3.26357543e-01
  7.16007650e-02 -2.02357724e-01 -6.73577338e-02 -5.25047362e-01
  3.57391745e-01  9.40427929e-02 -3.30408841e-01  4.75910515e-01
 -1.51094303e-01 -6.50564730e-02 -9.66160670e-02  3.39174181e-01
 -2.26190001e-01  7.31452703e-02  1.91219598e-01  2.28540719e-01
 -3.90975952e-01 -9.44080502e-02 -1.34220690e-01 -1.83753800e-02
 -2.75047213e-01 -6.68951631e-01 -9.29861516e-02 -2.36659676e-01
 -2.62651861e-01 -7.72219747e-02 -2.48944014e-01  1.94085136e-01
 -2.27013797e-01  1.64768383e-01 -1.96260408e-01  1.10635087e-02
  2.29362428e-01  1.07515216e-01 -6.13938347e-02  7.92642087e-02
  4.89664048e-01  4.74922925e-01 -9.60232317e-02  3.77777129e-01
  2.42563635e-01  1.33108392e-01 -3.76545757e-01  6.15847297e-03
 -1.45501822e-01 -2.30770886e-01  1.21246375e-01 -1.62089497e-01
  4.09510851e-01  1.30418956e-01  7.66575709e-03 -2.04946846e-04
  1.26437828e-01 -3.22280563e-02 -4.00769502e-01  2.63461053e-01
 -3.09896648e-01  1.11116469e-02  3.96854952e-02  4.15517747e-01
 -2.62082100e-01  3.31575647e-02 -2.62984931e-01  2.45200574e-01
  6.58385754e-02 -1.08813718e-01 -1.76878758e-02  7.17044473e-02
 -1.55612171e-01 -4.51519638e-02  2.23239630e-01  6.60698563e-02
  4.08432111e-02  9.00867209e-02  2.44751006e-01  5.67665815e-01
  4.52345043e-01  1.42008826e-01 -1.81952953e-01 -1.38998013e-02
  1.33331344e-01 -5.45380116e-02  2.34289378e-01 -1.30598217e-01
  2.80515760e-01  2.50555038e-01  5.40381391e-03 -3.60855758e-01
 -5.14556281e-03 -9.80844870e-02 -1.41290754e-01 -7.03120604e-04
  6.10108599e-02 -3.76785994e-02  2.42743582e-01 -1.06227390e-01
  2.49283060e-01 -3.99165489e-02  1.72686338e-01  8.73631954e-01
 -3.52256894e-02  6.18839502e-01  1.36580437e-01 -3.81547175e-02
 -1.95269734e-01  5.68707943e-01 -6.56837896e-02  1.46902084e-01
  3.74168530e-02  9.07684192e-02  3.99058461e-01  4.03092727e-02
  3.75321746e-01  9.71643105e-02  3.35671306e-02 -4.07546870e-02
  1.30851209e-01 -7.43816853e-01  6.23545796e-02  2.75086239e-02
 -1.91170096e-01  7.62698799e-02  7.50309229e-02  1.18198059e-02
 -5.19960858e-02  1.69333547e-01 -1.53430283e-01 -8.12178925e-02
  2.43744031e-01 -6.81949556e-02  1.36596724e-01  5.29760867e-03
  7.82643259e-02  2.49298900e-01  7.35202730e-02 -2.80905604e-01
 -1.37975544e-01 -3.99269462e-01 -1.08345732e-01 -1.15603339e-02
 -2.43086349e-02  1.19883560e-01  8.26947838e-02 -2.75810510e-02
 -3.42401862e-03 -2.27424920e-01 -3.19104008e-02  4.99025285e-02
 -3.76371086e-01 -2.66088903e-01  6.82891756e-02  9.35980082e-02
 -2.88445875e-02  3.89676541e-02  2.58872718e-01 -1.20421991e-01
  6.83935285e-02 -1.12416625e-01 -1.37403905e-01  5.06942533e-03
  3.49277020e-01  4.39615324e-02  3.40896361e-02 -4.07880768e-02
 -1.97964236e-01  4.13626283e-02  3.05819094e-01  1.29350722e-01
  2.62888614e-03  2.88965762e-01  1.14509732e-01  1.78490132e-01
  2.47887328e-01 -1.86080068e-01 -1.96048170e-01 -3.25731814e-01
  1.01434819e-01  7.35139400e-02  1.03307992e-01 -1.99794054e-01
  6.38584644e-02  1.90885827e-01 -7.18848705e-02  1.44114316e-01
  1.51965499e-01 -2.21491382e-02  3.31873819e-03  2.44281590e-02
  4.66292091e-02  3.10273208e-02  6.89830780e-01  1.56722039e-01
 -3.81501555e-01 -5.97252548e-02 -2.67372936e-01  2.31741145e-01
  1.28217220e-01 -2.07869679e-01 -6.73708394e-02 -1.75169855e-01
  2.77530432e-01 -3.38384770e-02 -2.12746747e-02  8.72702375e-02
 -2.02532530e-01  5.92111684e-02  1.36401616e-02 -4.68976423e-02
  1.74310684e-01  7.25231878e-03  6.51966333e-02  2.10011810e-01
  6.21416271e-02  5.86006418e-02 -3.92243087e-01 -5.27496815e-01
 -2.04690203e-01 -1.92237183e-01  2.59846866e-01  4.34604362e-02
 -7.60656521e-02 -2.48436898e-01  8.76097828e-02 -1.19273119e-01
  4.58429456e-02 -1.61609024e-01 -3.32955599e-01 -1.23117976e-01
  2.18382657e-01  4.75317657e-01  1.44768134e-02  1.19851008e-01
 -1.86494678e-01  1.22656047e-01 -2.70699393e-02  1.14655599e-01
 -7.77752418e-03  1.55358061e-01  5.95667586e-02 -2.00197309e-01
 -4.09700274e-02  2.76352972e-01 -8.36683288e-02 -3.14661026e-01
 -1.82446614e-01  1.37493610e-01 -5.83682135e-02 -9.07764398e-03
  2.25170195e-01  2.35504299e-01 -1.52304340e-02  1.32670309e-02
 -1.82450190e-03  6.37929663e-02 -5.60314715e-01  9.96719673e-02
  7.23931342e-02 -2.08834231e-01  7.03465939e-02  1.64008178e-02
  2.11586013e-01 -1.97719067e-01  3.26291323e-01 -7.34732896e-02
  1.63476735e-01  3.90996262e-02  7.31938053e-04  2.49366716e-01
 -1.08315632e-01  1.04754210e-01 -1.10519253e-01  3.57419476e-02
  1.79750528e-02  7.48190731e-02 -1.32620335e-06 -9.83945653e-02
  1.02453426e-01 -2.46006660e-02 -3.23709190e-01 -1.21138051e-01
  1.03224739e-02 -2.05791712e-01 -2.05842674e-01  4.42265943e-02
  1.08300596e-01 -3.77854526e-01  2.81950682e-01  4.56297815e-01
 -1.34661287e-01 -6.22158498e-02  1.13586962e-01 -4.29469079e-01
  6.19666949e-02 -1.77685648e-01  9.83998477e-02  1.18230030e-01
 -2.80478239e-01 -1.74808472e-01 -7.42661059e-02 -1.78501546e-01
  2.21410930e-01 -6.95108175e-02  1.08815253e-01  1.36404753e-01
  4.86199558e-02  1.34015232e-01 -1.32566094e-01 -1.41880453e-01
 -2.79409081e-01 -1.75465018e-01 -1.68632895e-01 -1.61900446e-01
 -4.70099330e-01  2.84492314e-01 -5.25173619e-02  2.68362224e-01
  1.29755393e-01  1.60938263e-01 -2.39649236e-01 -2.05303937e-01
  5.70754766e-01 -1.46660596e-01  7.12661892e-02  1.40582189e-01
  1.36357754e-01 -3.41206342e-01  2.63286114e-01  8.00855383e-02
  4.99950200e-02  1.85623899e-01 -3.59629802e-02 -2.86394238e-01
 -6.97840601e-02  1.19710136e-02 -1.53703839e-01  1.79705605e-01
 -9.01599601e-02  1.22680649e-01 -1.30142912e-01 -2.09045440e-01
  7.52227828e-02 -1.77924752e-01 -2.81322539e-01 -2.38881931e-01
  7.50948116e-03 -7.84033537e-02  2.79764030e-02 -1.26662068e-02
  1.01388857e-01  5.49768806e-02 -1.25034466e-01  8.14799666e-02
 -2.18976498e-01  1.80288851e-01  3.03761363e-01 -2.66794655e-02
 -2.88098246e-01  1.05306864e-01  6.64112717e-02 -1.34290785e-01
 -5.16733639e-02  3.13771695e-01 -1.82550400e-01  1.93463452e-02
 -3.62185538e-01  4.95764464e-02  1.59015879e-02  6.14842307e-03
 -3.05207632e-02 -7.63879269e-02  1.25307351e-01 -3.87748927e-02
 -2.02006757e-01  1.56238869e-01  6.15122095e-02 -4.33017239e-02
 -1.14197299e-01  5.89494109e-02  3.24742049e-02  3.70810255e-02
 -2.00216144e-01  3.15342665e-01  1.88941181e-01  1.42258257e-01
 -3.28502059e-01  4.67144623e-02 -2.61306286e-01  8.60229433e-02
 -1.13332264e-01 -5.28198481e-02 -2.37819523e-01 -1.09501615e-01
 -1.01015948e-01  2.94160575e-01 -7.00422376e-03 -5.42567670e-02
 -3.80477011e-02  1.10392660e-01 -1.42291605e-01  1.72076404e-01
  1.42083734e-01  2.42395982e-01  1.37251392e-01  3.38431418e-01
  1.56830288e-02  2.78391361e-01  4.15317528e-02  5.06429613e-01
  1.39297172e-03  1.29911169e-01  1.69791952e-02  8.45180973e-02
  2.06003428e-01 -5.86872064e-02  2.62090415e-01  1.12483300e-01
  7.78312311e-02 -6.07278466e-01 -2.28104413e-01 -1.75892279e-01
 -3.63111123e-02 -3.77344936e-01  2.47917414e-01 -1.68816119e-01
  2.98650146e-01 -7.58007467e-02 -1.41899258e-01  2.87287056e-01
 -1.47764571e-02 -6.19696751e-02  2.77511507e-01 -2.81732261e-01
 -1.21018201e-01 -1.13723814e-01  4.38409150e-02  1.53581500e-01
  6.05520383e-02  5.98959699e-02  4.39823121e-01  2.66662747e-01
 -1.60861194e-01  2.77529620e-02  4.65736210e-01  1.63148254e-01
 -1.20424792e-01  1.55660994e-02  1.55658200e-02  8.23848024e-02
  3.16080660e-01 -3.84201109e-03 -2.02870727e-01  1.70977235e-01
 -2.29286894e-01  1.20871976e-01  4.73859757e-02  2.94708442e-02
  3.16867292e-01 -9.81911123e-02  7.81735033e-03  2.58860409e-01
 -1.59314927e-02 -1.68492898e-01 -2.82457411e-01  6.72479346e-02
  1.12804502e-01  7.68066227e-01 -2.57639855e-01  3.32003310e-02
 -1.69727221e-01  2.59983540e-01 -6.41920939e-02  6.65611863e-01
  1.94775850e-01 -1.05515406e-01  1.93798035e-01  7.70204961e-02
 -1.91815257e-01  1.11956261e-01 -2.62047559e-01  1.07315756e-01
 -1.35811746e-01 -4.62418310e-02 -6.01668507e-02 -2.92522252e-01
 -3.45035829e-02 -2.37452403e-01  2.37898692e-01 -2.19335202e-02
  2.68318236e-01  1.53443411e-01  6.85439482e-02  1.43027961e-01
 -2.25110963e-01 -1.45006657e-01  3.70047167e-02  1.25617355e-01
  1.17109921e-02  1.77484810e-01 -4.99205254e-02 -7.31101781e-02
 -1.68117493e-01  1.82107016e-01  5.00511751e-03 -1.40944868e-01
 -1.18759699e-01 -5.62454984e-02 -6.08315989e-02  5.64471558e-02
  1.19278535e-01 -4.34566259e-01 -1.02398813e-01  2.44312942e-01
 -4.12810408e-02  1.60845786e-01  3.98530602e-01  3.54910493e-01
  3.23213965e-01 -2.69192338e-01 -2.04744458e-01 -2.92663068e-01
 -1.49704739e-02 -3.41401756e-01 -3.75063896e-01  1.20770715e-01
  5.38169265e-01  1.78125650e-01  9.95898545e-02 -1.62473440e-01
  6.84620813e-02 -6.18614256e-02  1.82161070e-02 -1.03043079e-01
 -1.20129146e-01 -9.76550877e-02  1.07995152e-01  2.05846220e-01
 -3.58996809e-01 -1.20921150e-01  6.62076846e-02  5.28228693e-02
  4.03688788e-01 -2.45036751e-01 -1.78478301e-01  3.90844345e-02
 -2.34366119e-01  1.43241763e-01  2.95998871e-01  3.46494913e-01
  1.62893265e-01  6.20383620e-01  2.66908765e-01  1.10097736e-01
  3.86549711e-01 -4.19548869e-01  4.83678356e-02  2.18313426e-01
 -2.66562887e-02 -2.90767662e-03 -2.05105036e-01  3.83040071e-01
 -9.20162722e-02 -1.77098691e-01 -8.84890631e-02  3.22309732e-01
  6.82569027e-01  2.90628970e-01  1.30975455e-01  1.57347023e-01
  6.11500889e-02 -2.34644860e-01  3.90392363e-01  7.30414838e-02
  1.29751980e-01 -9.33455899e-02  1.08311392e-01  1.92866698e-02
 -8.84925053e-02 -2.59135932e-01 -6.41431287e-02 -1.60991713e-01
  1.32768080e-02  2.84653425e-01 -5.36472738e-01 -1.51837230e-01
 -1.61777824e-01 -6.99350312e-02 -2.55553693e-01  6.35624886e-01
 -1.09741747e-01  1.86202675e-01 -1.13566279e-01 -1.43007636e-01
  9.10348296e-02 -4.26208153e-02  1.59100443e-01  2.91699488e-02
  1.93840727e-01 -3.55282962e-01 -1.20599922e-02 -1.77675962e-01
 -6.29285276e-02  1.09492280e-02 -1.51296528e-02 -2.81025916e-01
  3.49288404e-01 -2.35606581e-01 -1.14161819e-01  1.85467988e-01
 -1.07449666e-01 -1.81861877e-01  1.03056528e-01  2.92561799e-01
 -1.81110688e-02  8.41713101e-02  2.94227421e-01 -1.37769222e-01
 -2.06417531e-01 -4.21544462e-01 -7.99929723e-02  3.32049459e-01
 -7.42999837e-02  9.05992687e-01  2.76923716e-01 -1.75108477e-01
  1.72405466e-01 -1.62868962e-01 -3.40437979e-01 -4.37120736e-01
  3.71545732e-01 -1.23864040e-01  7.18760610e-01 -2.37002611e-01
  1.13614611e-01  4.67998870e-02 -1.30177647e-01  1.77660167e-01
 -4.74020720e-01  4.46187556e-01  1.64761767e-01  2.28756726e-01
  2.15601102e-01 -3.19935381e-01 -1.40009403e-01  2.46854931e-01
  4.07214910e-02  1.17164299e-01  3.23642641e-01  1.83159292e-01
  7.59387016e-02  1.57367826e-01 -1.55808389e-01  2.76267886e-01
  4.83323574e-01 -3.33440721e-01 -4.80340682e-02  2.44479999e-01]"
Papers,"Papers ¶ Machine Learning Deep Learning Understanding Optimization / Training Techniques Unsupervised / Generative Models Image Segmentation / Object Detection Image / Video Natural Language Processing Speech / Other Reinforcement Learning New papers Classic Papers Machine Learning ¶ Be the first to contribute! Deep Learning ¶ Forked from terryum’s awesome deep learning papers . Understanding ¶ Distilling the knowledge in a neural network (2015), G. Hinton et al. [pdf] Deep neural networks are easily fooled: High confidence predictions for unrecognizable images (2015), A. Nguyen et al. [pdf] How transferable are features in deep neural networks? (2014), J. Yosinski et al. [pdf] CNN features off-the-Shelf: An astounding baseline for recognition (2014), A. Razavian et al. [pdf] Learning and transferring mid-Level image representations using convolutional neural networks (2014), M. Oquab et al. [pdf] Visualizing and understanding convolutional networks (2014), M. Zeiler and R. Fergus [pdf] Decaf: A deep convolutional activation feature for generic visual recognition (2014), J. Donahue et al. [pdf] Optimization / Training Techniques ¶ Batch normalization: Accelerating deep network training by reducing internal covariate shift (2015), S. Loffe and C. Szegedy [pdf] Delving deep into rectifiers: Surpassing human-level performance on imagenet classification (2015), K. He et al. [pdf] Dropout: A simple way to prevent neural networks from overfitting (2014), N. Srivastava et al. [pdf] Adam: A method for stochastic optimization (2014), D. Kingma and J. Ba [pdf] Improving neural networks by preventing co-adaptation of feature detectors (2012), G. Hinton et al. [pdf] Random search for hyper-parameter optimization (2012) J. Bergstra and Y. Bengio [pdf] Unsupervised / Generative Models ¶ Pixel recurrent neural networks (2016), A. Oord et al. [pdf] Improved techniques for training GANs (2016), T. Salimans et al. [pdf] Unsupervised representation learning with deep convolutional generative adversarial networks (2015), A. Radford et al. [pdf] DRAW: A recurrent neural network for image generation (2015), K. Gregor et al. [pdf] Generative adversarial nets (2014), I. Goodfellow et al. [pdf] Auto-encoding variational Bayes (2013), D. Kingma and M. Welling [pdf] Building high-level features using large scale unsupervised learning (2013), Q. Le et al. [pdf] Image Segmentation / Object Detection ¶ You only look once: Unified, real-time object detection (2016), J. Redmon et al. [pdf] Fully convolutional networks for semantic segmentation (2015), J. Long et al. [pdf] Faster R-CNN: Towards Real-Time Object Detection with Region Proposal Networks (2015), S. Ren et al. [pdf] Fast R-CNN (2015), R. Girshick [pdf] Rich feature hierarchies for accurate object detection and semantic segmentation (2014), R. Girshick et al. [pdf] Semantic image segmentation with deep convolutional nets and fully connected CRFs, L. Chen et al. [pdf] Learning hierarchical features for scene labeling (2013), C. Farabet et al. [pdf] Image / Video ¶ Image Super-Resolution Using Deep Convolutional Networks (2016), C. Dong et al. [pdf] A neural algorithm of artistic style (2015), L. Gatys et al. [pdf] Deep visual-semantic alignments for generating image descriptions (2015), A. Karpathy and L. Fei-Fei [pdf] Show, attend and tell: Neural image caption generation with visual attention (2015), K. Xu et al. [pdf] Show and tell: A neural image caption generator (2015), O. Vinyals et al. [pdf] Long-term recurrent convolutional networks for visual recognition and description (2015), J. Donahue et al. [pdf] VQA: Visual question answering (2015), S. Antol et al. [pdf] DeepFace: Closing the gap to human-level performance in face verification (2014), Y. Taigman et al. [pdf] : Large-scale video classification with convolutional neural networks (2014), A. Karpathy et al. [pdf] DeepPose: Human pose estimation via deep neural networks (2014), A. Toshev and C. Szegedy [pdf] Two-stream convolutional networks for action recognition in videos (2014), K. Simonyan et al. [pdf] 3D convolutional neural networks for human action recognition (2013), S. Ji et al. [pdf] Natural Language Processing ¶ Neural Architectures for Named Entity Recognition (2016), G. Lample et al. [pdf] Exploring the limits of language modeling (2016), R. Jozefowicz et al. [pdf] Teaching machines to read and comprehend (2015), K. Hermann et al. [pdf] Effective approaches to attention-based neural machine translation (2015), M. Luong et al. [pdf] Conditional random fields as recurrent neural networks (2015), S. Zheng and S. Jayasumana. [pdf] Memory networks (2014), J. Weston et al. [pdf] Neural turing machines (2014), A. Graves et al. [pdf] Neural machine translation by jointly learning to align and translate (2014), D. Bahdanau et al. [pdf] Sequence to sequence learning with neural networks (2014), I. Sutskever et al. [pdf] Learning phrase representations using RNN encoder-decoder for statistical machine translation (2014), K. Cho et al. [pdf] A convolutional neural network for modeling sentences (2014), N. Kalchbrenner et al. [pdf] Convolutional neural networks for sentence classification (2014), Y. Kim [pdf] Glove: Global vectors for word representation (2014), J. Pennington et al. [pdf] Distributed representations of sentences and documents (2014), Q. Le and T. Mikolov [pdf] Distributed representations of words and phrases and their compositionality (2013), T. Mikolov et al. [pdf] Efficient estimation of word representations in vector space (2013), T. Mikolov et al. [pdf] Recursive deep models for semantic compositionality over a sentiment treebank (2013), R. Socher et al. [pdf] Generating sequences with recurrent neural networks (2013), A. Graves. [pdf] Speech / Other ¶ End-to-end attention-based large vocabulary speech recognition (2016), D. Bahdanau et al. [pdf] Deep speech 2: End-to-end speech recognition in English and Mandarin (2015), D. Amodei et al. [pdf] Speech recognition with deep recurrent neural networks (2013), A. Graves [pdf] Deep neural networks for acoustic modeling in speech recognition: The shared views of four research groups (2012), G. Hinton et al. [pdf] Context-dependent pre-trained deep neural networks for large-vocabulary speech recognition (2012) G. Dahl et al. [pdf] Acoustic modeling using deep belief networks (2012), A. Mohamed et al. [pdf] Reinforcement Learning ¶ End-to-end training of deep visuomotor policies (2016), S. Levine et al. [pdf] Learning Hand-Eye Coordination for Robotic Grasping with Deep Learning and Large-Scale Data Collection (2016), S. Levine et al. [pdf] Asynchronous methods for deep reinforcement learning (2016), V. Mnih et al. [pdf] Deep Reinforcement Learning with Double Q-Learning (2016), H. Hasselt et al. [pdf] Mastering the game of Go with deep neural networks and tree search (2016), D. Silver et al. [pdf] Continuous control with deep reinforcement learning (2015), T. Lillicrap et al. [pdf] Human-level control through deep reinforcement learning (2015), V. Mnih et al. [pdf] Deep learning for detecting robotic grasps (2015), I. Lenz et al. [pdf] Playing atari with deep reinforcement learning (2013), V. Mnih et al. [pdf] New papers ¶ Deep Photo Style Transfer (2017), F. Luan et al. [pdf] Evolution Strategies as a Scalable Alternative to Reinforcement Learning (2017), T. Salimans et al. [pdf] Deformable Convolutional Networks (2017), J. Dai et al. [pdf] Mask R-CNN (2017), K. He et al. [pdf] Learning to discover cross-domain relations with generative adversarial networks (2017), T. Kim et al. [pdf] Deep voice: Real-time neural text-to-speech (2017), S. Arik et al., [pdf] PixelNet: Representation of the pixels, by the pixels, and for the pixels (2017), A. Bansal et al. [pdf] Batch renormalization: Towards reducing minibatch dependence in batch-normalized models (2017), S. Ioffe. [pdf] Wasserstein GAN (2017), M. Arjovsky et al. [pdf] Understanding deep learning requires rethinking generalization (2017), C. Zhang et al. [pdf] Least squares generative adversarial networks (2016), X. Mao et al. [pdf] Classic Papers ¶ An analysis of single-layer networks in unsupervised feature learning (2011), A. Coates et al. [pdf] Deep sparse rectifier neural networks (2011), X. Glorot et al. [pdf] Natural language processing (almost) from scratch (2011), R. Collobert et al. [pdf] Recurrent neural network based language model (2010), T. Mikolov et al. [pdf] Stacked denoising autoencoders: Learning useful representations in a deep network with a local denoising criterion (2010), P. Vincent et al. [pdf] Learning mid-level features for recognition (2010), Y. Boureau [pdf] A practical guide to training restricted boltzmann machines (2010), G. Hinton [pdf] Understanding the difficulty of training deep feedforward neural networks (2010), X. Glorot and Y. Bengio [pdf] Why does unsupervised pre-training help deep learning (2010), D. Erhan et al. [pdf] Learning deep architectures for AI (2009), Y. Bengio. [pdf] Convolutional deep belief networks for scalable unsupervised learning of hierarchical representations (2009), H. Lee et al. [pdf] Greedy layer-wise training of deep networks (2007), Y. Bengio et al. [pdf] A fast learning algorithm for deep belief nets (2006), G. Hinton et al. [pdf] Gradient-based learning applied to document recognition (1998), Y. LeCun et al. [pdf] Long short-term memory (1997), S. Hochreiter and J. Schmidhuber. [pdf]","[ 9.46591496e-02 -3.29051875e-02  5.61328158e-02 -3.20054412e-01
  1.61801711e-01  9.16117355e-02 -5.51859103e-02  3.98259521e-01
  8.40779096e-02 -3.70759428e-01 -2.18410045e-02  9.03755784e-01
  2.80736387e-03  3.51271361e-01 -1.36884093e-01 -5.36754251e-01
  2.22521037e-01 -1.56580448e-01 -1.02555722e-01  3.85503061e-02
 -1.50927633e-01 -6.62542880e-02 -4.90735471e-01 -4.93082702e-01
 -2.59043753e-01  2.80764818e-01  4.29478288e-01 -6.73025800e-03
 -1.90716460e-01  2.44891737e-02 -1.03528826e-02  2.45942727e-01
  6.99198171e-02  3.61250520e-01  9.91758108e-02 -1.01018734e-01
  2.79829264e-01  2.42088735e-01 -4.51459318e-01 -5.41104674e-02
  3.90958548e-01  7.08328247e-01 -1.05020449e-01  3.53224427e-02
  9.33732092e-02 -1.61524296e-01 -7.37825394e-01  1.31694432e-02
  5.73956966e-02  3.90894338e-02  3.37923944e-01 -2.69105658e-02
 -8.56245607e-02  2.54031092e-01  2.61634052e-01  2.54720509e-01
  1.81966335e-01 -2.14067101e-01  3.41991261e-02  4.63298559e-02
  4.57387567e-01  3.85363773e-02  9.92326736e-02  2.89650500e-01
  1.59308940e-01 -5.32751739e-01  3.29047233e-01  6.44687176e-01
  9.59194601e-02  2.43666228e-02 -3.75835225e-02  1.42604038e-01
  8.73808265e-02 -5.65089941e-01  1.14848074e-02 -3.91248941e-01
 -1.63210005e-01  1.06682979e-01 -4.70221668e-01  3.70992661e-01
  5.30679859e-02  1.00653812e-01  2.47623295e-01 -1.33863702e-01
  3.70488346e-01  2.94453382e-01  9.83837172e-02  1.27191275e-01
  8.98340791e-02  3.46948624e-01 -6.57818854e-01 -1.02986142e-01
 -2.85126925e-01 -1.09516419e-01  9.51839145e-03  8.34014416e-02
  1.07663311e-01 -2.97501758e-02  7.86390901e-02  2.98881650e-01
  2.97480553e-01 -4.15643677e-02  8.56311202e-01 -9.99712422e-02
  3.29205483e-01  4.40191269e-01 -2.93911338e-01 -6.82069212e-02
 -6.91468343e-02  4.19535339e-02  9.99814346e-02 -5.02917647e-01
 -3.70655745e-01  1.87754571e-01 -1.16855182e-01 -3.24998796e-01
  1.41128689e-01  1.20428532e-01 -1.11350693e-01  2.98994541e-01
 -1.00230105e-01  1.23647630e-01 -4.97761875e-01  5.01675844e-01
 -1.72555655e-01 -7.21250474e-02 -1.07665330e-01  3.21076125e-01
 -3.29157203e-01  5.16131632e-02 -9.67829209e-03 -2.06223324e-01
 -1.91223055e-01 -4.15305614e-01  1.10186428e-01 -1.86693385e-01
  7.89985880e-02  2.73431033e-01 -2.30421066e-01  9.24553946e-02
 -6.08612821e-02 -3.68480757e-02  3.25111926e-01 -2.79155344e-01
  2.67068893e-01  1.69696271e-01  2.26381391e-01 -1.71015039e-04
  4.13975537e-01 -4.85908657e-01  1.72297671e-01  5.92379451e-01
  1.98948056e-01 -1.36426985e-01 -2.27202073e-01  1.29696012e-01
 -2.07605883e-01  1.76337004e-01  3.87920201e-01  1.60066679e-01
  1.30908936e-01  1.44681465e-02  2.72729903e-01 -1.47779062e-01
  1.80011362e-01 -2.71446109e-01 -2.04130828e-01  4.34442237e-02
 -2.16233343e-01  9.10679530e-03  3.09430156e-02  2.66857147e-01
 -5.69166206e-02  1.91313028e-02 -2.04175152e-02  4.22796279e-01
 -1.16518572e-01  1.10272788e-01  5.09133264e-02  1.77448280e-02
 -1.32954344e-01 -2.11411029e-01  4.10106331e-02 -1.05835885e-01
  4.47960228e-01  2.60274410e-01  9.81490538e-02  2.76206642e-01
  3.63775641e-01 -2.19882336e-02  1.19478114e-01  3.48439030e-02
 -5.57072386e-02 -2.21908331e-01  2.72431970e-02  3.32007371e-02
  1.63122267e-01  3.00353132e-02 -1.60831064e-01 -2.66491890e-01
  5.66501394e-02 -1.25262231e-01 -5.78779094e-02 -1.23636229e-02
  1.67223245e-01 -2.25403905e-01  2.73032337e-01 -1.38412878e-01
  2.16946714e-02 -7.86249638e-02  1.28775816e-02 -1.58025533e-01
  5.99610386e-03  9.44269896e-02 -2.18538977e-02 -4.72052619e-02
 -2.44179666e-01  1.06338024e+00 -3.71223241e-02  2.87949443e-01
 -2.51385616e-03  6.51244372e-02  1.85329869e-01 -3.34677964e-01
  3.93447161e-01  2.93578170e-02 -1.78293705e-01  6.01515844e-02
 -5.67764342e-02 -9.38567817e-01 -8.78726020e-02  2.30641305e-01
 -4.33981538e-01 -3.22558731e-02  1.21042505e-01  2.51478732e-01
  2.86168426e-01  3.14360745e-02 -2.44366094e-01 -6.47747144e-02
 -1.89258367e-01 -2.63430297e-01  4.71250206e-01 -2.88863420e-01
  3.43125104e-03  4.50384974e-01 -1.67783901e-01 -1.12538926e-01
 -3.00484061e-01 -4.32331152e-02  3.23749594e-02 -1.24999523e-01
  3.06023769e-02  2.17906684e-02 -5.59802465e-02 -3.24198306e-01
 -3.94120663e-02 -8.05122852e-02 -4.77105945e-01  4.74387646e-01
 -1.00506432e-01 -9.88404676e-02 -1.95389211e-01 -2.41970643e-02
  2.50558317e-01 -4.58631754e-01  7.14092106e-02 -1.05018958e-01
  1.18044063e-01  1.83465570e-01 -1.14319012e-01 -1.52176498e-02
 -1.30815089e-01 -1.55974895e-01 -7.91616142e-02  2.52647847e-01
 -2.79015154e-01  3.05412173e-01 -2.32114941e-02  1.05881460e-01
 -2.30327561e-01  8.37100744e-02  4.64556217e-01 -2.61164695e-01
  9.66728553e-02 -3.96935225e-01  6.43865950e-03 -6.28914118e-01
  2.73386776e-01  2.09604368e-01 -2.21288860e-01  4.70328443e-02
 -1.99619174e-01 -1.55569822e-01 -1.59407407e-02  4.35100436e-01
  2.41340876e-01 -1.34595394e-01 -4.11330946e-02 -2.66229868e-01
  5.02188802e-02  1.00356624e-01  2.01494694e-01 -3.22887823e-02
 -2.14703325e-02 -3.11700612e-01  1.25926927e-01  7.68629909e-02
 -7.38051012e-02 -2.28642836e-01 -1.21160686e-01  1.75065592e-01
  2.27057308e-01 -2.09941909e-01 -3.50856006e-01  2.17018604e-01
  1.07154645e-01  2.14620709e-01  7.97401220e-02  6.43889979e-02
  5.02061285e-03 -1.18919238e-01 -1.86494291e-01  1.78602353e-01
  2.40712017e-01 -7.62378424e-02 -1.21217430e-01 -1.37493640e-01
  5.07208426e-03 -3.48418534e-01  1.30588293e-01 -5.75259067e-02
 -1.38252139e-01  2.84833372e-01  5.61631434e-02 -4.44006808e-02
 -2.16267735e-01 -1.24134291e-02 -6.26766205e-01  1.97754100e-01
  3.62473428e-01  6.71619177e-01 -1.85652047e-01 -2.41623260e-04
 -3.09509069e-01  1.24219902e-01 -3.20172071e-01  4.53610599e-01
  2.18838360e-02 -1.04682922e-01  3.35336626e-01 -1.92732856e-01
  1.35327093e-02  5.30272424e-01  1.33242086e-01 -8.15458715e-01
 -7.54592940e-04 -2.81002969e-01  7.70597905e-02 -2.51652926e-01
 -8.12822804e-02  3.14582616e-01 -1.21739440e-01 -1.91134229e-01
 -5.63793629e-02 -2.92187333e-01 -3.62570405e-01 -1.34169817e-01
  2.37807259e-02 -7.74704441e-02  1.05278920e-02 -3.37446779e-01
  1.54638365e-01 -1.07568979e-01  4.04818505e-01  2.96292398e-02
  8.67024958e-02 -1.38764232e-01  3.25937003e-01  1.59019992e-01
 -1.47010118e-01  1.44246191e-01 -7.17881024e-02 -7.81218559e-02
 -1.79372162e-01 -3.24047394e-02 -3.48350108e-02 -4.07270074e-01
  5.23730397e-01 -1.19400345e-01 -1.34382412e-01 -4.55300473e-02
 -5.25088161e-02 -1.11907925e-02  1.08697172e-02 -3.16417336e-01
 -4.22111675e-02 -4.31545317e-01 -4.25947905e-01  2.65055925e-01
  2.75423862e-02 -3.40799034e-01  3.88140112e-01  3.86809587e-01
  2.24604234e-01 -2.50458047e-02 -1.02749862e-01  3.15145820e-01
  3.70648831e-01  1.38934627e-01 -9.92926136e-02  3.92737031e-01
  7.49135613e-02 -4.43876773e-01  4.46434021e-01  1.61822643e-02
 -1.91118956e-01 -7.84443915e-02  8.08124989e-02 -6.06012702e-01
  4.48626541e-02 -2.21536174e-01 -1.53625041e-01 -9.85106677e-02
 -2.59509623e-01  1.09844744e-01 -5.44696897e-02  2.21530467e-01
 -2.30036914e-01  2.03189254e-01  1.44977078e-01 -2.16993243e-01
 -2.59213209e-01 -9.35729221e-02 -7.37498403e-02 -2.64002115e-01
  2.19307736e-01 -2.58176085e-02 -1.43136278e-01 -1.42408431e-01
  5.73419891e-02  3.25270206e-01  6.70088679e-02 -2.22063452e-01
 -1.03970855e-01 -2.15789288e-01 -2.48029396e-01  1.90372497e-01
 -2.78675258e-01  6.10905409e-01 -4.16155815e-01 -9.74997729e-02
 -4.35520336e-02 -2.95715630e-01 -1.28527373e-01 -2.54722536e-01
 -1.70835778e-02  7.32927583e-03 -1.22090779e-01 -4.52273898e-02
 -1.78913146e-01  3.00516188e-01 -9.50476229e-02 -3.92209888e-02
 -3.86791170e-01 -1.07175335e-01  3.29653740e-01 -2.36373782e-01
 -1.46481395e-01 -1.77638933e-01 -2.10708097e-01 -2.36266881e-01
 -8.82306546e-02  2.91357279e-01  5.22196963e-02 -1.52407484e-02
 -4.31576729e-01 -3.42734680e-02  1.85419470e-01 -2.24878117e-01
 -1.56221569e-01  2.89235711e-02  2.08257064e-01  3.47490087e-02
 -8.75236690e-02  1.83891073e-01 -1.87530443e-01  1.14866219e-01
 -1.22658551e-01 -4.50095311e-02 -2.30549246e-01  5.95499754e-01
  4.66838658e-01  2.49848157e-01  4.80439186e-01  8.61535817e-02
 -3.94970059e-01  5.45990586e-01  4.54669654e-01  2.68519938e-01
  1.25692664e-02 -1.04625477e-02 -2.75513470e-01 -7.10824281e-02
 -4.22187932e-02  1.58385307e-01 -2.27403268e-01 -5.69463968e-02
  1.76255584e-01  7.13123828e-02 -7.47649446e-02  4.76969332e-02
  7.13234693e-02  1.22311525e-01  1.86294280e-02  2.96853840e-01
  3.21979225e-01  5.53246215e-02  1.11466728e-01  3.18285644e-01
  6.49726465e-02 -1.83302283e-01  2.75468618e-01  6.93978816e-02
 -2.47164801e-01  4.08260152e-02  3.06963146e-01  2.35130131e-01
 -1.17201127e-01 -4.63359982e-01 -5.44615269e-01 -3.78282756e-01
  2.10342392e-01 -1.86849058e-01  4.26576287e-01  1.33492678e-01
  4.51857954e-01 -1.21385150e-01  1.30290538e-01  1.32537425e-01
  1.74025632e-02  3.54283378e-02  3.99483800e-01 -4.80242968e-02
 -1.10651970e-01 -3.14496383e-02  1.61377862e-01  9.01821926e-02
 -6.81409240e-02 -1.08202189e-01  3.13867360e-01  4.46132153e-01
 -2.63004094e-01  3.43194872e-01  4.03154194e-01  1.42276928e-01
 -1.73122376e-01 -1.28217325e-01 -3.19280103e-02  8.51910561e-04
  1.21630453e-01 -9.74622592e-02  4.68466580e-02  9.85275209e-02
 -1.70107856e-01  8.23384449e-02  6.24463633e-02  1.96170975e-02
  1.92165762e-01  1.88940212e-01  1.39526665e-01  1.56382829e-01
  1.37267455e-01 -5.44329643e-01 -1.33248776e-01 -7.62822852e-03
 -1.78667098e-01  2.48258021e-02 -3.24124485e-01 -2.96387374e-01
 -4.90981609e-01  2.41501257e-01  7.12437704e-02  2.82094061e-01
  2.43857235e-01  2.64012575e-01 -2.71123528e-01 -2.12826699e-01
  6.74057752e-04 -1.36852682e-01  2.88310815e-02  4.33893241e-02
 -3.23085248e-01 -1.03633448e-01  2.28147835e-01  4.78306934e-02
  3.67895901e-01 -2.84208488e-02  1.43950567e-01  6.10767417e-02
  4.77946967e-01 -1.88138545e-01 -1.21525154e-01 -2.96977192e-01
  1.10959694e-01  1.88917607e-01  1.56555980e-01  3.55059922e-01
 -2.08280668e-01  5.92951953e-01  8.53723213e-02  6.28539085e-01
  4.19686623e-02 -1.23719320e-01 -2.05493718e-01  2.95940161e-01
 -3.56777497e-02  1.40973866e-01  6.62798733e-02  4.12428796e-01
  2.91026056e-01 -3.91417772e-01 -1.70301169e-01  2.53630996e-01
 -2.38647778e-02  3.29870433e-02  1.69842899e-01  1.96642950e-01
  5.94984964e-02 -1.86367124e-01 -2.05225777e-02 -2.80357599e-01
  2.77257293e-01 -2.92573184e-01 -5.15543461e-01  8.60195532e-02
  1.61701858e-01  2.16691136e-01  1.93050832e-01  1.30620047e-01
  8.16269033e-03 -4.85080183e-01 -5.85955158e-02 -6.29088879e-02
 -8.28723013e-02  3.98357920e-02  2.38585323e-01  4.59942877e-01
 -1.77932769e-01  1.62999734e-01  1.68034852e-01  1.15533158e-01
  6.23118520e-01 -5.57201579e-02 -1.30549401e-01  3.11464071e-01
 -1.21381000e-01 -2.75793493e-01 -3.80148366e-02  3.72414410e-01
  2.48478755e-01  1.61054321e-02 -2.69174755e-01  1.97710291e-01
  1.24784082e-01 -1.04510620e-01  1.24005377e-01 -3.26477513e-02
 -3.00738737e-02  2.46383041e-01 -8.39098394e-02  3.99651229e-01
 -2.86650434e-02  1.70342535e-01 -1.66231051e-01 -7.95398355e-02
  3.28641176e-01 -6.31070957e-02 -2.62058467e-01  1.68395132e-01
 -4.45271432e-02 -1.98180512e-01  3.19970638e-01  1.52347013e-01
  7.25485831e-02 -6.90641627e-03  1.85913414e-01 -5.16813025e-02
 -6.42543212e-02 -6.41364902e-02 -2.16000795e-01 -5.84494099e-02
  1.29900603e-02  3.71155083e-01 -2.69310594e-01 -5.94108291e-02
 -1.46783561e-01  3.18626851e-01 -7.04016164e-02  3.16456616e-01
 -2.55779088e-01 -3.09956614e-02  8.29642937e-02 -1.96074784e-01
  7.81285167e-02 -8.62247217e-03  1.93941057e-01 -2.64489651e-01
  9.89740491e-02 -1.03929937e-01 -9.06172544e-02 -1.01442765e-02
  3.33079323e-02  5.14176786e-02 -7.99018964e-02 -1.39941573e-01
 -4.95329872e-02 -1.00425981e-01 -1.05241172e-01  2.93868016e-02
 -4.37441885e-01 -4.27451789e-01  1.63651943e-01  2.45673954e-01
 -2.76232481e-01 -8.03239793e-02  1.87357351e-01  1.88955486e-01
 -3.29553783e-01 -2.13218659e-01  4.46043462e-02  4.20889795e-01
  2.32450157e-01  3.12379718e-01  5.35374284e-01  2.32338026e-01
  1.26518920e-01  2.34314919e-01 -2.57314950e-01 -2.39047244e-01
  1.42455935e-01 -4.36567187e-01  1.58501953e-01  7.64020309e-02
  1.06043369e-01  2.95603275e-01 -5.75426929e-02 -3.27954710e-01
 -3.71486902e-01  3.48469019e-01  2.93561995e-01  6.89157009e-01
 -1.25084221e-01 -1.32630974e-01  4.31678414e-01 -2.65681833e-01
  2.20484301e-01  7.19885826e-02  1.77430451e-01  1.27199069e-01
  2.87612706e-01  3.28182071e-01 -3.38825583e-01  1.40212804e-01
  6.51864886e-01 -3.23245764e-01  1.25825673e-01  1.59179673e-01]"
Other,"Other Content ¶ Books, blogs, courses and more forked from josephmisiti’s awesome machine learning Blogs Data Science Machine learning Math Books Machine learning Deep learning Probability & Statistics Linear Algebra Courses Podcasts Tutorials Blogs ¶ Data Science ¶ https://jeremykun.com/ http://iamtrask.github.io/ http://blog.explainmydata.com/ http://andrewgelman.com/ http://simplystatistics.org/ http://www.evanmiller.org/ http://jakevdp.github.io/ http://blog.yhat.com/ http://wesmckinney.com http://www.overkillanalytics.net/ http://newton.cx/~peter/ http://mbakker7.github.io/exploratory_computing_with_python/ https://sebastianraschka.com/blog/index.html http://camdavidsonpilon.github.io/Probabilistic-Programming-and-Bayesian-Methods-for-Hackers/ http://colah.github.io/ http://www.thomasdimson.com/ http://blog.smellthedata.com/ https://sebastianraschka.com/ http://dogdogfish.com/ http://www.johnmyleswhite.com/ http://drewconway.com/zia/ http://bugra.github.io/ http://opendata.cern.ch/ https://alexanderetz.com/ http://www.sumsar.net/ https://www.countbayesie.com http://blog.kaggle.com/ http://www.danvk.org/ http://hunch.net/ http://www.randalolson.com/blog/ https://www.johndcook.com/blog/r_language_for_programmers/ http://www.dataschool.io/ Machine learning ¶ OpenAI Distill Andrej Karpathy Blog Colah’s Blog WildML FastML TheMorningPaper Math ¶ http://www.sumsar.net/ http://allendowney.blogspot.ca/ https://healthyalgorithms.com/ https://petewarden.com/ http://mrtz.org/blog/ Books ¶ Machine learning ¶ Real World Machine Learning [Free Chapters] An Introduction To Statistical Learning - Book + R Code Elements of Statistical Learning - Book Probabilistic Programming & Bayesian Methods for Hackers - Book + IPython Notebooks Think Bayes - Book + Python Code Information Theory, Inference, and Learning Algorithms Gaussian Processes for Machine Learning Data Intensive Text Processing w/ MapReduce Reinforcement Learning: - An Introduction Mining Massive Datasets A First Encounter with Machine Learning Pattern Recognition and Machine Learning Machine Learning & Bayesian Reasoning Introduction to Machine Learning - Alex Smola and S.V.N. Vishwanathan A Probabilistic Theory of Pattern Recognition Introduction to Information Retrieval Forecasting: principles and practice Practical Artificial Intelligence Programming in Java Introduction to Machine Learning - Amnon Shashua Reinforcement Learning Machine Learning A Quest for AI Introduction to Applied Bayesian Statistics and Estimation for Social Scientists - Scott M. Lynch Bayesian Modeling, Inference and Prediction A Course in Machine Learning Machine Learning, Neural and Statistical Classification Bayesian Reasoning and Machine Learning Book+MatlabToolBox R Programming for Data Science Data Mining - Practical Machine Learning Tools and Techniques Book Deep learning ¶ Deep Learning - An MIT Press book Coursera Course Book on NLP NLTK NLP w/ Python Foundations of Statistical Natural Language Processing An Introduction to Information Retrieval A Brief Introduction to Neural Networks Neural Networks and Deep Learning Probability & Statistics ¶ Think Stats - Book + Python Code From Algorithms to Z-Scores - Book The Art of R Programming Introduction to statistical thought Basic Probability Theory Introduction to probability - By Dartmouth College Principle of Uncertainty Probability & Statistics Cookbook Advanced Data Analysis From An Elementary Point of View Introduction to Probability - Book and course by MIT The Elements of Statistical Learning: Data Mining, Inference, and Prediction. -Book An Introduction to Statistical Learning with Applications in R - Book Learning Statistics Using R Introduction to Probability and Statistics Using R - Book Advanced R Programming - Book Practical Regression and Anova using R - Book R practicals - Book The R Inferno - Book Linear Algebra ¶ Linear Algebra Done Wrong Linear Algebra, Theory, and Applications Convex Optimization Applied Numerical Computing Applied Numerical Linear Algebra Courses ¶ CS231n, Convolutional Neural Networks for Visual Recognition, Stanford University CS224d, Deep Learning for Natural Language Processing, Stanford University Oxford Deep NLP 2017, Deep Learning for Natural Language Processing, University of Oxford Artificial Intelligence (Columbia University) - free Machine Learning (Columbia University) - free Machine Learning (Stanford University) - free Neural Networks for Machine Learning (University of Toronto) - free Machine Learning Specialization (University of Washington) - Courses: Machine Learning Foundations: A Case Study Approach, Machine Learning: Regression, Machine Learning: Classification, Machine Learning: Clustering & Retrieval, Machine Learning: Recommender Systems & Dimensionality Reduction,Machine Learning Capstone: An Intelligent Application with Deep Learning; free Machine Learning Course (2014-15 session) (by Nando de Freitas, University of Oxford) - Lecture slides and video recordings. Learning from Data (by Yaser S. Abu-Mostafa, Caltech) - Lecture videos available Podcasts ¶ The O’Reilly Data Show Partially Derivative The Talking Machines The Data Skeptic Linear Digressions Data Stories Learning Machines 101 Not So Standard Deviations TWIMLAI - _` Machine Learning Guide < http://ocdevel.com/mlg >`_ Tutorials ¶ Be the first to contribute!","[-9.20432508e-02 -1.92407936e-01  5.06490692e-02  7.57640302e-02
  2.85127997e-01  5.22886634e-01 -2.05770344e-01 -1.65942952e-01
 -2.55539212e-02 -2.72772044e-01  2.11718082e-01  4.40075129e-01
  2.49055237e-01  4.57418978e-01  1.50024593e-01 -3.48245651e-02
  3.95978987e-02  4.24171567e-01  3.02586973e-01 -6.50238872e-01
  1.32130370e-01 -3.90281864e-02 -2.49407321e-01 -4.51967567e-01
  4.48025733e-01  5.59464216e-01 -1.18305281e-01  2.74782985e-01
  9.08545330e-02 -2.47400835e-01 -1.27188161e-01 -3.17900002e-01
 -1.88703209e-01 -1.87638640e-01 -7.18128011e-02  2.32774675e-01
  3.19699705e-01  1.80620134e-01 -4.26689163e-02 -3.66646759e-02
  8.43257546e-01  2.06178710e-01 -8.45453367e-02  3.46098840e-01
 -3.28967571e-02  3.46470252e-02 -3.43898475e-01  1.37564585e-01
 -4.29086611e-02  5.43452024e-01 -5.92864864e-02 -1.90119356e-01
 -1.97327361e-02 -2.31230892e-02  1.17966682e-01  2.68026143e-01
  1.64362729e-01 -3.54915857e-01  1.31709903e-01  2.85400093e-01
 -2.21782297e-01  4.79178429e-02 -1.28730983e-01  7.05008745e-01
  1.32241949e-01 -2.76273429e-01  4.90041114e-02  4.85628724e-01
  1.44821137e-01  1.19034842e-01 -2.68581986e-01  1.78817719e-01
  6.19933195e-02 -7.09553123e-01  3.73194367e-02 -2.85126746e-01
 -1.48963362e-01 -2.08931044e-02 -2.01600995e-02  2.15478510e-01
  8.40467960e-02  1.65686250e-01  3.26403141e-01  1.09405972e-01
  6.83239698e-01 -1.43325821e-01 -7.92593509e-02 -2.79371083e-01
 -3.11263166e-02  1.62636265e-01 -3.31992917e-02 -2.83135742e-01
  1.07349254e-01 -2.34436855e-01  3.92668620e-02  3.98922026e-01
 -1.45009369e-01 -8.02545547e-02  1.31381258e-01  4.44951594e-01
  2.57572651e-01  1.80481933e-02  4.35420334e-01 -3.48119795e-01
  2.22018570e-01  2.74899095e-01 -1.90573543e-01 -1.16936579e-01
 -2.35841453e-01  1.01706848e-01  1.72632858e-01 -3.45626593e-01
 -2.21574098e-01 -2.98586339e-01 -1.02569520e-01 -4.11504321e-02
 -3.23178768e-02  4.79259156e-02 -3.29765946e-01  1.91372052e-01
 -8.48718733e-03  1.08940758e-01 -6.26246274e-01 -8.69320258e-02
 -5.77607274e-01  1.28807783e-01 -8.09690636e-03  4.10406798e-01
  1.49036065e-01 -3.51720512e-01  2.32491083e-02 -7.18739569e-01
 -2.64520526e-01 -2.78843045e-01 -1.72585294e-01 -3.01471613e-02
 -1.43013686e-01 -4.64736111e-02 -2.45003656e-01  3.64987016e-01
  1.03355311e-01  4.78948243e-02  2.73202896e-01 -1.16454028e-01
 -2.86123827e-02  1.92603022e-01 -6.14797696e-02 -9.14319232e-02
  7.56907940e-01  8.89118016e-03  8.08483213e-02  3.01122904e-01
  3.76345336e-01 -1.49674416e-01 -5.31036973e-01  8.93734843e-02
  1.87920034e-01  1.17191389e-01  3.99603307e-01  9.97621417e-02
  1.93490475e-01 -2.35977218e-01 -1.26327038e-01  1.74739778e-01
 -1.11547798e-01 -3.39108169e-01 -7.01494664e-02  1.65578406e-02
 -4.26488109e-02  2.85611153e-01 -7.10260794e-02  1.42030597e-01
  2.40170360e-01  8.55552927e-02 -1.40653625e-01  1.37624323e-01
 -2.24593163e-01 -1.25164047e-01 -1.25901490e-01 -1.05139688e-01
  7.12558031e-02 -7.94827044e-02  4.14462388e-01  1.62622988e-01
  1.16618648e-01  1.10208139e-01 -6.56239018e-02  4.49141026e-01
  3.10863376e-01  2.31601909e-01 -6.23383885e-03  1.19153723e-01
  1.61774866e-02 -4.48958993e-01  3.25794458e-01  3.29180300e-01
  3.64889592e-01  2.95075953e-01 -1.54706776e-01 -1.67393640e-01
 -2.59027004e-01  2.52716392e-01 -2.18525186e-01 -2.60054231e-01
 -2.54091173e-01 -1.99374735e-01 -2.88163006e-01 -1.29622549e-01
  4.81282771e-02  1.84035152e-01 -1.75473213e-01 -2.06558481e-02
 -2.61599511e-01  4.75401103e-01 -2.91268945e-01 -9.76931900e-02
 -1.01596370e-01  2.41328508e-01 -1.42335787e-01 -2.73928106e-01
  1.78254664e-01  2.35340759e-01 -1.45440295e-01 -2.29027271e-01
  3.14589918e-01 -2.48029560e-01 -8.63584131e-03 -4.20260057e-02
 -1.05823502e-01 -4.19933558e-01  3.18700105e-01  5.44943690e-01
 -3.53433371e-01 -4.38482463e-02 -2.42832005e-01 -2.98655093e-01
  3.23272981e-02  2.05674291e-01  1.66104123e-01 -8.72901678e-02
  2.88132995e-01 -1.40731946e-01  5.26371479e-01  1.43038213e-01
 -7.10412860e-06  3.11675459e-01  1.33269906e-01  1.43151924e-01
 -4.09721196e-01 -5.54307818e-01 -2.86869630e-02 -1.55395567e-02
  1.79987028e-02  1.06197253e-01 -1.74775869e-01  4.57990915e-02
 -1.32057026e-01 -4.14520860e-01  2.14414418e-01  5.10737896e-01
 -1.35117233e-01  3.10725719e-01 -2.90091127e-01 -7.72883892e-02
 -2.98509076e-02 -2.71229178e-01  1.36840865e-01  1.48994058e-01
  1.84775233e-01  1.58494353e-01 -3.30644786e-01 -2.00363785e-01
  2.91428529e-03  1.10824138e-01 -9.79565680e-02  3.02851856e-01
 -1.23841166e-02  1.85209006e-01 -5.65797798e-02  1.00855447e-01
  2.78469384e-01  1.39960453e-01  3.34636599e-01 -1.59125760e-01
  1.05271675e-02 -2.60804504e-01 -1.31642014e-01 -8.93469453e-02
  4.62296247e-01 -1.62984133e-01 -2.98479088e-02 -1.90985724e-01
  3.34364325e-02  1.62920088e-01 -2.36994788e-01  2.76411742e-01
  9.98619497e-02  6.94598913e-01  1.58683822e-01  2.49849498e-01
 -4.26817536e-02 -1.46906823e-01  3.83035570e-01  1.57982558e-01
 -1.13187179e-01 -4.22841787e-01 -4.17567104e-01  3.64638895e-01
 -1.86772451e-01 -4.17797327e-01 -2.56916225e-01  8.13412070e-02
  2.19096377e-01  7.06785843e-02 -1.03434473e-02  4.73679066e-01
 -1.48995772e-01  1.27036393e-01 -3.30139622e-02  4.81442921e-02
  1.47681952e-01 -3.74043226e-01  1.52275965e-01  1.26844630e-01
  2.12746873e-01 -9.82916579e-02  1.17430903e-01 -5.47944084e-02
 -2.22374991e-01 -2.11369500e-01  3.23631287e-01  2.31119692e-02
  3.87882799e-01 -2.33127654e-01 -8.48207623e-02 -3.21569324e-01
 -3.74234974e-01  1.05252497e-01 -2.79541850e-01  3.07812750e-01
  1.12003095e-01  4.67884064e-01 -2.93630958e-01  2.07870632e-01
 -1.27676614e-02  1.06545001e-01 -4.08475816e-01  6.78255796e-01
 -1.19031064e-01  9.14110243e-02  9.87623781e-02 -5.62338382e-02
  8.22756290e-02  4.42688942e-01 -1.62211567e-01  2.35618934e-01
 -1.11927375e-01  5.81965782e-02  2.79428840e-01 -2.16214389e-01
  3.96117032e-01  3.16117853e-01 -2.77844295e-02 -3.92739862e-01
  1.14359483e-01 -6.92519188e-01 -5.03565907e-01 -9.77967307e-02
 -8.36298056e-03 -2.83896118e-01 -6.22138381e-04 -1.86259732e-01
  4.19336185e-02 -3.36962253e-01  3.96406412e-01 -2.65731439e-02
  3.21140110e-01 -1.83994994e-02 -3.66161391e-02  4.55768168e-01
 -1.98193882e-02  2.87099570e-01  1.33167699e-01 -1.62723623e-02
  8.53115916e-02 -1.93935275e-01 -3.89830112e-01 -1.79603845e-01
  3.28552812e-01 -4.20955420e-02 -2.08154365e-01  8.37681890e-02
 -4.07489002e-01 -3.38582188e-01 -4.62091677e-02 -7.81064555e-02
 -2.17925414e-01 -2.24910975e-02 -6.55442998e-02  4.13696229e-01
 -1.13194203e-02 -1.19948000e-01  2.11747229e-01 -2.46306792e-01
  6.80906326e-02 -2.34690070e-01  5.14999747e-01  1.00304559e-01
  7.36940742e-01  1.02954268e-01 -1.52876198e-01  3.36782753e-01
  1.06503725e-01 -4.71391380e-01  2.92218477e-01 -4.77522686e-02
  5.93842387e-01  4.41625714e-02 -1.94893721e-02 -3.33354592e-01
 -2.31025472e-01 -2.35266432e-01  2.31118038e-01  1.69486389e-01
 -2.33918756e-01  3.79455507e-01 -2.07947180e-01  1.48364365e-01
  1.01660818e-01 -4.00436521e-02 -8.90019815e-03 -2.63305485e-01
  1.36908680e-01  1.32272661e-01 -5.11333644e-02  1.09179296e-01
  9.81089100e-02  9.27923769e-02 -7.78091848e-02 -8.45027417e-02
  5.10303229e-02  8.90703499e-02  6.25108331e-02 -3.40057850e-01
  1.68761969e-01 -1.82661772e-01 -2.65962481e-01 -8.48566592e-02
 -6.28060341e-01  3.50543171e-01 -2.48155177e-01 -2.65400171e-01
 -2.36872137e-01 -4.06237543e-02  1.29593253e-01 -2.95254346e-02
 -5.63836209e-02  6.19112998e-02 -2.99823999e-01  1.37703180e-01
 -1.07738748e-01  1.28156289e-01 -1.25780553e-01  2.41771638e-02
 -1.26869708e-01 -1.23683758e-01 -7.38286823e-02  4.53898944e-02
  1.23382946e-02  2.28768885e-02 -2.70676911e-01 -8.77917111e-02
  1.37124270e-01  6.50377274e-02 -9.45655629e-04 -6.47706538e-02
 -8.40538561e-01  1.40236050e-01  9.64655727e-03 -4.75959592e-02
 -2.43092686e-01  2.64099717e-01  2.51355946e-01 -3.42316926e-02
 -2.33698294e-01  2.22327769e-01 -9.86634344e-02  6.26696706e-01
  8.92667025e-02 -6.52073100e-02 -2.34645963e-01 -1.06103934e-01
  2.58048534e-01  3.94099563e-01  4.68202949e-01 -5.54450005e-02
 -6.95085377e-02  4.28418398e-01  6.12504482e-02  4.71917242e-02
 -2.16746375e-01 -2.36500561e-01 -9.21321809e-02  2.67675042e-01
 -1.56048890e-02  1.84375510e-01 -1.23500973e-01 -7.48874322e-02
  4.02348600e-02  5.49880369e-03 -1.60837546e-01 -4.28458065e-01
  3.49597216e-01  1.36820823e-01 -1.11565500e-01  1.84521839e-01
  1.40036881e-01  1.31131768e-01 -2.03212813e-01  4.44810778e-01
 -1.36461407e-01  1.63219154e-01  1.78057551e-01  1.98289931e-01
 -3.82196456e-02  2.21413732e-01  3.67867537e-02  2.67833561e-01
  7.57890791e-02 -1.44710943e-01 -5.01865268e-01 -4.02577430e-01
  8.36330354e-02 -1.82279915e-01 -8.59787837e-02 -1.56048715e-01
  4.75699976e-02  1.83433611e-02  7.00796127e-01 -1.66509934e-02
 -4.04835455e-02 -9.88157988e-02  4.71843988e-01  2.50966430e-01
 -2.55763493e-02 -4.37137708e-02  3.26218992e-01  2.18767509e-01
  1.23500377e-01  2.86722660e-01  1.39141679e-01  5.07294893e-01
 -4.32302088e-01  4.33215462e-02  6.25401363e-02  2.60883123e-02
 -4.37136665e-02 -1.45982221e-01 -3.67196053e-02 -3.41311604e-01
  2.87099302e-01 -4.10310440e-02  1.49363905e-01 -7.17207231e-03
 -2.57387385e-03  8.10718834e-02  6.97427988e-02  2.74094194e-03
  7.04669580e-02 -2.39325538e-02  1.56995758e-01  3.25127751e-01
 -1.55462205e-01 -5.16394615e-01 -3.44556302e-01  7.63334110e-02
  1.89055860e-01  1.50613248e-01 -8.33622441e-02 -1.66082531e-01
 -5.44032454e-01  2.07630783e-01  2.51384586e-01  2.07208455e-01
  1.29453957e-01  4.04590487e-01  3.23254094e-02  1.17024720e-01
 -6.07112944e-02 -1.26585543e-01  1.62378430e-01 -2.59267807e-01
 -2.24298723e-02  2.82388330e-02  3.60549450e-01 -2.60407567e-01
 -3.00367661e-02  7.69628286e-02  2.59832263e-01  1.50010318e-01
  1.70623258e-01 -9.63380858e-02  1.36736989e-01 -1.95232123e-01
 -1.19531393e-01 -3.82737666e-02 -1.05619200e-01  2.36027271e-01
 -2.40213633e-01 -1.63418800e-01 -1.64554387e-01  3.99985462e-02
 -2.18840808e-01 -1.48225576e-03 -2.25644946e-01  1.76479205e-01
  2.77109921e-01 -3.83528382e-01  2.15889201e-01  3.15756202e-01
  7.12281540e-02  9.17128101e-03  3.66373640e-03  7.03022122e-01
 -4.86407042e-01 -5.78290522e-02  3.29793513e-01  1.23436943e-01
  2.51389623e-01 -5.78748994e-02 -2.06297904e-01 -1.28700495e-01
  2.73690224e-02 -3.01044524e-01 -1.53998375e-01 -1.55065507e-01
  1.51457638e-01  4.64510739e-01  2.50892341e-01  1.30521715e-01
  1.73684284e-01 -2.65925080e-01  2.16467708e-01 -4.43867326e-01
 -2.59135783e-01 -2.96329975e-01  2.98261523e-01 -3.12304020e-01
 -1.71641469e-01  1.95306063e-01 -1.58393010e-03 -4.24034894e-04
  4.88848329e-01 -2.59347796e-01 -2.45414421e-01 -2.48755306e-01
 -1.67345732e-01  9.43845212e-02  7.04375189e-03  4.13231134e-01
  2.57867455e-01  1.19470134e-01 -1.20726041e-03  3.11972976e-01
 -6.48021549e-02  1.85530335e-01 -1.42320871e-01 -1.66265905e-01
 -1.99148178e-01  1.45818233e-01 -2.06769317e-01  3.61542076e-01
  1.98907465e-01 -3.32866490e-01 -2.93768764e-01  1.59952760e-01
 -4.05172527e-01 -2.76411831e-01 -6.50090799e-02 -4.71242547e-01
 -1.16803292e-02  1.62701160e-02  4.00483519e-01 -2.75105953e-01
 -3.04442495e-01  9.51834023e-02 -1.89855531e-01  1.22275710e-01
 -5.96726350e-02 -3.82279217e-01 -2.95097917e-01  5.76690100e-02
  8.72880593e-02  1.23153612e-01 -6.72888458e-01 -1.67087466e-01
 -8.15746374e-03  3.37671727e-01 -1.19655550e-01  5.36463022e-01
 -5.10433391e-02 -7.07247704e-02  4.65206623e-01 -1.04588695e-01
  1.68685377e-01 -1.31833643e-01  2.76527107e-01 -1.30540401e-01
  3.17114174e-01 -1.51213825e-01 -7.33507201e-02  5.13418391e-02
 -2.71067858e-01  6.08857200e-02 -3.47031876e-02 -3.30283344e-01
  8.97490978e-02 -2.19930291e-01 -2.05009401e-01  1.58193737e-01
  1.73274994e-01 -2.15885028e-01 -2.39056051e-02 -6.10021167e-02
  2.04764113e-01  1.94876373e-01  4.79635000e-01 -1.76355779e-01
 -5.02698570e-02 -5.74002415e-02  1.45108089e-01  5.74090362e-01
  2.82728970e-01  4.54962403e-01  2.51168072e-01  1.33565664e-02
  2.18612701e-02  1.61425382e-01 -4.72282052e-01 -3.55710864e-01
 -1.01297341e-01  3.32118496e-02  3.09382707e-01 -3.04903239e-01
  2.18370348e-01  3.30510557e-01 -1.29452392e-01 -2.47368455e-01
 -5.14322817e-01  1.86785266e-01  4.67044264e-01  2.44446620e-01
  3.32181036e-01 -7.44339377e-02 -2.21630931e-01 -2.52225161e-01
  7.00618401e-02  1.92393556e-01 -3.51845503e-01  1.10004529e-01
  6.41386032e-01  2.69576132e-01 -1.33296460e-01  6.31297007e-02
  2.84186482e-01 -1.51518792e-01 -4.81034890e-02  2.19571948e-01]"
How to contribute,Contribute ¶ Become a contributor! Check out our github for more information.,"[ 4.07038294e-02 -7.21629933e-02  3.61229386e-03  2.47201473e-01
 -2.49298766e-01  2.45276228e-01 -5.88885769e-02 -2.12042809e-01
  4.29833531e-01  1.19597418e-02  2.22265810e-01 -1.90796584e-01
 -6.94937557e-02  9.96856987e-02  2.34207183e-01 -2.37713456e-01
 -2.56263494e-01 -3.01674932e-01  2.89287448e-01 -6.87295124e-02
 -2.52668504e-02  2.92236626e-01  5.49882889e-01 -3.88526917e-02
  8.91088471e-02  2.23857000e-01  3.51466835e-02  2.65572360e-03
  1.11077547e-01 -2.79224277e-01 -1.23430319e-01  2.43457958e-01
  1.42899677e-01  3.24428320e-01  2.30483785e-01  1.98386192e-01
  1.49155989e-01 -2.43778005e-02 -7.15603292e-01  1.44147515e-01
  3.86195689e-01 -3.22246462e-01  7.30134994e-02 -2.52091289e-01
  2.72628397e-01  5.42932861e-02 -1.26518086e-01 -4.94115241e-02
  1.85208157e-01  1.68640450e-01  3.60066414e-01 -2.04757124e-01
  2.90344507e-01 -2.27265447e-01 -2.44828507e-01  1.75233006e-01
  1.88418105e-01  5.31881869e-01 -1.31510079e-01  3.28392714e-01
 -1.16555750e-01  1.69034433e-02 -2.95733124e-01  2.14028239e-01
  2.38957524e-01 -4.33964431e-02 -1.25115916e-01  4.61267471e-01
  2.13932507e-02  1.64494127e-01  7.42548406e-02  1.41748220e-01
  1.03819020e-01  1.25911376e-02  2.08700046e-01 -3.39166760e-01
  1.19086407e-01 -8.30215961e-02  1.61228944e-02  1.38206288e-01
 -2.73712456e-01 -1.08155750e-01 -3.43550652e-01 -4.78205122e-02
  3.85877162e-01  5.52129865e-01 -2.74524260e-02  1.09421358e-01
  5.08084521e-02 -2.65178204e-01 -1.72138978e-02  2.49588683e-01
  8.99836719e-02  4.23652977e-01 -5.52990846e-03 -1.07425399e-01
 -6.09015711e-02 -4.83119279e-01  9.02918056e-02  1.28442377e-01
 -2.78599560e-02  3.18695605e-01  2.37430826e-01 -5.70331097e-01
 -1.26229450e-02  2.13408530e-01  1.71773583e-01  2.25760877e-01
 -1.46964520e-01  9.75007564e-03 -4.56536524e-02  2.57068396e-01
 -4.05631065e-01 -1.99806318e-01  2.47542411e-01 -1.26894593e-01
  8.52792710e-02 -2.28098556e-01  6.98148757e-02  1.84610039e-02
  5.04109636e-02  8.23714286e-02 -9.86145511e-02 -5.20544350e-01
 -3.10509443e-01  1.48685843e-01 -3.84469271e-01  6.32191718e-01
 -4.41789851e-02 -3.02654475e-01  8.88471026e-03 -6.23636484e-01
 -5.05896151e-01 -2.42299680e-02  1.25886187e-01 -2.06143230e-01
 -9.72689986e-02 -1.47311747e-01 -1.72516972e-01 -1.34709835e-01
  9.74228233e-02 -1.11496463e-01 -1.99143529e-01 -2.72708770e-04
  3.02689314e-01 -1.20799571e-01  8.01517367e-02  2.58051753e-01
  1.56348228e-01 -5.09536564e-02 -3.19127478e-02  3.81277576e-02
  3.25546503e-01 -1.27563596e-01  3.34992021e-01  8.99094045e-02
 -2.31722698e-01 -1.85198605e-01  8.13464541e-03  7.09990337e-02
  3.17296147e-01 -1.32488962e-02 -2.07199290e-01 -1.34019315e-01
  7.61068463e-02  8.01112130e-02 -1.32781297e-01  2.36548390e-02
 -3.26089591e-01 -2.81425089e-01  1.21503659e-01 -1.02919906e-01
  3.91286373e-01  1.50277298e-02 -1.17792860e-01  1.02390967e-01
  3.37911487e-01  9.98797454e-03 -1.75416857e-01 -4.51406389e-02
 -1.58679992e-01 -5.53546362e-02 -2.09437683e-01  4.20370728e-01
  1.71001285e-01 -8.90206248e-02 -2.71689296e-01  2.70754039e-01
  3.54397357e-01  7.74113014e-02 -1.57450084e-02 -1.87837943e-01
 -5.70156090e-02  1.03943460e-01 -2.10037716e-02  1.10211477e-01
 -1.39832720e-01  1.86572373e-01 -6.56430721e-02  2.82645337e-02
  3.49240333e-01  1.18122496e-01 -1.24767106e-02 -3.26978862e-01
 -2.94952661e-01  5.53311408e-02  6.64754212e-01  2.05986217e-01
  9.73498151e-02  6.23984747e-02  7.07324818e-02 -9.47575122e-02
  5.46851717e-02 -2.19227880e-01  3.21883440e-01 -2.62730598e-01
 -2.14631200e-01  2.25826964e-01 -1.29162699e-01  9.40220878e-02
  1.70646250e-01 -7.03924522e-02  2.98668295e-01  8.30885544e-02
 -2.33153686e-01  2.55695432e-01 -2.73692161e-01 -1.99615330e-01
 -1.91461239e-02 -3.09235871e-01 -5.03729880e-02  1.09370261e-01
  2.92769164e-01  1.26429722e-01  4.33848649e-02  2.03527898e-01
 -9.05088782e-02  2.27440223e-01  6.84040263e-02  1.62072070e-02
  3.65090013e-01  3.99446100e-01  1.61890425e-02  3.12641144e-01
  1.12159535e-01  2.45910361e-01 -1.20431997e-01 -5.65433979e-01
  2.53140042e-03 -1.24316037e-01 -2.12707803e-01 -1.11292616e-01
 -3.07219446e-01  2.71576047e-01 -4.42465544e-01  1.89269289e-01
 -6.80721775e-02 -1.38676420e-01 -3.92676055e-01 -9.28041264e-02
 -2.04817757e-01 -3.28642279e-01 -1.85506508e-01  5.63028976e-02
 -1.68440938e-02  1.33505881e-01  1.32159114e-01 -1.22753397e-01
  9.49200913e-02  1.01147301e-01 -1.76060960e-01 -2.22602502e-01
  2.62621880e-01 -2.42831364e-01 -5.41826971e-02  2.98123449e-01
 -3.30084890e-01  8.35479274e-02 -1.83738083e-01 -1.31626442e-01
  1.92208856e-01 -2.52930462e-01  7.06964657e-02  2.30434284e-01
  2.44578972e-01 -1.20103724e-01 -5.47565460e-01 -2.40242288e-01
  1.98891237e-02  2.00394601e-01 -4.56681959e-02 -2.84758478e-01
  4.71114628e-02 -2.13385373e-01 -2.14176103e-02 -1.10201418e-01
 -2.75167346e-01  2.80788928e-01  3.50081176e-01  4.57814097e-01
  2.12957412e-01  1.61481023e-01 -3.17927361e-01  2.81460583e-01
 -9.03669223e-02 -2.64758561e-02  1.39077380e-01  5.51709086e-02
 -2.62194514e-01 -1.47179753e-01  3.59692454e-01 -1.15559939e-02
  2.92513520e-01 -9.25801247e-02 -2.39258166e-02 -2.43797362e-01
 -2.43496701e-01 -5.65007329e-02  7.42803439e-02  4.79878969e-02
  3.58411856e-02 -6.47121593e-02  1.52220413e-01 -2.30109245e-01
 -1.48651406e-01  2.59963572e-01 -2.86542505e-01 -6.23689890e-01
  6.03623129e-03  1.21276073e-01 -3.18351656e-01 -1.04807824e-01
 -5.82717452e-03  1.53457358e-01  6.27219006e-02 -2.45052114e-01
  7.87869543e-02  8.23314562e-02  1.43238604e-01 -4.89168495e-01
  2.41918728e-01  2.62025356e-01  4.55947012e-01  2.04250917e-01
  1.42975971e-01  1.58416584e-01  2.75955826e-01  3.43522936e-01
 -1.79308385e-01  1.33669809e-01 -2.55549937e-01  8.34112987e-03
  1.78462118e-01 -3.65006834e-01 -1.54853081e-02 -1.71207279e-01
 -1.16421066e-01 -7.23356903e-02 -5.45305386e-03 -8.98946151e-02
  2.60037571e-01  5.67671843e-03 -7.71278664e-02 -9.25835411e-05
  4.10570829e-05  9.60449576e-02 -4.32017706e-02  1.84202269e-02
 -1.47232533e-01  1.25545412e-01 -1.71237767e-01  6.07345700e-01
 -1.79387480e-02 -7.14486837e-02  3.81177664e-01  3.16799998e-01
  2.12423682e-01  2.81585515e-01  2.85887241e-01  2.29754135e-01
  3.66744585e-02  5.78131005e-02 -2.17556953e-03 -9.14888233e-02
 -4.79522794e-02  1.92239121e-01  2.31068924e-01  1.03594204e-02
 -1.16727509e-01 -1.04641125e-01  3.53534077e-03  3.84302139e-01
 -1.98213253e-02  1.13382347e-01 -9.52893570e-02  2.31881693e-01
  4.13568169e-02 -1.67208254e-01 -2.88386732e-01  2.85794497e-01
  1.37851713e-02  4.21985984e-02 -2.70792335e-01 -3.67473304e-01
  1.14972822e-01 -1.79797545e-01  2.06999108e-01 -2.23344386e-01
 -1.22197993e-01 -6.13801122e-01  7.49132931e-02 -5.38900018e-01
  4.25268635e-02 -3.39167327e-01 -7.26883635e-02  1.08843386e-01
 -1.16655253e-01  6.50070682e-02  9.60393474e-02  1.13475323e-01
 -1.97339401e-01  1.14285789e-01  3.22745964e-02 -1.14830837e-01
  2.70301580e-01  2.66366079e-02 -7.58491876e-03  1.67765781e-01
  6.42217174e-02  5.04434183e-02 -2.80941278e-01  5.20669743e-02
 -1.13988951e-01  1.17183700e-01  3.03868204e-01  7.49527812e-02
  4.25975800e-01 -4.45916168e-02 -1.40623137e-01 -2.36112535e-01
 -1.38628832e-03  1.82237342e-01 -1.17471807e-01  4.03938979e-01
  1.49047058e-02  3.31780851e-01 -6.30761087e-02  1.25416875e-01
  1.83231130e-01  4.61943150e-01 -1.50575817e-01  1.72368020e-01
 -6.01108313e-01 -9.02172849e-02 -2.16411397e-01 -2.13652253e-01
 -8.14513043e-02 -1.06812775e-01 -4.03476357e-01  3.26337636e-01
  1.19517244e-01  1.96527410e-02  1.67249933e-01  1.81003734e-02
  2.24188223e-01 -4.37616231e-03  4.10836712e-02 -1.30871013e-01
  1.23068035e-01 -1.53400684e-02 -2.22044438e-01  5.15134074e-02
  2.16815434e-02  1.46701559e-01  5.39376810e-02 -2.28767544e-01
 -3.42133075e-01 -2.18723100e-02 -1.66746974e-01  2.53281772e-01
  2.74342659e-04 -7.62163326e-02  3.36072743e-01  5.88343628e-02
  4.36655581e-02 -2.29231250e-02 -3.34819973e-01  4.17830162e-02
 -2.34704837e-01  1.08340107e-01 -4.17053819e-01 -2.51302034e-01
 -1.18593626e-01  2.43756130e-01  3.84061933e-01 -3.79475653e-01
  1.53034762e-01 -5.51802933e-01 -2.61044979e-01  2.18708858e-01
 -8.53028055e-03 -1.09752357e-01 -1.80769026e-01 -6.46168441e-02
 -1.34929597e-01 -1.52465738e-02  8.14444851e-03 -3.27273943e-02
  1.81564078e-01 -6.59222305e-02 -3.19090128e-01 -2.16201872e-01
  8.67415518e-02 -4.77701500e-02  1.85147926e-01 -1.30660221e-01
  4.63839211e-02  3.69747132e-01 -2.68914223e-01 -2.55679876e-01
 -1.09973229e-01  9.01051685e-02  2.75989115e-01  1.55417547e-01
 -8.56338814e-02  2.18109235e-01 -3.86724621e-02 -1.75970837e-01
  1.17306568e-01  7.01186433e-02  1.41453326e-01  2.73692995e-01
  2.23233610e-01 -2.37394139e-01  1.03787266e-01 -3.59298475e-02
  2.07506880e-01  3.47652704e-01  1.30355254e-01 -1.48908377e-01
 -2.03483298e-01  3.19411159e-02  2.69347280e-02  7.04391226e-02
  3.39992404e-01 -1.32658288e-01  4.37194258e-01 -1.64821923e-01
 -4.09283012e-01  2.04561770e-01 -2.81673878e-01 -2.27441162e-01
  6.91322833e-02  2.10151806e-01 -8.38651806e-02  4.84994091e-02
  4.44192886e-02  5.08104004e-02  1.26073971e-01  4.94979173e-01
  2.20907077e-01  1.19736195e-01  3.17596234e-02 -6.54717386e-02
  1.44036030e-02 -8.65238234e-02  4.52617824e-01 -6.48067743e-02
  1.47864118e-01  1.38161734e-01 -3.72710764e-01  2.37601846e-02
 -1.12868302e-01 -6.00465178e-01 -1.13739967e-01  8.61366391e-02
  1.24926232e-01 -2.28104487e-01 -2.31169343e-01 -2.93854624e-02
 -1.55581549e-01 -9.86590385e-02 -4.25510518e-02  6.47549406e-02
  2.16994211e-01  1.51107252e-01  4.96956557e-01  1.53418899e-01
  2.35197544e-01  6.89190626e-03 -6.41785413e-02  6.81810677e-02
 -1.86625794e-01 -3.63711596e-01  2.86444008e-01  2.89125174e-01
 -5.97816929e-02 -1.86576009e-01  2.93979317e-01  1.73815772e-01
  8.94594043e-02  3.00601035e-01  2.22404897e-01  3.59045982e-01
  3.91517393e-02  1.91219058e-03 -2.88787454e-01  8.11802670e-02
 -2.20383331e-01  2.13738397e-01  1.36748567e-01 -1.78541094e-01
 -9.43042561e-02  5.06290555e-01 -3.20637524e-01 -4.61860418e-01
  1.39446557e-01  2.18536600e-01  2.81106353e-01 -1.57590732e-01
  1.14031516e-01 -4.16243775e-03  3.51451822e-02  4.01783168e-01
 -2.59391516e-01 -1.64884984e-01 -1.51003554e-01  1.69928357e-01
 -8.19307938e-02  1.82480663e-01 -1.02349050e-01  1.39973029e-01
  1.00459822e-01 -1.92290425e-01 -5.17836809e-02  2.56922930e-01
 -2.91444659e-01  1.93164214e-01 -3.01172465e-01 -1.52376257e-02
  1.06270071e-02 -6.72994971e-01  1.05994262e-01  9.28884074e-02
  3.11534643e-01 -1.07284293e-01 -4.23594601e-02 -2.84411423e-02
 -2.12717921e-01  3.18866611e-01 -7.11973682e-02  3.09428990e-01
 -5.00474386e-02  5.79802334e-01 -1.78060114e-01 -2.85481691e-01
 -2.48467952e-01  4.74136099e-02 -1.20353654e-01  5.69703989e-02
 -5.27931117e-02  1.80742368e-01  8.44676271e-02 -3.15575540e-01
 -8.94920677e-02  1.20917544e-01 -8.27804394e-03  5.69523752e-01
  3.29059780e-01  4.64536279e-01 -4.02380107e-03 -1.25581726e-01
  4.24391121e-01 -1.75856845e-03 -4.72706527e-01  6.19848864e-03
 -3.40646237e-01  5.64131141e-01 -2.71922320e-01 -8.16487819e-02
  1.82559133e-01  2.58903235e-01  3.93048227e-01 -2.24908218e-01
 -2.86564320e-01 -4.07011390e-01  5.40728085e-02 -4.01796214e-02
  3.28243017e-01  1.29197344e-01  4.67409231e-02 -2.10588098e-01
 -7.47138187e-02 -2.62006879e-01  1.67328551e-01  3.23378779e-02
 -2.59779487e-03  2.20493197e-01 -1.12984739e-01  4.11398470e-01
 -4.25116599e-01  1.09849222e-01 -2.40383595e-01 -1.16597414e-01
  2.10782781e-01 -1.32385626e-01  5.68957962e-02 -3.60084206e-01
  4.38446440e-02 -8.39012712e-02 -1.60516143e-01  8.95770788e-02
 -8.57286081e-02 -5.90910688e-02  1.00809120e-01 -1.59156710e-01
 -1.14172205e-01  1.29161000e-01  3.92049164e-01  3.04862056e-02
 -1.21059064e-02  1.27344623e-01  5.90772554e-02  1.63266048e-01
  1.19838193e-01  9.29958448e-02  5.71868243e-03  1.53082296e-01
 -2.34158948e-01 -6.21618815e-02  7.97303244e-02 -1.25665277e-01
 -1.45787746e-01  3.87382150e-01  2.85698950e-01  2.14637667e-02
  1.65222421e-01  9.65304077e-02 -4.19220030e-02 -1.03484645e-01
  1.10460266e-01  7.59663284e-02 -4.50765848e-01  7.67826587e-02
  9.52318124e-03 -3.30704540e-01  1.55721575e-01  1.54823437e-01
  3.70144606e-01 -4.39847887e-01 -2.63282716e-01  5.18926740e-01
  1.03915706e-01 -4.21275049e-02  5.13913512e-01 -1.04573727e-01
  3.76830325e-02  4.41767782e-01  1.91905703e-02  2.42908314e-01
  5.19342646e-02  1.24966562e-01  2.56735384e-01  9.44659561e-02
 -2.89213866e-01  9.63995047e-03  8.46295580e-02  2.80293018e-01]"
